{"docstore/metadata": {"7b4dd3d3-0d22-45be-a873-f4e7ee912b7c": {"doc_hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3"}, "2d17a20b-2160-4cbd-9e34-6538482e5840": {"doc_hash": "e743d624079694be3d0d07ff10977d97ab282719894af375a11914e64efd0f64"}, "e17ca871-0ee6-4523-b902-8183da6ccff2": {"doc_hash": "2c7c2c80341bab3c2d108a5a9638e0c634035c7e04a7724bdc55793f12894b15"}, "f30d43af-128a-4fd3-98c2-ea1ceada23c5": {"doc_hash": "bc165124946c21351cfedf044d3eda75bd28279388f0d47bb0db9e7a8894eeaa"}, "dcf91579-ae9d-4814-9d0e-b56be5e6f1df": {"doc_hash": "9d10019790692397ec09c338cc1a70e317da37c98de70df7c158b5fa193397a6"}, "428c8d61-390f-4d1a-b656-2f87c81d641b": {"doc_hash": "76ae26cac350ea1f42328e292ed961934eb28bb78ebc46e8b789a76d161078ab"}, "76659b49-0055-4e28-9020-a31ea62cbc5b": {"doc_hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b"}, "23cb7585-b237-4849-8290-fe3c0ad08fab": {"doc_hash": "c02970ee076ed6e493a27354165d65dc43f938d74fc18986cbfa5b6433b9ffcf"}, "4b6af1f5-c9fb-43d6-b105-7089ce96625e": {"doc_hash": "56d84923ae1b219addb64beadb8378aa06e3481fc193c474086aa50eed514588"}, "2a846f99-5fe7-4493-a0dd-639788eb506a": {"doc_hash": "9f3ffb24d9f4327d76272a1536caec790d173d2774a2c4477aa27369641c6fa6"}, "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2": {"doc_hash": "3196b7c69e53802f99dcae042bcceeac32653aa29cc285773e0076c9a8093306"}, "920623a3-837c-4701-a871-88012d6549df": {"doc_hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d"}, "8190836a-fef3-42e0-bffd-cc6f7213200f": {"doc_hash": "f5b9728e2e434970c4c94275c5df03ea445d9bb3a6531e540c836a37f5500479"}, "bc5bbe72-2a35-4d27-95c5-5c463624f996": {"doc_hash": "75b88132795e7d976768650de4bc67b722b04dc29108d7612ec69f70635945c4"}, "99c54870-df71-4cb0-b702-070027838d28": {"doc_hash": "f13f77ac3ca161693d812f7997f1160250955e99f482ed029f2786a322bce4b0"}, "e911ecec-728b-4d37-ae47-9c0243536c51": {"doc_hash": "3855448a743c2af9285e67c105743a4c1062b6350cdf8c6cc8fa3b91028804c1"}, "1e72c3ce-99b9-471f-811e-be570ec1b4cf": {"doc_hash": "d7c60090b34cbc7a4513c3e0fa03d9a6eb1b923482a82ef86375e4d6d0cc4309"}, "533691eb-26f8-4278-a72a-0d9a517bed9c": {"doc_hash": "e5928fa8ae731e15d63ef81e92c27a3327b47e61fd00766a20eddb8e43bab4b7"}, "fd104bae-6dce-4589-95ef-1c71df2bf52d": {"doc_hash": "42fa796e26d7ba3c46a40d5bd9a3dba10dc3660a5d8e1dad93278c7af9735dfe"}, "11dd6273-debc-4fa2-908b-a9a0c5295dd8": {"doc_hash": "9eb1a8181b779ff64ffc3ec207b65bb25ebfcb235e40eadc2e793dee8cdce282"}, "06dc1791-f85c-4383-b9d8-e6ef09df60ec": {"doc_hash": "d9c96c44f65e063b425fd08182bfe0b3ec1721302e55efc81c54c3cc9cfff264"}, "6fcf6522-44d0-4f6f-aed1-027f6f73d7a5": {"doc_hash": "c5ca07b24da9e08bc4e03fe779ca80440ecce9745f03f8fe0c37a27032479ab4"}, "abea19ba-bc33-4e0b-9349-641ad47ff35c": {"doc_hash": "771d0bf7ce6338fdcf14dff8292af4912d33e68edd2f859179d2ffb461a0bf62"}, "e722c170-ba69-41c6-9ea9-c7c706def820": {"doc_hash": "8edd41fe89d8dacd4840766ed0c1fcecff57989365fff7d90222d084854097e3"}, "28b28a63-2908-4b97-af1c-372d0dfc4526": {"doc_hash": "181922706788acfa1f7d72665da5c50426bd59cf38173aef5900ae8543df01bd"}, "bb812494-d334-4c4c-9b68-e435354ad303": {"doc_hash": "756efb70f5fc8b6d2df6eb7b0b55d9709920aaa668d14a90b7671c024a8ab222"}, "fedebcf3-43c9-40c1-a944-c8a80c409f45": {"doc_hash": "ea64c589bb9c82aaa02146ab60969c70a0138437227dcddc75ff275110a46671"}, "550804ab-fd65-4a96-bcf8-4f52bd7f69f0": {"doc_hash": "951fec756923b1792c0e24f8ee9e0e30bcdcdcdfc02ee06ea2597a9b440f0be8"}, "20c77b91-90fb-4040-b78f-d76c40ec8995": {"doc_hash": "4e39f7eb8aa22c1489af723c322ce62e5e01a4ef54c110f14f9ac531ee257fb3"}, "814b3ab5-f347-4632-ac08-2078b8bd9dcf": {"doc_hash": "dbf08d374f4f84eb6cd1b37fc4c60e3167d363c8192eb1aec0c000af78f0903b", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "94623b20-8a86-4bce-9397-0d026113300c": {"doc_hash": "089c44e3859213f663b9ae61b8774407cb6036f33b2b3c9225695ebe6a1a3158", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "a44380e3-4f7a-4715-ad8a-ee1d5a85a018": {"doc_hash": "3bb7d285713d89ed3331cb45cc98da3e7fa299ed2460c2de948fae8f8e167d16", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5": {"doc_hash": "9ed3db10cd61063a4d130adbe8400a6c6da1d72c7f98213c583b51a59553516f", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "0495298b-2aa8-45c2-9657-5a108f867e59": {"doc_hash": "b61850c5a3ba4db4877f394ede5511dc7f3f1c812d7f9f361f17add1e159f575", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "2e0d2e9e-4d19-479d-895b-cf4f611d2f86": {"doc_hash": "e2ecdd234cc58c05393b4d3730382f665c893c24d826435d5ecb10f5d794e8d2", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "6480bca9-61ff-4788-a112-db65ab317b68": {"doc_hash": "ed22d1009cd70afec186bff675c18426a0cd3bd65f3bb2b5f8f9beaba0f2d739", "ref_doc_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c"}, "e18f5d78-bc98-4123-8a51-886695414922": {"doc_hash": "e743d624079694be3d0d07ff10977d97ab282719894af375a11914e64efd0f64", "ref_doc_id": "2d17a20b-2160-4cbd-9e34-6538482e5840"}, "b27fadec-6a82-455e-92bc-50aade1c21cc": {"doc_hash": "633c537f73ba1d0807d652b3a03b7be6ede4de8bd55e43f746a25b022319753a", "ref_doc_id": "e17ca871-0ee6-4523-b902-8183da6ccff2"}, "1b35f758-ec20-4c16-967c-e4a1aa78634c": {"doc_hash": "4ee5a3cb8cd2e74f9ef5629fe6133f2af49b0c9c1bdc7bab5b9afb4ded2bd1bc", "ref_doc_id": "e17ca871-0ee6-4523-b902-8183da6ccff2"}, "3c166e31-d18e-49bb-8699-6bb507e5b517": {"doc_hash": "bc165124946c21351cfedf044d3eda75bd28279388f0d47bb0db9e7a8894eeaa", "ref_doc_id": "f30d43af-128a-4fd3-98c2-ea1ceada23c5"}, "5e867a5c-8bce-4ae2-b970-ce3241a29166": {"doc_hash": "9d10019790692397ec09c338cc1a70e317da37c98de70df7c158b5fa193397a6", "ref_doc_id": "dcf91579-ae9d-4814-9d0e-b56be5e6f1df"}, "5de63d04-dfde-4f75-942f-0c9ba8ce62dc": {"doc_hash": "ab3ca5db08ba146b3ba68a520678270318ed83b20fc05829437d3f3071085cb8", "ref_doc_id": "428c8d61-390f-4d1a-b656-2f87c81d641b"}, "fa563a32-8e54-40d8-8c6c-b713ef61a6b7": {"doc_hash": "2e931ed4328a0acfc96afde23df32afdcc0e5adc8f034273814bedf997232904", "ref_doc_id": "428c8d61-390f-4d1a-b656-2f87c81d641b"}, "ce3c4156-ca7b-4869-8dfa-dd51d6fba718": {"doc_hash": "5ce79759cd4523b9ad618c670381d47fd829a2521303498ae223ad37ee27ec62", "ref_doc_id": "428c8d61-390f-4d1a-b656-2f87c81d641b"}, "106f052f-bac9-4c1f-9c48-96f396d8a9cd": {"doc_hash": "e53781b1852e298b3b0707dd1acc0a04022a1fdfb92348d4a76dc45341e15a10", "ref_doc_id": "428c8d61-390f-4d1a-b656-2f87c81d641b"}, "46302779-6fb0-4fb6-b734-3371d3492190": {"doc_hash": "699b3be10743bfefe8e208c3ffad6be7e81d8fdbf57c8ef7bf786f87f1b82891", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "1f8889b7-cffa-4899-8dd3-7780274afd47": {"doc_hash": "6045008360ff5ea107e9ddabe0fe58930083e8e91f910ca49b7fb13f53bab67f", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "e0f38874-c9b4-4905-b448-303476c8ca5e": {"doc_hash": "f0502546fdf15ec91558eee1152c4e828e2af6c4a41154dbd0450cda86f1ba6c", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "778d4ddd-9f54-442b-8d1e-fe490a0ba92f": {"doc_hash": "cdc4a28afbcc8c93559d87f091e3e5455ddd2ed2499c7e4bd04fc0d330bf07e3", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "daa79d4d-19e4-4b09-98d7-ba99773a0996": {"doc_hash": "6558d1e26943a6c28354c6719f1330dc09b29b727259a6089ffc98d48b4f3571", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c": {"doc_hash": "57fe2e17ec25526ca5d83ed7a2bb2e9656e08b6cc9be0b713ac3f2080c50414e", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "b6b6464d-fb83-43fe-b275-1c251eb817d9": {"doc_hash": "e2b3436ef7b2f152b9b53f0cb60522c332b56e806d8e25fd5a524e0b815e41d3", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "51188862-12a2-4079-97a0-e947e30b97c2": {"doc_hash": "ffe24e4b845d7290c61c2f4d1ce47bc28a310f8110c2e59ba87d9ec364633e67", "ref_doc_id": "76659b49-0055-4e28-9020-a31ea62cbc5b"}, "04d4d346-861c-4518-8352-39e66a710ab4": {"doc_hash": "e779c9ed81d9d35504289f331ced919b1f9c9e40cf8a09ff7135cbfd608d5458", "ref_doc_id": "23cb7585-b237-4849-8290-fe3c0ad08fab"}, "9acb6aeb-8477-4f63-878d-fb213506b879": {"doc_hash": "9e46de1908f08ae94cc710de9331421c63e354809abbc7d70a23b670e12e6bb8", "ref_doc_id": "23cb7585-b237-4849-8290-fe3c0ad08fab"}, "1659ea24-5899-44fa-918e-d5aa40f92369": {"doc_hash": "1dfe5cb767eb1cc0e25d19f682deeaab4ad675bf16178dc07464fc93dfcdb0ba", "ref_doc_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e"}, "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8": {"doc_hash": "af7e9c490f5e6fe9d2e30f6314ef6a4e4eebccc36d9e6b71ba32ee74230f56d3", "ref_doc_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e"}, "10375478-9b69-4f99-9790-39277831b609": {"doc_hash": "1cab03265022ec14107a765400a966f616e5bbc0517e6cc203c2173cb016388f", "ref_doc_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e"}, "61d57bf7-ab65-4a87-add8-3240f0b075e4": {"doc_hash": "81818b531dd14d9c7ecfb183a61d231bbadcf5251a239a69ff8611c002b6737c", "ref_doc_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e"}, "c07df0e2-ef76-4a78-bf05-350f3c205e2a": {"doc_hash": "e434972d109101120e16ecded118b2e862f3217b8ed7453decdbca159df30c96", "ref_doc_id": "2a846f99-5fe7-4493-a0dd-639788eb506a"}, "febfd0b0-6031-474d-9d9d-eb36658adf52": {"doc_hash": "eae90794b201b5e8c8d09d8e2b84e0c8efbd93a4aa239224959513c39ac0fe0e", "ref_doc_id": "2a846f99-5fe7-4493-a0dd-639788eb506a"}, "07e9ba50-ceb9-4701-b868-265100dfb95c": {"doc_hash": "1123b7a7138d1bcbeb62bdc615bb6d7362a11074826391f0e38398ac37b0f4f1", "ref_doc_id": "2a846f99-5fe7-4493-a0dd-639788eb506a"}, "2cafbad8-f9b6-4c47-8dd4-5c0976ef4727": {"doc_hash": "c2ce999a4e02b60c5d61d285ef0dd3d7b8d3acb17c6d8afa196147bf8cd04ccc", "ref_doc_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2"}, "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2": {"doc_hash": "a472d29f6b7d43c7a88f156409484d41e3db2d8fe7db6c3a0a8d83aa8ba50773", "ref_doc_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2"}, "bd5d7b2c-8196-4a4b-88e4-0053d0101a1b": {"doc_hash": "63c280f3bdc88f5e6d6b770e5ee9f85d6df78888d286df2b48ae71404654f1dd", "ref_doc_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2"}, "83729607-4c9c-473e-a561-ed4a28d11023": {"doc_hash": "4fd418c99c2bcf2d629f265cf230ac0b3a7e1f60c2741801660cf68d847e05d3", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "bcceba26-7544-4425-b400-ae8b7928cb80": {"doc_hash": "5a1c71a2dc762d253bc26db168835dfd15ff6eda045d67f705c881119bb776db", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "08e15406-f89e-4af2-9199-af846b12eb48": {"doc_hash": "78e48f61fbf72cd5e062d9f296be80400e5b3ffcbedaed6b783fc5d1cbfe8787", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "5989c398-d366-49e1-8fa2-4fbe9e666b35": {"doc_hash": "a18108b895e7836bd1d8d86fca037fab07c8d2b29c9d12a3ab0f874e7d16bac9", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b": {"doc_hash": "b983dccf7265752f4b44c6d61d9ae92ea872523655455685ca5ead426a932fd8", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "4703fd7f-a415-4ff4-9d17-c75b1eef3a44": {"doc_hash": "d6be22e49991c2333a05b7703583d807d94993bb659575852768ef7a311e32e1", "ref_doc_id": "920623a3-837c-4701-a871-88012d6549df"}, "f81178f8-36c3-4766-9d0d-ac39d1b3b0a3": {"doc_hash": "b9d98e4a8aa390efadc878ff13398a118ce23ac4f2e0cf9643e27951f5e53db3", "ref_doc_id": "8190836a-fef3-42e0-bffd-cc6f7213200f"}, "6524d622-7068-4f33-99ff-fc410f06b0b7": {"doc_hash": "550243802845e459d3cf722f77c541409475516070bc2bc6aac50c60f216a859", "ref_doc_id": "8190836a-fef3-42e0-bffd-cc6f7213200f"}, "a98ebc3e-8daa-4621-9f0d-90953a85787b": {"doc_hash": "cc6fbeadc6218d1c1d087ab7481c6aebe4062209f8152ed4dcb50fb1a1292ff7", "ref_doc_id": "8190836a-fef3-42e0-bffd-cc6f7213200f"}, "95a615df-39a3-4140-a176-5eba9e924c53": {"doc_hash": "75b88132795e7d976768650de4bc67b722b04dc29108d7612ec69f70635945c4", "ref_doc_id": "bc5bbe72-2a35-4d27-95c5-5c463624f996"}, "8db0f441-d843-406c-9438-1b9a4969a470": {"doc_hash": "26bedaedaaeea5bf357832ca30ea2b89a6a0efddcb9c345fc6d74036b4e6e147", "ref_doc_id": "99c54870-df71-4cb0-b702-070027838d28"}, "7c71a61f-edda-4ff5-b258-01ceac7ee63d": {"doc_hash": "772fb5961f0f092ba2777c9a4ff2b4cfc70ecc06c77dcf1c902bc47678972d12", "ref_doc_id": "99c54870-df71-4cb0-b702-070027838d28"}, "6c150e08-3886-4704-b67d-dce89e211539": {"doc_hash": "549ce98489c08906acc6deaf9efec0001a38fb3c69e376e9fb5267697a436f83", "ref_doc_id": "99c54870-df71-4cb0-b702-070027838d28"}, "00fd73f5-5005-47e1-bd54-f20f9d917a12": {"doc_hash": "bb4926ec1227b938a283dd2747d08d100a085671ae8638c33d71ef2328ddd0f3", "ref_doc_id": "99c54870-df71-4cb0-b702-070027838d28"}, "558fdebe-9bcc-4337-b186-00f9d28f596c": {"doc_hash": "b11cf1489a9c97264eafd504916e80fdb2d15086f1ce0a1801c5fb317ec1499e", "ref_doc_id": "e911ecec-728b-4d37-ae47-9c0243536c51"}, "1b8a309e-c71a-4f71-bc01-74d98e023f8e": {"doc_hash": "a14a13969ed9c52e7431b9ec93620d27c6fd26e8b23bd37a50e1dfa72fe712e2", "ref_doc_id": "e911ecec-728b-4d37-ae47-9c0243536c51"}, "15f439a6-67dc-47a8-bb44-07c90449eacd": {"doc_hash": "3eece73cdb92b5b03b0f1b4e166ad790e2cd5c9e9371ecaea7fac5abb7d105ed", "ref_doc_id": "1e72c3ce-99b9-471f-811e-be570ec1b4cf"}, "4bc7a83f-e906-4fb8-a567-f2b6526b0be6": {"doc_hash": "693b9acb14f7a4bcc38eefa64ef901c2a06c61eae1fe1ea50d2ce88b6f97ae0d", "ref_doc_id": "533691eb-26f8-4278-a72a-0d9a517bed9c"}, "51d249f2-7cb2-4519-ab91-857816e097db": {"doc_hash": "554a9d5e24469ef3d7f58856222471884668806c70a27902b64ea893f8cf695d", "ref_doc_id": "533691eb-26f8-4278-a72a-0d9a517bed9c"}, "5fdfdd44-0b87-478d-8766-5c63409bd18d": {"doc_hash": "0d853920d4be3bf1212de74f10f1e12c46105571271e6016403b6d45b71f70d9", "ref_doc_id": "533691eb-26f8-4278-a72a-0d9a517bed9c"}, "e2b71b59-a82a-4392-a562-e4ca4df9334c": {"doc_hash": "42fa796e26d7ba3c46a40d5bd9a3dba10dc3660a5d8e1dad93278c7af9735dfe", "ref_doc_id": "fd104bae-6dce-4589-95ef-1c71df2bf52d"}, "c6edd4f6-b5ad-4e87-941f-926644a1a0ad": {"doc_hash": "34bf3678b922049eab227226b05bd3a856e04e005f0d213945c5071c54d3a173", "ref_doc_id": "11dd6273-debc-4fa2-908b-a9a0c5295dd8"}, "e6b521f1-1e23-409c-bcb4-4bf935bd4685": {"doc_hash": "7b5685633dc57dc5aa97fac057444d06c019ac5e9d9b6af6e947658f64b3eef5", "ref_doc_id": "11dd6273-debc-4fa2-908b-a9a0c5295dd8"}, "fccfaaa1-192b-44dd-bd8a-a086567326cd": {"doc_hash": "d9c96c44f65e063b425fd08182bfe0b3ec1721302e55efc81c54c3cc9cfff264", "ref_doc_id": "06dc1791-f85c-4383-b9d8-e6ef09df60ec"}, "9435b2d6-b3c9-4972-892a-f859b5b80d4b": {"doc_hash": "c5ca07b24da9e08bc4e03fe779ca80440ecce9745f03f8fe0c37a27032479ab4", "ref_doc_id": "6fcf6522-44d0-4f6f-aed1-027f6f73d7a5"}, "fdbc7680-0188-4332-9fbb-0a4a7baebcb1": {"doc_hash": "839c9be54eddfefaa712af5c1915f6e27eeb85b988e44fbecab86da4bbcc76e1", "ref_doc_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c"}, "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4": {"doc_hash": "124084ccd3666be21e63d6955f8e2e7a0a8c3ba88c3bbdf0621de83575760447", "ref_doc_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c"}, "f1251b79-f785-449b-8902-f3149ffb56ec": {"doc_hash": "925a32b0ff53d22782eb18c6bef8646c208c2c7a659d09eb28c5bd46026c6534", "ref_doc_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c"}, "1ae014cb-5801-4d73-a5dc-830d4d48f9a5": {"doc_hash": "137738f7115ae4096e1594eec1db6eae330d999e05a753de4dfc38da54dd4946", "ref_doc_id": "e722c170-ba69-41c6-9ea9-c7c706def820"}, "b42251e6-8f21-4b04-aead-84eac56a0b57": {"doc_hash": "a59ee64ed0b4de8dbd07cef54befa39d7099b4d206b023ebcfa61d5cdf96ccbb", "ref_doc_id": "e722c170-ba69-41c6-9ea9-c7c706def820"}, "076aa109-eb13-4509-bb1f-b0ef73899505": {"doc_hash": "2e8d4a8dbe332ecd7701f5fa1ef34af5a57fce5fa0459c4a45ab0d331cae24ca", "ref_doc_id": "28b28a63-2908-4b97-af1c-372d0dfc4526"}, "7d04cdd7-de92-4755-b478-3b9f0f9a4468": {"doc_hash": "29533173aa1cfe9c7fb4a240595af5103466c101829e382b2d6a55f79ff4a7ed", "ref_doc_id": "28b28a63-2908-4b97-af1c-372d0dfc4526"}, "8d01fec2-65c5-482b-b4e8-3c4fe24fafdb": {"doc_hash": "edbde0b66461a152840389d96a782489d5469b5094c88c719315696315b2a603", "ref_doc_id": "28b28a63-2908-4b97-af1c-372d0dfc4526"}, "bc30f8a1-9604-4974-9b5a-82ed02c6832b": {"doc_hash": "756efb70f5fc8b6d2df6eb7b0b55d9709920aaa668d14a90b7671c024a8ab222", "ref_doc_id": "bb812494-d334-4c4c-9b68-e435354ad303"}, "49ef1389-4192-44f9-9b23-92c6268a50d6": {"doc_hash": "ea64c589bb9c82aaa02146ab60969c70a0138437227dcddc75ff275110a46671", "ref_doc_id": "fedebcf3-43c9-40c1-a944-c8a80c409f45"}, "ede124b2-bdd5-4f16-833f-edbc1d46bda5": {"doc_hash": "b02d5cb58bb0a251d5c54a9d97b5f973ea134d6c4fd8a3807cc6798f928ae7eb", "ref_doc_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0"}, "c7140191-cb2a-4802-ae1b-c6c5ebccea33": {"doc_hash": "db67323d38cf5b9c08b7d2adc164d1c39bce8cd098a638e5ffc26a4becf2611b", "ref_doc_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0"}, "5e0ab7c2-bebe-4bd3-9525-21d840ced0c6": {"doc_hash": "3d674d34415ce7ac13276ccc4e337657ae4fabf5e8110853cf517ff05923d540", "ref_doc_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0"}, "bffcf79d-2750-46b6-9cc2-b0a3375f34f9": {"doc_hash": "cbf54722f3f98e03d6161b5d183947ba56d54050dbea424be39b4b26b4e49be0", "ref_doc_id": "20c77b91-90fb-4040-b78f-d76c40ec8995"}}, "docstore/data": {"814b3ab5-f347-4632-ac08-2078b8bd9dcf": {"__data__": {"id_": "814b3ab5-f347-4632-ac08-2078b8bd9dcf", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94623b20-8a86-4bce-9397-0d026113300c", "node_type": "1", "metadata": {}, "hash": "b878175bad1bcfbde0d0a3ebee96585ba7dd049d7c41d6877c5bb3b41930c037", "class_name": "RelatedNodeInfo"}}, "text": "ABOUT US\r\n\r\nOur Story\r\nBali Surfer\u2019s Perfume was born from the spirit of the ocean and the culture of the surf. Inspired by crashing waves and golden sunsets, we capture \u201cwhere the ocean\u2019s soul becomes your scent\u201d.\r\n\r\nOur Mission\r\nTo empower you to carry the freedom and untamed energy of the ocean - whether you\u2019re chasing waves at dawn or navigating city streets at dusk.\r\n\r\nOur Values\r\nVegan & Cruelty-Free: We never test on animals and use 100% plant-based formulations.\r\nArtisanal Craftsmanship: Small-batch distillation and hand-filled bottles ensure quality and character in every release.\r\nOcean Inspiration: Each scent is handcrafted to evoke the raw power of Bali\u2019s waves and golden horizons.\r\n\r\nOUR PRODUCTS\r\nWe have a total of 17 products. Our best seller are Blue Point For Him, Blue Point For Her, The Ubud No.3\r\n\r\n1. Product Name: Bali Surfer\u2019s Perfume - Blue Point For Him\r\n   Sold: 10,000+\r\n   Rating: 4.9 (5,637 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Certification: BPOM Certified\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Citrus, Fruity, Oceanic, Flowery, Warm Spicy, Marine, Musky, Woody\r\n   Description: A fresh blend of citrus and fruity notes intertwined with a calming oceanic aroma, accented by spicy, musky, and woody masculine undertones, inspired by the free spirit of Bali\u2019s surfers.\r\n   Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: For Him\r\n   Suggested Occasion: Fresh, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/04/bsp-blue-point.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-blue-point?extParam=whid%3D11612063%26src%3Dshop&aff_unique_id=&channel=others&chain_key=\r\n\r\n2. Product Name: Bali Surfer\u2019s Perfume - Blue Point For Her\r\n   Sold: 2,000+\r\n   Rating: 4.9 (1,207 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Certification: BPOM Certified\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Citrus, Bergamot, Rose, Jasmine, Musk, Amber\r\n   Description: A captivating fusion of bright citrus and bergamot harmonized with elegant rose and jasmine, finished with warm musk and amber, reflecting the natural grace of Bali\u2019s coastline. Playful and enticing, this dreamy women\u2019s scent is sweet without being cloying, making it ideal for everyday wear.\r\n   Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: For Her\r\n   Suggested Occasion: Daytime, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/Product-Image-1.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-for-her?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94623b20-8a86-4bce-9397-0d026113300c": {"__data__": {"id_": "94623b20-8a86-4bce-9397-0d026113300c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "814b3ab5-f347-4632-ac08-2078b8bd9dcf", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "dbf08d374f4f84eb6cd1b37fc4c60e3167d363c8192eb1aec0c000af78f0903b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a44380e3-4f7a-4715-ad8a-ee1d5a85a018", "node_type": "1", "metadata": {}, "hash": "764764dd166ad05c3b099b5157d3ae42f109631619705ef52fdb71c6a8800f5c", "class_name": "RelatedNodeInfo"}}, "text": "Product Name: Bali Surfer\u2019s Perfume - The Ubud No.3\r\n   Sold: 250+\r\n   Rating: 4.9 (155 ratings)\r\n   Price: Rp250,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Pineapple, Saffron\r\n   Description: Sweet, fresh pineapple meets exotic saffron to create a charming, uplifting, and warm fragrance, evoking the serene and inspiring essence of Ubud. This unique unisex scent can be worn during the day or evening and is a must-have for pineapple fans.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: Unisex\r\n   Suggested Occasion: Daytime, Fresh, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/Product-Image-2.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-the-ubud-3?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n4. Product Name: Bali Surfer\u2019s Perfume - Papan Selancar For Him\r\n   Sold: 1,000+\r\n   Rating: 5.0 (588 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Hazelnut, Vanilla, Honey, Nutty, Bergamot, Patchouli\r\n   Description: Rich hazelnut and vanilla blended with sweet honey, lifted by fresh bergamot and deep patchouli, crafting a captivating, character-filled masculine scent inspired by Bali\u2019s surfing adventures.\r\n   Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: For Him\r\n   Suggested Occasion: Fresh\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/Papan-selancar-for-him-100ml-variasi.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-papan-selancar?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n5. Product Name: Bali Surfer\u2019s Perfume - Papan Selancar For Her\r\n   Sold: 100+\r\n   Rating: 4.9 (52 ratings)\r\n   Price: Rp110,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Strawberry Candy, Soursop, Watermelon\r\n   Description: Smells delicious, soapy and fruity, like a very sweet and newly pressed watermelon. They are pleasant and wearable in warm weather, if youthful. Uplifting and challenging.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: For Her\r\n   Suggested Occasion: Fresh\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-1.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-papan-selancar-for-her-37-ml?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n6.", "mimetype": "text/plain", "start_char_idx": 3274, "end_char_idx": 6387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a44380e3-4f7a-4715-ad8a-ee1d5a85a018": {"__data__": {"id_": "a44380e3-4f7a-4715-ad8a-ee1d5a85a018", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94623b20-8a86-4bce-9397-0d026113300c", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "089c44e3859213f663b9ae61b8774407cb6036f33b2b3c9225695ebe6a1a3158", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5", "node_type": "1", "metadata": {}, "hash": "691921441fbfa8601e3cd74c1a602356070a66e1feece2202b3b66032dfcfe8f", "class_name": "RelatedNodeInfo"}}, "text": "Product Name: Bali Surfer\u2019s Perfume - Kuta 7 PM\r\n   Sold: 500+\r\n   Rating: 5.0 (317 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Certification: BPOM Certified\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Lychee, Citrus, Bamboo, Tea, Musk, Amber\r\n   Description: Luscious lychee paired with zesty citrus and soft bamboo and tea accords, rounded off with warm musk and amber, capturing the exotic beauty of Kuta\u2019s sunset.\r\n   Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: Unisex\r\n   Suggested Occasion: Evening, Fresh, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-2.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-kuta-7-pm?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n7. Product Name: Bali Surfer\u2019s Perfume - Kuta 7 AM\r\n   Sold: 250+\r\n   Rating: 4.9 (228 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Certification: BPOM Certified\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Lychee, Citrus, Jasmine, Floral, Musk, Woody\r\n   Description: Crisp citrus and lychee meld with delicate jasmine blossoms, enriched by warm musk and woody notes, invoking the invigorating spirit of a Kuta morning.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: Unisex\r\n   Suggested Occasion: Morning, Daytime, Fresh\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/04/gambar1-1536x1352.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-kuta-7-am?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n8. Product Name: Bali Surfer\u2019s Perfume - Bali Cliff 1\r\n   Sold: 500+\r\n   Rating: 4.9 (331 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Pink Pepper, Bergamot, Apple, Cardamom, Oakmoss, Cinnamon, Lavender, Chestnut, Vanilla, Cedarwood\r\n   Description: Bright bergamot and apple spiced with pink pepper and cardamom, mellowed by oakmoss, cinnamon, and lavender, and anchored by sweet vanilla and warm cedarwood, an elegant, slightly spicy masculine scent perfect for indoor use or relaxing at night.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: For Him\r\n   Suggested Occasion: Evening, Fresh, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-4.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-bali-cliff-1?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n9.", "mimetype": "text/plain", "start_char_idx": 6388, "end_char_idx": 9539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5": {"__data__": {"id_": "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a44380e3-4f7a-4715-ad8a-ee1d5a85a018", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "3bb7d285713d89ed3331cb45cc98da3e7fa299ed2460c2de948fae8f8e167d16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0495298b-2aa8-45c2-9657-5a108f867e59", "node_type": "1", "metadata": {}, "hash": "1082ca87fb786e7323750172f59004040766d566f8ac39344c34d97efe2b401b", "class_name": "RelatedNodeInfo"}}, "text": "Product Name: Bali Surfer\u2019s Perfume - Bali Cliff 2\r\n   Sold: 250+\r\n   Rating: 5.0 (129 ratings)\r\n   Price: Rp225,000\r\n   Condition: New\r\n   Minimum Order: 1 unit\r\n   Showcase: All showcases\r\n   Made in: Indonesia\r\n   Volume: 100 ml Eau de Parfum\r\n   Scent Profile: Citrus, Lavender, Almond, Floral, Sarsaparilla, Vanilla, Amber, Woody\r\n   Description: Refreshing citrus melds with gentle lavender and almond, enriched by elegant florals, sweet vanilla, and warm amber and woody undertones, perfect for daytime activities, sports, or indoor evening wear.\r\n   Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n   Target: Unisex\r\n   Suggested Occasion: Daytime, Evening, Fresh, Warm\r\n   Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-5.png\r\n   Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-bali-cliff-2?extParam=whid%3D11612063%26src%3Dshop&aff_unique_id=&channel=others&chain_key=\r\n\r\n10. Product Name: Bali Surfer\u2019s Perfume - Dreamland\r\n    Sold: 100+\r\n    Rating: 4.9 (58 ratings)\r\n    Price: Rp225,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Made in: Indonesia\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Nutmeg, Lavender, Patchouli\r\n    Description: Warm nutmeg fused with soft lavender and rich patchouli to create a soothing and enchanting scent, designed for the honorable man who turns up on time and always accomplishes what he sets out to. Suitable for men aged 25 and above.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: For Him\r\n    Suggested Occasion: Evening, Special Occasion, Warm\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-6.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-dreamland?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n11. Product Name: Bali Surfer\u2019s Perfume - Dreamland For Her\r\n    Sold: 50+\r\n    Rating: 4.8 (25 ratings)\r\n    Price: Rp225,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Made in: Indonesia\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Biscuit Butter, Vanilla\r\n    Description: A soft biscuit butter accord melts into a creamy vanilla heart, creating a velvety sweetness with a light biscuity aroma reminiscent of freshly baked cookies, an indulgent yet soft fragrance perfect for cooler weather or snug moments.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: For Her\r\n    Suggested Occasion: Daytime, Cozy, Warm\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-7.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-dreamland-for-her-100-ml?extParam=whid%3D11612063%26src%3Dshop&aff_unique_id=&channel=others&chain_key=\r\n\r\n12.", "mimetype": "text/plain", "start_char_idx": 9540, "end_char_idx": 12593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0495298b-2aa8-45c2-9657-5a108f867e59": {"__data__": {"id_": "0495298b-2aa8-45c2-9657-5a108f867e59", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "9ed3db10cd61063a4d130adbe8400a6c6da1d72c7f98213c583b51a59553516f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e0d2e9e-4d19-479d-895b-cf4f611d2f86", "node_type": "1", "metadata": {}, "hash": "c7a9fe40de819d317b84555b00ad3763e6e4a8ec59a43cee579ef2651318acb9", "class_name": "RelatedNodeInfo"}}, "text": "Product Name: Bali Surfer\u2019s Perfume - The Ubud\r\n    Sold: 250+\r\n    Rating: 4.9 (207 ratings)\r\n    Price: Rp250,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Peach, Musk, Rose, Patchouli\r\n    Description: Combining Eastern and Western aromas, the lasting base of seductive peach and rose brings back nostalgic romantic memories. This fragrance has outstanding longevity - up to 8 hours on clothing - and is suitable for both daytime and nighttime wear.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: Unisex\r\n    Suggested Occasion: Daytime, Evening, Romantic, Versatile\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-8.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-the-ubud-100-ml?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n13. Product Name: Bali Surfer\u2019s Perfume - Balangan and Me\r\n    Sold: 100+\r\n    Rating: 4.9 (99 ratings)\r\n    Price: Rp225,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Grapefruit, Cedar, Tonka Bean\r\n    Description: A perfect balance of citrus and aromatic notes, rich, natural, and calming, suitable for both men and women.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: Unisex\r\n    Suggested Occasion: Fresh, Versatile, Relaxing\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-9.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-balangan-and-me?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n14. Product Name: Bali Surfer\u2019s Perfume - Jeruk Kintamani For Her\r\n    Sold: 100+\r\n    Rating: 4.9 (87 ratings)\r\n    Price: Rp299,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Orange, Bergamot, Grapefruit, Musk\r\n    Description: A lovely feminine citrus fragrance that works well as both a daytime/work scent and for a night out or special occasion.\r\n    Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: For Her\r\n    Suggested Occasion: Daytime, Evening, Fresh\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-10.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-jeruk-kintamani-100-ml?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n15. Product Name: Bali Surfer\u2019s Perfume - Surfing Club\r\n    Sold: 100+\r\n    Rating: 4.9 (95 ratings)\r\n    Price: Rp199,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Sweet Orange, Woody\r\n    Description: One of the most authentic realistic orange openings, bright, refreshing, fun, and intriguing. Perfect for anyone who wants to smell like fresh oranges.", "mimetype": "text/plain", "start_char_idx": 12594, "end_char_idx": 15993, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e0d2e9e-4d19-479d-895b-cf4f611d2f86": {"__data__": {"id_": "2e0d2e9e-4d19-479d-895b-cf4f611d2f86", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0495298b-2aa8-45c2-9657-5a108f867e59", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "b61850c5a3ba4db4877f394ede5511dc7f3f1c812d7f9f361f17add1e159f575", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6480bca9-61ff-4788-a112-db65ab317b68", "node_type": "1", "metadata": {}, "hash": "392f5e5d47b979afe10e3657261f46ea17fdd6fe7581b494e69f621b745ff0f1", "class_name": "RelatedNodeInfo"}}, "text": "Perfect for anyone who wants to smell like fresh oranges.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: Unisex\r\n    Suggested Occasion: Daytime, Fresh\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-11.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-surfing-club?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n16. Product Name: Bali Surfer\u2019s Perfume - Double Six\r\n    Sold: 500+\r\n    Rating: 4.9 (329 ratings)\r\n    Price: Rp225,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Citrus, Aromatic, Fresh Spicy, Aquatic\r\n    Description: Crisp citrus combined with aquatic freshness and a spicy kick, perfect for hot weather and daily activities. Not too piercing; delivers a citrus vibe similar to Blue Point.\r\n    Warranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: Unisex\r\n    Suggested Occasion: Daytime, Fresh, Spicy\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-12.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-double-six?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\n17. Product Name: Bali Surfer\u2019s Perfume - Festival Layangan\r\n    Sold: 250+\r\n    Rating: 5.0 (222 ratings)\r\n    Price: Rp250,000\r\n    Condition: New\r\n    Minimum Order: 1 unit\r\n    Showcase: All showcases\r\n    Volume: 100 ml Eau de Parfum\r\n    Scent Profile: Lemon, Green, Vanilla, Patchouli\r\n    Occasion: Day and Night\r\n    Description: A versatile fragrance that balances freshness and depth, smooth, warm, inviting, and mature, celebrating Bali\u2019s colorful Kite Festival.\r\n    Shipping from Bandung: Rp9,000; Economy (estimated arrival May 11-15); Other option: Instant delivery in 3 hours.\r\n    Target: Unisex\r\n    Suggested Occasion: Daytime, Evening, Fresh, Versatile, Warm\r\n    Image URL: https://balisurfer.com/wp-content/uploads/2025/05/the-ubud-1-13.png\r\n    Tokopedia URL: https://www.tokopedia.com/balisurfersperfume/bali-surfers-perfume-varian-festival-layangan?extParam=src%3Dshop%26whid%3D11612063&aff_unique_id=&channel=others&chain_key=\r\n\r\nPAYMENT GUIDE\r\n\r\nTOKOPEDIA\r\n\r\n1. Open the Tokopedia app or visit Tokopedia.com\r\n2. Search for and select \u201cBali Surfer\u2019s Perfume\u201d\r\n3. Add to Cart or click \u201cBuy Now\u201d\r\n4. Log in or register your Tokopedia account\r\n5. On the Checkout page:\r\n\r\n   * Review your order details, quantity, and shipping address\r\n   * Select a payment method:\r\n\r\n     * GoPay\r\n     * Bank Transfer (BCA, BNI, Mandiri, BRI)\r\n     * Credit/Debit Card (Visa, MasterCard)\r\n     * ShopeePay (if available)\r\n6. Follow the on-screen instructions to complete payment\r\n7. Save your payment proof or take a screenshot\r\n8. Return to your order page on Tokopedia and upload proof of payment (if prompted)\r\n9. Wait for confirmation and a tracking number from the seller\r\n\r\nSHOPEE\r\n\r\n1. Open the Shopee app or visit Shopee.co.id\r\n2. Search for the \u201cBali Surfer\u2019s Perfume\u201d shop\r\n3. Select your desired product and click \u201cBuy Now\u201d\r\n4.", "mimetype": "text/plain", "start_char_idx": 15936, "end_char_idx": 19384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6480bca9-61ff-4788-a112-db65ab317b68": {"__data__": {"id_": "6480bca9-61ff-4788-a112-db65ab317b68", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b4dd3d3-0d22-45be-a873-f4e7ee912b7c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "136934577fd2fec526eedcc22c2f26628335885a35e202e09f26c6c5482778e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e0d2e9e-4d19-479d-895b-cf4f611d2f86", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "e2ecdd234cc58c05393b4d3730382f665c893c24d826435d5ecb10f5d794e8d2", "class_name": "RelatedNodeInfo"}}, "text": "Select your desired product and click \u201cBuy Now\u201d\r\n4. Log in or register your Shopee account\r\n5. On the Checkout page:\r\n\r\n   * Confirm your shipping address\r\n   * Choose a payment method:\r\n\r\n     * ShopeePay\r\n     * Bank Transfer (BCA, BNI, Mandiri, BRI)\r\n     * Virtual Account (BNI VA, BCA VA, ShopeePay Later)\r\n     * Credit/Debit Card (Visa, MasterCard)\r\n     * Credit Card Installments (if available)\r\n6. Follow the instructions to finalize payment\r\n7. Save your payment proof or take a screenshot\r\n8. If required, upload proof of payment on the order page\r\n9. Wait for payment confirmation and a tracking number from the seller\r\n\r\nOTHER\r\n\u2022 For payment inquiries or assistance, contact Customer Care:\r\n\u2022 Address: Jl. A.H. Nasution 103, Bandung, Jawa Barat, Indonesia\r\n\r\n* WhatsApp: 0898-2323-0000\r\n* Email: [email@balisurfer.com](mailto:email@balisurfer.com)\r\n  \u2022 Payment confirmation time: 1-2 business hours\r\n  \u2022 Check your marketplace notifications after payment\r\n  \u2022 Shipment time 1-2 business days\r\n  \u2022 Only ship to Indonesia", "mimetype": "text/plain", "start_char_idx": 19333, "end_char_idx": 20366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e18f5d78-bc98-4123-8a51-886695414922": {"__data__": {"id_": "e18f5d78-bc98-4123-8a51-886695414922", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 288, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d17a20b-2160-4cbd-9e34-6538482e5840", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 288, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}, "hash": "e743d624079694be3d0d07ff10977d97ab282719894af375a11914e64efd0f64", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/api/__init__.py\n\nfrom .routes import chat_api_blueprint\n\n# __all__ mendefinisikan apa yang diimpor ketika 'from backend.api import *' digunakan,\n# meskipun kita akan menggunakan impor eksplisit 'from backend.api import chat_api_blueprint'.\n__all__ = ['chat_api_blueprint']", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b27fadec-6a82-455e-92bc-50aade1c21cc": {"__data__": {"id_": "b27fadec-6a82-455e-92bc-50aade1c21cc", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e17ca871-0ee6-4523-b902-8183da6ccff2", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}, "hash": "2c7c2c80341bab3c2d108a5a9638e0c634035c7e04a7724bdc55793f12894b15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b35f758-ec20-4c16-967c-e4a1aa78634c", "node_type": "1", "metadata": {}, "hash": "fe73a0d13cd74505fdc1240a45371f1028ee9c2b4fca34559c9ee60ac28a7fa6", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/api/routes.py\n\nimport logging\nfrom flask import Blueprint, request, jsonify\nfrom http import HTTPStatus\nimport sys\nimport os\n\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.core.chatbot import generate_chatbot_response\nexcept ImportError as e:\n    print(f\"CRITICAL: Error importing 'generate_chatbot_response' in routes.py: {e}\")\n    print(\"Ensure 'backend.core.chatbot' is accessible. Using placeholder.\")\n    # Placeholder disesuaikan untuk menerima session_state\n    def generate_chatbot_response(\n        user_query_or_payload: str, \n        conversation_history=None, \n        input_type: str = \"text\",\n        session_state: dict | None = None # Ditambahkan session_state\n    ) -> dict:\n        logging.error(\"Using placeholder for generate_chatbot_response due to import error.\")\n        return {\n            \"reply\": f\"Error: Chatbot core logic not loaded. Input: {input_type}='{user_query_or_payload}', State: {session_state}\",\n            \"quick_replies\": []\n        }\n\nlogger = logging.getLogger(__name__)\n\nchat_api_blueprint = Blueprint('chat_api', __name__, url_prefix='/api')\n\n@chat_api_blueprint.route('/chat', methods=['POST'])\ndef handle_chat_request():\n    client_ip = request.remote_addr\n    logger.info(f\"Received POST request to /api/chat from {client_ip}\")\n\n    if not request.is_json:\n        logger.warning(f\"Request from {client_ip} is not JSON. Body: {request.data[:200]}\")\n        return jsonify({\"error\": \"Request content type must be application/json\"}), HTTPStatus.BAD_REQUEST\n\n    try:\n        data = request.get_json()\n        if data is None:\n            logger.warning(f\"Received empty or unparseable JSON body from {client_ip}.\")\n            return jsonify({\"error\": \"Request body cannot be empty or malformed JSON\"}), HTTPStatus.BAD_REQUEST\n    except Exception as e:\n        logger.error(f\"Failed to parse JSON body from {client_ip}: {e}\", exc_info=True)\n        return jsonify({\"error\": \"Invalid JSON body\"}), HTTPStatus.BAD_REQUEST\n\n    payload_input = data.get('payload')\n    message_input = data.get('message')\n    \n    # BARU: Ambil quiz_session_data dari request\n    quiz_session_input = data.get('quiz_session_data') \n    if quiz_session_input is not None and not isinstance(quiz_session_input, dict):\n        logger.warning(f\"Invalid 'quiz_session_data' parameter from {client_ip}. Must be a dictionary. Received: {quiz_session_input}\")\n        return jsonify({\"error\": \"Parameter 'quiz_session_data' must be a dictionary if provided\"}), HTTPStatus.BAD_REQUEST", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b35f758-ec20-4c16-967c-e4a1aa78634c": {"__data__": {"id_": "1b35f758-ec20-4c16-967c-e4a1aa78634c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e17ca871-0ee6-4523-b902-8183da6ccff2", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}, "hash": "2c7c2c80341bab3c2d108a5a9638e0c634035c7e04a7724bdc55793f12894b15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b27fadec-6a82-455e-92bc-50aade1c21cc", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}, "hash": "633c537f73ba1d0807d652b3a03b7be6ede4de8bd55e43f746a25b022319753a", "class_name": "RelatedNodeInfo"}}, "text": "input_type_to_pass: str = \"\"\n    input_value_to_pass: str = \"\"\n    # conversation_history_to_pass akan diambil dari data.get('conversation_history') jika diimplementasikan\n    # Untuk sekarang, kita fokus pada quiz_session_input\n\n    if payload_input is not None:\n        if isinstance(payload_input, str) and payload_input.strip():\n            input_type_to_pass = \"payload\"\n            input_value_to_pass = payload_input.strip()\n            logger.info(f\"Processing payload input from {client_ip}: \\\"{input_value_to_pass}\\\"\")\n        else:\n            logger.warning(f\"Invalid 'payload' parameter from {client_ip}. Received data: {data}\")\n            return jsonify({\"error\": \"Parameter 'payload' must be a non-empty string if provided\"}), HTTPStatus.BAD_REQUEST\n    elif message_input is not None:\n        if isinstance(message_input, str) and message_input.strip():\n            input_type_to_pass = \"text\"\n            input_value_to_pass = message_input.strip()\n            log_user_message = input_value_to_pass[:100] + \"...\" if len(input_value_to_pass) > 100 else input_value_to_pass\n            logger.info(f\"Processing user query (text input) from {client_ip}: \\\"{log_user_message}\\\"\")\n        else:\n            logger.warning(f\"Invalid or missing 'message' parameter from {client_ip} (and no payload). Received data: {data}\")\n            return jsonify({\"error\": \"Parameter 'message' is missing, empty, or not a string (and no payload provided)\"}), HTTPStatus.BAD_REQUEST\n    else:\n        logger.warning(f\"Request from {client_ip} missing both 'message' and 'payload'. Received data: {data}\")\n        return jsonify({\"error\": \"Request must contain either a 'message' (text) or a 'payload' (button action)\"}), HTTPStatus.BAD_REQUEST\n\n    try:\n        chatbot_response_data = generate_chatbot_response(\n            user_query_or_payload=input_value_to_pass,\n            # conversation_history=conversation_history_to_pass, # Akan diaktifkan nanti\n            input_type=input_type_to_pass,\n            session_state=quiz_session_input # Meneruskan state quiz yang diterima\n        )\n\n        if chatbot_response_data is None or \"reply\" not in chatbot_response_data:\n            logger.error(f\"generate_chatbot_response returned invalid data. Input type: {input_type_to_pass}, Value: \\\"{input_value_to_pass}\\\"\")\n            return jsonify({\"error\": \"Chatbot failed to generate a valid response structure\"}), HTTPStatus.INTERNAL_SERVER_ERROR\n\n        reply_text_for_log = chatbot_response_data.get(\"reply\", \"\")\n        if not isinstance(reply_text_for_log, str):\n            logger.error(f\"Chatbot response 'reply' field is not a string. Input type: {input_type_to_pass}, Value: \\\"{input_value_to_pass}\\\"\")\n            reply_text_for_log = \"[Non-string reply]\"\n\n        log_chatbot_reply = reply_text_for_log[:100].replace(os.linesep, ' ') + \"...\" if len(reply_text_for_log) > 100 else reply_text_for_log.replace(os.linesep, ' ')\n        logger.info(f\"Sending chatbot reply data to {client_ip} (reply preview: \\\"{log_chatbot_reply}\\\")\")\n        \n        return jsonify(chatbot_response_data), HTTPStatus.OK\n\n    except Exception as e:\n        logger.error(f\"An unexpected error occurred. Input type: {input_type_to_pass}, Value: \\\"{input_value_to_pass}\\\", State: {quiz_session_input}: {e}\", exc_info=True)\n        return jsonify({\"error\": \"An internal server error occurred. Please try again later.\"}), HTTPStatus.INTERNAL_SERVER_ERROR", "mimetype": "text/plain", "start_char_idx": 2678, "end_char_idx": 6120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c166e31-d18e-49bb-8699-6bb507e5b517": {"__data__": {"id_": "3c166e31-d18e-49bb-8699-6bb507e5b517", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/server.py", "file_name": "server.py", "file_type": "text/x-python", "file_size": 3015, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f30d43af-128a-4fd3-98c2-ea1ceada23c5", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/server.py", "file_name": "server.py", "file_type": "text/x-python", "file_size": 3015, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}, "hash": "bc165124946c21351cfedf044d3eda75bd28279388f0d47bb0db9e7a8894eeaa", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging \n\nfrom flask import Flask, request # Pastikan 'request' diimpor untuk rute '/'\nfrom flask_cors import CORS \n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.api import chat_api_blueprint # Mengimpor blueprint dari package api\n    from backend.core.chatbot import initialize_chatbot_dependencies \n    from backend.utils.logging_config import setup_logging \nexcept ImportError as e:\n    print(f\"CRITICAL: Error importing modules in server.py: {e}\")\n    print(\"Ensure the script is run from the project root directory ('bali_surfer_chatbot/')\")\n    print(\"and that all backend modules (api/__init__.py, api/routes.py, chatbot.py, logging_config.py) are correctly placed and error-free.\")\n    sys.exit(1)\n\n\ndef create_app():\n    \"\"\"\n    Application factory function to create and configure the Flask app.\n    \"\"\"\n    setup_logging(level=logging.INFO) \n    \n    server_init_logger = logging.getLogger(__name__)\n\n    server_init_logger.info(\"Creating Flask application instance...\")\n    app = Flask(__name__) \n\n    CORS(app) \n    server_init_logger.info(\"CORS enabled for all origins.\")\n\n    try:\n        with app.app_context():\n            server_init_logger.info(\"Initializing chatbot dependencies (e.g., loading vector store)...\")\n            initialize_chatbot_dependencies() \n            server_init_logger.info(\"Chatbot dependencies initialized successfully.\")\n    except Exception as e:\n        server_init_logger.critical(f\"Failed to initialize chatbot dependencies: {e}\", exc_info=True)\n        # Pertimbangkan untuk tidak melanjutkan jika dependensi penting gagal dimuat\n        # sys.exit(\"Application startup failed due to dependency initialization error.\")\n\n    app.register_blueprint(chat_api_blueprint)\n    server_init_logger.info(f\"Blueprint '{chat_api_blueprint.name}' registered with prefix '{chat_api_blueprint.url_prefix}'.\")\n\n    @app.route('/')\n    def index():\n        app.logger.info(f\"Root endpoint '/' was hit by {request.remote_addr}\") \n        return \"Bali Surfer Chatbot API is up and running!\"\n\n    server_init_logger.info(\"Flask application created and configured successfully.\")\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    main_logger = app.logger # Menggunakan logger aplikasi yang sudah dikonfigurasi\n\n    try:\n        port = int(os.environ.get(\"FLASK_PORT\", 5000))\n    except ValueError:\n        main_logger.warning(\"Invalid FLASK_PORT environment variable. Defaulting to 5000.\")\n        port = 5000\n\n    main_logger.info(f\"Starting Flask development server on http://0.0.0.0:{port}/\")\n    main_logger.info(\"Debug mode is ON. Do NOT use debug mode in a production environment.\")\n    try:\n        app.run(host='0.0.0.0', port=port, debug=True)\n    except Exception as e:\n        main_logger.critical(f\"Failed to start Flask server: {e}\", exc_info=True)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3015, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e867a5c-8bce-4ae2-b970-ce3241a29166": {"__data__": {"id_": "5e867a5c-8bce-4ae2-b970-ce3241a29166", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dcf91579-ae9d-4814-9d0e-b56be5e6f1df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "9d10019790692397ec09c338cc1a70e317da37c98de70df7c158b5fa193397a6", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5de63d04-dfde-4f75-942f-0c9ba8ce62dc": {"__data__": {"id_": "5de63d04-dfde-4f75-942f-0c9ba8ce62dc", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "428c8d61-390f-4d1a-b656-2f87c81d641b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "76ae26cac350ea1f42328e292ed961934eb28bb78ebc46e8b789a76d161078ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa563a32-8e54-40d8-8c6c-b713ef61a6b7", "node_type": "1", "metadata": {}, "hash": "811329cda15970dc16b660a4b6cfb223a56ea94f5547443dffa3f2c3437a28ca", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/core/action_handler.py\n\nimport logging\nimport random\nimport re \nfrom typing import Dict, Any, Optional, List\n\n# Impor yang diperlukan dari modul lain\nfrom backend.core.retrieval import retrieve_relevant_chunks\nfrom backend.core.prompting import create_llm_prompt, HANDOFF_MESSAGE_TEMPLATE, GREETING_RESPONSES \nfrom backend.core.llm_interaction import get_llm_chat_response\n# PERUBAHAN DI SINI: Hanya impor TOKOPEDIA_STORE_URL\nfrom backend.utils.config import TOP_K_CHUNKS, TOKOPEDIA_STORE_URL \nfrom backend.vector_store.faiss_store import vector_store_instance \n\nlogger = logging.getLogger(__name__)\n\ndef handle_action_about_us(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling 'action_about_us' payload.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    about_us_conceptual_query = \"Tell me about Bali Surfer's Perfume: its story, its mission, and its core values.\"\n    num_chunks_for_about = max(TOP_K_CHUNKS, 4) \n    retrieved_chunks = retrieve_relevant_chunks(about_us_conceptual_query, k=num_chunks_for_about) \n    if not retrieved_chunks:\n        logger.warning(\"No relevant chunks found for 'About Us' information.\")\n        response_data[\"reply\"] = \"Bali Surfer's Perfume is inspired by the spirit of the ocean and the culture of the surf. We focus on vegan, cruelty-free, and artisanal products. You can find more details on our website!\"\n    else:\n        logger.info(f\"Retrieved {len(retrieved_chunks)} chunks for 'About Us'.\")\n        prompt_user_query_for_llm = (\n            \"Based on the provided context about Bali Surfer's Perfume, please provide an engaging summary covering these three aspects:\\n\"\n            \"1. Our Story: Briefly explain the inspiration and origin.\\n\"\n            \"2. Our Mission: What is the brand's main goal for its customers?\\n\"\n            \"3. Our Values: List the core values (e.g., Vegan & Cruelty-Free, Artisanal Craftsmanship, Ocean Inspiration). Try to present the values as a list or bullet points if natural.\\n\"\n            \"Maintain a friendly, warm, and surf-inspired tone throughout the summary.\"\n        )\n        prompt_messages = create_llm_prompt(\n            user_query=prompt_user_query_for_llm, \n            retrieved_chunks=retrieved_chunks,\n            intent_type=\"brand_inquiry\",\n            conversation_history=conversation_history\n        )\n        llm_summary = get_llm_chat_response(prompt_messages)\n        if llm_summary: response_data[\"reply\"] = llm_summary.strip()\n        else:\n            logger.warning(\"LLM failed to generate summary for 'About Us'.\")\n            response_data[\"reply\"] = \"Bali Surfer's Perfume is all about capturing the ocean's soul in a scent! We're inspired by surf culture, and committed to vegan, artisanal products. Explore our scents to feel the Bali vibe!\"\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\ud83d\udecd\ufe0f Explore Perfumes\", \"payload\": \"action_explore_perfumes\"}, \n        {\"label\": \"\ud83c\udf81 Find My Scent\", \"payload\": \"action_start_recommendation_quiz\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_action_explore_perfumes(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling 'action_explore_perfumes' payload.\")\n    response_data: Dict[str, Any] = {\n        \"reply\": \"You'd like to explore our perfumes! The best way is to let me help you find a scent with a few quick questions.\",\n        \"quick_replies\": [\n            {\"label\": \"\ud83c\udf81 Yes, Find My Scent!\", \"payload\": \"action_start_recommendation_quiz\"},\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n        ]\n    }\n    return response_data\n\ndef handle_action_main_menu() -> Dict[str, Any]:\n    logger.info(\"Handling 'action_main_menu' payload or redirecting to main menu.\")", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa563a32-8e54-40d8-8c6c-b713ef61a6b7": {"__data__": {"id_": "fa563a32-8e54-40d8-8c6c-b713ef61a6b7", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "428c8d61-390f-4d1a-b656-2f87c81d641b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "76ae26cac350ea1f42328e292ed961934eb28bb78ebc46e8b789a76d161078ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5de63d04-dfde-4f75-942f-0c9ba8ce62dc", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "ab3ca5db08ba146b3ba68a520678270318ed83b20fc05829437d3f3071085cb8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ce3c4156-ca7b-4869-8dfa-dd51d6fba718", "node_type": "1", "metadata": {}, "hash": "f3bdefec08d60f92d8daf6744277d6afc9c03a3863b326ff97038f26826937a9", "class_name": "RelatedNodeInfo"}}, "text": "response_data: Dict[str, Any] = {\n        \"reply\": random.choice(GREETING_RESPONSES),\n        \"quick_replies\": [\n            {\"label\": \"\ud83c\udf34 About Bali Surfer\", \"payload\": \"action_about_us\"},\n            {\"label\": \"\ud83d\udecd\ufe0f Explore Perfumes\", \"payload\": \"action_explore_perfumes\"}, \n            {\"label\": \"\u2753 Shipping & Payment Info\", \"payload\": \"action_faq_main\"},\n            {\"label\": \"\ud83c\udf81 Find My Scent\", \"payload\": \"action_start_recommendation_quiz\"}\n        ]\n    }\n    return response_data\n\ndef get_handoff_response() -> Dict[str, Any]:\n    logger.info(\"Providing handoff response.\")\n    response_data: Dict[str, Any] = {\n        \"reply\": HANDOFF_MESSAGE_TEMPLATE,\n        \"quick_replies\": [\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"},\n            {\"label\": \"\ud83d\udcde Contact Support\", \"payload\": \"action_contact_us\"} \n        ]\n    }\n    return response_data\n\ndef handle_action_view_product(product_identifier_from_payload: str, \n                               conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(f\"Handling 'action_view_product' for identifier: {product_identifier_from_payload}\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    found_product_chunk = None\n    product_name_for_display = \"Selected Perfume\" \n    if vector_store_instance.chunk_map:\n        all_product_chunks = [chunk for chunk in vector_store_instance.chunk_map if chunk.get('metadata', {}).get('type') == 'product']\n        for product_chunk in all_product_chunks:\n            metadata = product_chunk.get('metadata', {})\n            name_from_meta = metadata.get('product_name', '')\n            current_product_identifier = re.sub(r'[^a-z0-9_]+', '', name_from_meta.lower().replace(' ', '_'))\n            if current_product_identifier == product_identifier_from_payload:\n                found_product_chunk = product_chunk\n                product_name_for_display = name_from_meta\n                logger.info(f\"Found product match: {name_from_meta}\")\n                break\n    else:\n        logger.error(\"Chunk map not available in vector_store_instance for handle_action_view_product.\")\n        response_data[\"reply\"] = \"I'm having trouble accessing product details at the moment. Please try again later.\"\n        response_data[\"quick_replies\"] = [{\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}]\n        return response_data\n    if not found_product_chunk:\n        logger.warning(f\"Product with identifier '{product_identifier_from_payload}' not found in chunk_map.\")\n        response_data[\"reply\"] = f\"Sorry, I couldn't find the details for that specific perfume. It might be a new addition or there was a slight mix-up.\"\n        response_data[\"quick_replies\"] = [\n            {\"label\": \"\ud83c\udf81 Find Another Scent (Quiz)\", \"payload\": \"action_start_recommendation_quiz\"},\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n        ]\n        return response_data\n    product_context_chunks = [found_product_chunk] \n    prompt_user_query_for_llm = (\n        f\"Please provide a detailed and engaging description for the perfume: '{product_name_for_display}'. \"\n        f\"Based on the provided CONTEXT (which is the full product information for this specific perfume), \"\n        f\"highlight its key characteristics, full scent profile, volume, price, and any unique selling points or the inspiration behind it. \"\n        f\"Also mention warranty and shipping if available in the context. \"\n        f\"Maintain a friendly, enthusiastic, and surf-inspired tone.\"\n    )\n    prompt_messages = create_llm_prompt(\n        user_query=prompt_user_query_for_llm,\n        retrieved_chunks=product_context_chunks, \n        intent_type=\"product_information_request\", \n        conversation_history=conversation_history\n    )\n    llm_detailed_description = get_llm_chat_response(prompt_messages)\n    if llm_detailed_description:\n        response_data[\"reply\"] = llm_detailed_description.strip()\n    else:\n        logger.warning(f\"LLM failed to generate detailed description for '{product_name_for_display}'. Using raw text content as fallback.\")\n        raw_description = found_product_chunk.get('text_content', f\"Details for {product_name_for_display} are currently unavailable.\")\n        cleaned_description = re.sub(r\"^\\d+\\.\\s*Product Name:.*?\\n\", \"\", raw_description, flags=re.IGNORECASE | re.DOTALL).strip()\n        response_data[\"reply\"] = cleaned_description if cleaned_description else f\"More details about {product_name_for_display} can be found on our store pages!\"", "mimetype": "text/plain", "start_char_idx": 3880, "end_char_idx": 8430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce3c4156-ca7b-4869-8dfa-dd51d6fba718": {"__data__": {"id_": "ce3c4156-ca7b-4869-8dfa-dd51d6fba718", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "428c8d61-390f-4d1a-b656-2f87c81d641b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "76ae26cac350ea1f42328e292ed961934eb28bb78ebc46e8b789a76d161078ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa563a32-8e54-40d8-8c6c-b713ef61a6b7", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "2e931ed4328a0acfc96afde23df32afdcc0e5adc8f034273814bedf997232904", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "106f052f-bac9-4c1f-9c48-96f396d8a9cd", "node_type": "1", "metadata": {}, "hash": "67d2af6af0c14fa71cff738437a0b664ace55b97a060c115d9cf5fa7a2d8a7e6", "class_name": "RelatedNodeInfo"}}, "text": "response_data[\"quick_replies\"] = [\n        {\"label\": f\"\ud83d\uded2 Buy {product_name_for_display}\", \"payload\": f\"action_buy_product_{product_identifier_from_payload}\"},\n        {\"label\": \"\ud83c\udf81 Find Another Scent\", \"payload\": \"action_start_recommendation_quiz\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_action_buy_product(product_identifier: str) -> Dict[str, Any]:\n    logger.info(f\"Handling 'action_buy_product' for identifier: {product_identifier}\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    product_name_for_display = \"this perfume\" \n    if vector_store_instance.chunk_map:\n        all_product_chunks = [chunk for chunk in vector_store_instance.chunk_map if chunk.get('metadata', {}).get('type') == 'product']\n        for product_chunk in all_product_chunks:\n            metadata = product_chunk.get('metadata', {})\n            name_from_meta = metadata.get('product_name', '')\n            current_product_identifier_check = re.sub(r'[^a-z0-9_]+', '', name_from_meta.lower().replace(' ', '_'))\n            if current_product_identifier_check == product_identifier:\n                product_name_for_display = name_from_meta\n                break\n    response_data[\"reply\"] = f\"Great choice with {product_name_for_display}! You can purchase it securely through our online store on Tokopedia.\" \n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\ud83d\uded2 Go to Tokopedia\", \"payload\": f\"action_goto_tokopedia_{product_identifier}\"},\n        # Shopee dihilangkan untuk saat ini\n        {\"label\": \"\ud83c\udf81 View Other Products\", \"payload\": \"action_start_recommendation_quiz\"}, \n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_action_goto_marketplace(marketplace_name: str, \n                                   product_identifier: str) -> Dict[str, Any]:\n    logger.info(f\"Handling 'action_goto_marketplace' for {marketplace_name}, identifier: {product_identifier}\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": [], \"link_action\": None}\n    product_name_for_display = \"this perfume\"\n    target_url = None\n    specific_product_link_found = False\n\n    if vector_store_instance.chunk_map:\n        all_product_chunks = [chunk for chunk in vector_store_instance.chunk_map if chunk.get('metadata', {}).get('type') == 'product']\n        for product_chunk in all_product_chunks:\n            metadata = product_chunk.get('metadata', {})\n            name_from_meta = metadata.get('product_name', '')\n            current_product_identifier_check = re.sub(r'[^a-z0-9_]+', '', name_from_meta.lower().replace(' ', '_'))\n            if current_product_identifier_check == product_identifier:\n                product_name_for_display = name_from_meta\n                if marketplace_name.lower() == \"tokopedia\":\n                    target_url = metadata.get('tokopedia_url') # Mengambil URL spesifik produk\n                # Logika untuk Shopee bisa ditambahkan di sini jika diaktifkan kembali\n                if target_url:\n                    specific_product_link_found = True\n                break\n    \n    if not specific_product_link_found and marketplace_name.lower() == \"tokopedia\":\n        target_url = TOKOPEDIA_STORE_URL # Fallback ke URL toko umum\n        logger.info(f\"Specific Tokopedia URL for '{product_identifier}' not found in metadata, using general store URL: {target_url}\")\n    # Tambahkan logika fallback untuk Shopee di sini jika diaktifkan kembali\n\n    if target_url:\n        response_data[\"reply\"] = f\"Okay! Taking you to our {marketplace_name.title()} page for {product_name_for_display}. Please click the link if it doesn't open automatically.\"\n        response_data[\"link_action\"] = {\"url\": target_url, \"target\": \"_blank\"}\n    else:\n        response_data[\"reply\"] = f\"You can find {product_name_for_display} on {marketplace_name.title()}. I'm having a bit of trouble generating the direct link right now.\"\n        logger.error(f\"Could not determine target URL for {marketplace_name} and product {product_identifier}.\")\n\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\ud83c\udf81 Find Another Scent\", \"payload\": \"action_start_recommendation_quiz\"},\n        {\"label\": \"\u2753 Need Help?", "mimetype": "text/plain", "start_char_idx": 8435, "end_char_idx": 12684, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "106f052f-bac9-4c1f-9c48-96f396d8a9cd": {"__data__": {"id_": "106f052f-bac9-4c1f-9c48-96f396d8a9cd", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "428c8d61-390f-4d1a-b656-2f87c81d641b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "76ae26cac350ea1f42328e292ed961934eb28bb78ebc46e8b789a76d161078ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce3c4156-ca7b-4869-8dfa-dd51d6fba718", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}, "hash": "5ce79759cd4523b9ad618c670381d47fd829a2521303498ae223ad37ee27ec62", "class_name": "RelatedNodeInfo"}}, "text": "\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data", "mimetype": "text/plain", "start_char_idx": 12684, "end_char_idx": 12813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46302779-6fb0-4fb6-b734-3371d3492190": {"__data__": {"id_": "46302779-6fb0-4fb6-b734-3371d3492190", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f8889b7-cffa-4899-8dd3-7780274afd47", "node_type": "1", "metadata": {}, "hash": "1ef0a9c8cda0eb9590aa0fca53965f8f72e261dba323af2c281901276b91425c", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/core/chatbot.py\n\nimport os\nimport sys\nimport logging \nimport re \nfrom typing import List, Dict, Optional, Any\n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\nlogger = logging.getLogger(__name__)\n\ntry:\n    from backend.utils.config import TOP_K_CHUNKS, SKYLARK_LITE_MODEL_ID\n    from backend.utils.logging_config import setup_logging\n    from backend.core.retrieval import retrieve_relevant_chunks\n    from backend.core.prompting import create_llm_prompt, GREETING_RESPONSES, HANDOFF_MESSAGE_TEMPLATE\n    from backend.core.llm_interaction import get_llm_chat_response\n    from backend.vector_store.faiss_store import vector_store_instance\n    \n    from backend.core.quiz_manager import start_recommendation_quiz, handle_quiz_answer, get_active_quiz_question_details\n    from backend.core.faq_manager import (\n        handle_faq_main, handle_faq_shipping, handle_faq_payment, \n        handle_faq_payment_tokopedia, handle_faq_payment_shopee,\n        handle_faq_returns, handle_contact_us\n    )\n    from backend.core.action_handler import (\n        handle_action_about_us, handle_action_explore_perfumes,\n        handle_action_main_menu, get_handoff_response,\n        handle_action_view_product, \n        handle_action_buy_product, \n        handle_action_goto_marketplace \n    )\n\nexcept ImportError as e:\n    # ... (Fallback code tetap sama, tidak saya sertakan di sini untuk keringkasan) ...\n    print(f\"Error importing backend modules in core/chatbot.py: {e}\")\n    # Fallback logger jika belum ada\n    if not isinstance(logger, logging.LoggerAdapter) and not isinstance(logger, logging.Logger) : \n        logger = logging.getLogger(__name__ + \"_fallback_critical\")\n        if not logger.hasHandlers():\n            if not logging.getLogger().hasHandlers(): \n                logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - FALLBACK - %(name)s - %(levelname)s - %(message)s\")\n            else: \n                _ch = logging.StreamHandler(sys.stdout); _formatter = logging.Formatter('%(asctime)s - FALLBACK - %(name)s - %(levelname)s - %(message)s'); _ch.setFormatter(_formatter); logger.addHandler(_ch); logger.propagate = False\n        logger.error(\"CRITICAL FALLBACK: Logger re-initialized due to import errors or prior misconfiguration.\")\n    logger.warning(\"Chatbot is entering FALLBACK mode due to ImportError. Some functionalities might be placeholders.\")\n    # ... (sisa fallback definitions) ...\n    import random \n\n    if 'setup_logging' not in globals():\n        def setup_logging(level=logging.INFO): \n            logger.info(f\"Fallback setup_logging called with level {level}.\")\n    \n    if 'TOP_K_CHUNKS' not in globals(): \n        TOP_K_CHUNKS = 3\n    if 'SKYLARK_LITE_MODEL_ID' not in globals(): \n        SKYLARK_LITE_MODEL_ID = \"test_model_id\"\n\n    if 'retrieve_relevant_chunks' not in globals():\n        def retrieve_relevant_chunks(user_query: str, k: Optional[int] = None) -> List[Dict]: \n            logger.warning(f\"Using fallback retrieve_relevant_chunks for query: {user_query}\")\n            return []\n            \n    if 'create_llm_prompt' not in globals():\n        def create_llm_prompt(user_query: str, retrieved_chunks: Optional[List[Dict]] = None, intent_type: str = \"general\", conversation_history: Optional[List[Dict[str, str]]] = None) -> List[Dict[str, str]]: \n            logger.warning(f\"Using fallback create_llm_prompt for query: {user_query}\")\n            return [{\"role\":\"user\", \"content\":user_query}]\n\n    if 'HANDOFF_MESSAGE_TEMPLATE' not in globals():\n        HANDOFF_MESSAGE_TEMPLATE = \"I'm currently running in a limited mode and cannot fully assist. Please contact support.\"\n    if 'GREETING_RESPONSES' not in globals():\n        GREETING_RESPONSES = [\"Hello from fallback mode! How can I help?\"]\n\n    if 'get_llm_chat_response' not in globals():\n        def get_llm_chat_response(prompt_messages: List[Dict[str, str]], model_id: Optional[str] = None, temperature: float = 0.7, max_tokens: int = 1024) -> Optional[str]: \n            logger.warning(\"Using fallback get_llm_chat_response.\")\n            return \"Placeholder LLM response from fallback.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4272, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f8889b7-cffa-4899-8dd3-7780274afd47": {"__data__": {"id_": "1f8889b7-cffa-4899-8dd3-7780274afd47", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46302779-6fb0-4fb6-b734-3371d3492190", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "699b3be10743bfefe8e208c3ffad6be7e81d8fdbf57c8ef7bf786f87f1b82891", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0f38874-c9b4-4905-b448-303476c8ca5e", "node_type": "1", "metadata": {}, "hash": "a0cdc25b5c52dcef9ee501089302eeec043a8f908de3e70d9758124ff7035a4f", "class_name": "RelatedNodeInfo"}}, "text": "return \"Placeholder LLM response from fallback.\"\n    \n    if 'vector_store_instance' not in globals():\n        class MockVectorStore: \n            _loaded = False\n            def load(self): \n                self._loaded = True; logger.info(\"MockVectorStore (fallback) loaded.\")\n                return True\n        vector_store_instance = MockVectorStore()\n            \n    if 'start_recommendation_quiz' not in globals(): \n        logger.warning(\"Using fallback quiz_manager functions.\")\n        def start_recommendation_quiz() -> Dict[str, Any]: \n            return {\"reply\": \"Quiz feature (fallback). Q1?\", \"quick_replies\": [], \"quiz_session_data\": {\"active_quiz\": True, \"current_question_id\": \"q1_recipient\", \"answers\": {}}}\n        def handle_quiz_answer(payload: str, state: Dict[str, Any]) -> Dict[str, Any]: \n            return {\"reply\": f\"Quiz answer ({payload}) (fallback).\", \"quick_replies\": []}\n        def get_active_quiz_question_details(state: Dict[str, Any]) -> Optional[Dict[str, Any]]: \n            if state.get(\"active_quiz\"): return {\"text\": \"Fallback Quiz Q text?\", \"options\": []}\n            return None\n            \n    if 'handle_faq_main' not in globals(): \n        logger.warning(\"Using fallback faq_manager functions.\")\n        def handle_faq_main() -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Main (fallback)\", \"quick_replies\": []}\n        def handle_faq_shipping(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Shipping (fallback)\", \"quick_replies\": []}\n        def handle_faq_payment(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Payment (fallback)\", \"quick_replies\": []}\n        def handle_faq_payment_tokopedia(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Toko (fallback)\", \"quick_replies\": []} \n        def handle_faq_payment_shopee(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Shopee (fallback)\", \"quick_replies\": []}\n        def handle_faq_returns(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Returns (fallback)\", \"quick_replies\": []}\n        def handle_contact_us(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"FAQ Contact (fallback)\", \"quick_replies\": []}\n\n    if 'handle_action_about_us' not in globals(): \n        logger.warning(\"Using fallback action_handler functions.\")\n        def handle_action_about_us(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"About Us (fallback)\", \"quick_replies\": []}\n        def handle_action_explore_perfumes(ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": \"Explore (fallback)\", \"quick_replies\": []}\n        def handle_action_main_menu() -> Dict[str, Any]: \n            return {\"reply\": random.choice(GREETING_RESPONSES), \n                    \"quick_replies\": [{\"label\": \"Fallback Option\", \"payload\": \"fb_opt\"}]}\n        def get_handoff_response() -> Dict[str, Any]: \n            return {\"reply\": HANDOFF_MESSAGE_TEMPLATE, \"quick_replies\": []}\n        def handle_action_view_product(pid: str, ch: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]: \n            return {\"reply\": f\"Details for product {pid} (fallback).\", \"quick_replies\":[]}\n        def handle_action_buy_product(pid: str) -> Dict[str, Any]: \n            return {\"reply\": f\"Buy product {pid} (fallback).\", \"quick_replies\":[]}\n        def handle_action_goto_marketplace(m_name: str, pid: str) -> Dict[str, Any]: \n            return {\"reply\": f\"Go to {m_name} for {pid} (fallback).\", \"quick_replies\":[]}\n\n\n# --- Konstanta untuk Prompt Klasifikasi Intent ---\nINTENT_CLASSIFICATION_SYSTEM_MESSAGE = \"\"\"You are an expert intent classification assistant for an e-commerce perfume store.\nYour task is to classify the user's query into one of the following predefined categories.\nOutput ONLY the category name from the list.", "mimetype": "text/plain", "start_char_idx": 4224, "end_char_idx": 8285, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0f38874-c9b4-4905-b448-303476c8ca5e": {"__data__": {"id_": "e0f38874-c9b4-4905-b448-303476c8ca5e", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f8889b7-cffa-4899-8dd3-7780274afd47", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "6045008360ff5ea107e9ddabe0fe58930083e8e91f910ca49b7fb13f53bab67f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "778d4ddd-9f54-442b-8d1e-fe490a0ba92f", "node_type": "1", "metadata": {}, "hash": "520a3f985713e53100daad3ceeb1f335b3534126b054ea36ea8bea9ed6c5ad61", "class_name": "RelatedNodeInfo"}}, "text": "Output ONLY the category name from the list. Do not add any other text, explanation, or punctuation.\nAvailable categories:\n- product_information_request\n- product_recommendation_request\n- payment_inquiry\n- brand_inquiry\n- other_general_query\n- unknown_or_unrelated\"\"\"\nINTENT_CLASSIFICATION_USER_TEMPLATE = \"\"\"User Query: \"{user_query}\"\n\nClassification:\"\"\"\nVALID_LLM_INTENTS = [\n    \"product_information_request\", \"product_recommendation_request\", \"payment_inquiry\",\n    \"brand_inquiry\", \"other_general_query\", \"unknown_or_unrelated\"\n]\n\n_chatbot_initialized = False\ndef initialize_chatbot_dependencies():\n    global _chatbot_initialized\n    if _chatbot_initialized: return\n    logger.info(\"Initializing chatbot dependencies...\")\n    if not vector_store_instance._loaded:\n        logger.info(\"Loading vector store for chatbot...\")\n        if not vector_store_instance.load(): logger.error(\"FATAL: Could not load vector store for chatbot. Retrieval will fail.\")\n        else: logger.info(\"Vector store loaded successfully for chatbot.\")\n    else: logger.info(\"Vector store already loaded.\")\n\ndef classify_intent_with_llm(user_query: str) -> Optional[str]:\n    if not user_query or not user_query.strip(): logger.warning(\"classify_intent_with_llm called with empty query.\"); return \"other_general_query\"\n    logger.debug(f\"Attempting LLM intent classification for query: \\\"{user_query}\\\"\")\n    prompt_messages = [{\"role\": \"system\", \"content\": INTENT_CLASSIFICATION_SYSTEM_MESSAGE}, {\"role\": \"user\", \"content\": INTENT_CLASSIFICATION_USER_TEMPLATE.format(user_query=user_query)}]\n    classified_intent = get_llm_chat_response(prompt_messages=prompt_messages, model_id=SKYLARK_LITE_MODEL_ID, temperature=0.0, max_tokens=20)\n    if classified_intent:\n        cleaned_intent = classified_intent.strip().lower().replace(\" \", \"_\")\n        if cleaned_intent in VALID_LLM_INTENTS: logger.info(f\"LLM classified intent for \\\"{user_query}\\\" as: {cleaned_intent}\"); return cleaned_intent\n        else: logger.warning(f\"LLM returned an unrecognized intent classification: '{classified_intent}' for query \\\"{user_query}\\\". Defaulting to 'other_general_query'.\"); return \"other_general_query\"\n    else: logger.error(f\"LLM failed to classify intent for query: \\\"{user_query}\\\". Defaulting to 'other_general_query'.\"); return \"other_general_query\"\n\ndef detect_intent(user_query: str) -> str:\n    query_lower = user_query.lower().strip()\n    query_for_classification = user_query # Query asli untuk LLM jika keyword tidak cocok\n\n    # 1. Deteksi Sapaan Murni\n    greetings = [\"hello\", \"hi\", \"hai\", \"hey\", \"good morning\", \"good afternoon\", \"good evening\", \"halo\"]\n    common_greeting_remainders = [\"there\", \"you\", \"guys\", \"man\", \"dude\", \"ya\"]\n    trailing_punctuations_for_greeting = [\".\", \",\", \"!\", \"?\"]\n    punctuation_to_strip_from_remainder_start = \" .,!?\"\n    punctuation_to_strip_from_remainder_end = \" .,!?\"\n    \n    detected_greeting_word = None\n    sapaan_terdeteksi_flag = False\n    panjang_sapaan_efektif = 0\n\n    for greeting_word in greetings:\n        if query_lower == greeting_word: \n            sapaan_terdeteksi_flag = True; panjang_sapaan_efektif = len(greeting_word); detected_greeting_word = greeting_word; break\n        if query_lower.startswith(greeting_word + \" \") or \\\n           query_lower.startswith(greeting_word + \",\") or \\\n           query_lower.startswith(greeting_word + \"!\") or \\\n           query_lower.startswith(greeting_word + \".\"):\n            sapaan_terdeteksi_flag = True; panjang_sapaan_efektif = len(greeting_word); detected_greeting_word = greeting_word; break\n        for punc in trailing_punctuations_for_greeting:\n            if query_lower == greeting_word + punc:\n                sapaan_terdeteksi_flag = True; panjang_sapaan_efektif = len(greeting_word + punc); detected_greeting_word = greeting_word; break\n        if sapaan_terdeteksi_flag: break\n            \n    if sapaan_terdeteksi_flag and detected_greeting_word:\n        remainder_after_greeting_raw = user_query[panjang_sapaan_efektif:].strip()\n        remainder_after_greeting_cleaned = remainder_after_greeting_raw.lstrip(punctuation_to_strip_from_remainder_start).strip()\n        logger.debug(f\"Detected greeting '{detected_greeting_word}'.", "mimetype": "text/plain", "start_char_idx": 8241, "end_char_idx": 12466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "778d4ddd-9f54-442b-8d1e-fe490a0ba92f": {"__data__": {"id_": "778d4ddd-9f54-442b-8d1e-fe490a0ba92f", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0f38874-c9b4-4905-b448-303476c8ca5e", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "f0502546fdf15ec91558eee1152c4e828e2af6c4a41154dbd0450cda86f1ba6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "daa79d4d-19e4-4b09-98d7-ba99773a0996", "node_type": "1", "metadata": {}, "hash": "42488a9d52548be1d66b141790ba24a4cb4acfe825e7211696dcaaef9a758026", "class_name": "RelatedNodeInfo"}}, "text": "Effective length used: {panjang_sapaan_efektif}. Raw remainder: '{remainder_after_greeting_raw}'. Cleaned remainder: '{remainder_after_greeting_cleaned}'\")\n        \n        if not remainder_after_greeting_cleaned: \n            logger.info(\"Intent detected as: greeting (pure, no significant remainder)\"); return \"greeting\"\n        \n        final_cleaned_remainder_for_check = remainder_after_greeting_cleaned.rstrip(punctuation_to_strip_from_remainder_end).lower()\n        if final_cleaned_remainder_for_check in common_greeting_remainders:\n            logger.info(f\"Intent detected as: greeting (remainder '{remainder_after_greeting_cleaned}' considered common part of greeting)\"); return \"greeting\"\n        \n        is_only_punctuation_remainder = all(char in punctuation_to_strip_from_remainder_start for char in remainder_after_greeting_cleaned)\n        if is_only_punctuation_remainder:\n            logger.info(f\"Intent detected as: greeting (remainder '{remainder_after_greeting_cleaned}' is only punctuation)\"); return \"greeting\"\n            \n        split_remainder = remainder_after_greeting_cleaned.split()\n        sensitive_short_keywords = [\"buy\", \"pay\", \"bot\", \"help\", \"info\", \"price\", \"recommend\", \"product\", \"scent\", \"shipping\", \"address\", \"location\", \"mission\"]\n        is_sensitive_short_word = len(split_remainder) == 1 and split_remainder[0].lower() in sensitive_short_keywords\n        \n        if len(split_remainder) == 1 and len(split_remainder[0]) <= 3 and not is_sensitive_short_word:\n            logger.info(f\"Intent detected as: greeting (remainder '{remainder_after_greeting_cleaned}' is very short, singular, and not sensitive)\"); return \"greeting\"\n            \n        query_for_classification = remainder_after_greeting_cleaned # Gunakan sisa query untuk klasifikasi selanjutnya\n        logger.debug(f\"Proceeding with intent detection for meaningful remainder: '{query_for_classification}'\")\n\n    # Gunakan query_for_classification (bisa jadi query asli atau sisa setelah sapaan) untuk keyword berikutnya\n    query_lower_for_keywords = query_for_classification.lower()\n\n    # 2. Deteksi Out of Scope\n    out_of_scope_keywords = [\"weather\", \"joke\", \"meaning of life\", \"capital of france\", \"time now\"]\n    if any(keyword in query_lower_for_keywords for keyword in out_of_scope_keywords):\n        logger.info(f\"Intent detected as: out_of_scope based on keywords in '{query_for_classification}'\")\n        return \"out_of_scope\"\n\n    # 3. Deteksi Known Unanswerable (yang direvisi)\n    # \"return policy\" DIHAPUS dari sini\n    known_unanswerable_keywords = [\"stock level\", \"order status\", \"track my shipment\", \"track my order\", \"where is my order\"] \n    if any(keyword in query_lower_for_keywords for keyword in known_unanswerable_keywords):\n        logger.info(f\"Intent detected as: known_unanswerable_handoff based on keywords in '{query_for_classification}'\")\n        return \"known_unanswerable_handoff\"\n\n    # 4. Deteksi Rekomendasi\n    recommendation_keywords = [\n        \"looking for a perfume\", \"help me find a perfume\", \"recommend a perfume\", \n        \"can you recommend\", \"could you recommend\", \"suggest a perfume\", \n        \"can you suggest\", \"could you suggest\", \"need a perfume\", \n        \"want a perfume\", \"find a scent\", \"perfume for\"\n    ]\n    if any(keyword in query_lower_for_keywords for keyword in recommendation_keywords):\n        logger.info(f\"Intent detected as: recommendation based on keywords in '{query_for_classification}'\")\n        return \"recommendation\"\n\n    # --- PERUBAHAN FASE 1a DIMULAI DI SINI ---\n    # 5.", "mimetype": "text/plain", "start_char_idx": 12467, "end_char_idx": 16031, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "daa79d4d-19e4-4b09-98d7-ba99773a0996": {"__data__": {"id_": "daa79d4d-19e4-4b09-98d7-ba99773a0996", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "778d4ddd-9f54-442b-8d1e-fe490a0ba92f", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "cdc4a28afbcc8c93559d87f091e3e5455ddd2ed2499c7e4bd04fc0d330bf07e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c", "node_type": "1", "metadata": {}, "hash": "e2e1388aa3fa63b7b9caec489836ecbe28914b99422bb84705995ce56efe9e99", "class_name": "RelatedNodeInfo"}}, "text": "Deteksi Keyword untuk Lokasi & Kebijakan Pengiriman (Intent: general)\n    location_shipping_keywords = [\n        \"located\", \"location\", \"address\", \"where is your store\", \"physical store\", \n        \"office is where\", \"company address\", \"ship to\", \"send to\", \"delivery to\",\n        \"international shipping\", \"shipping overseas\", \"deliver internationally\"\n    ]\n    if any(keyword in query_lower_for_keywords for keyword in location_shipping_keywords):\n        # Cek lebih spesifik untuk \"ship to [country]\" atau \"send to [country]\"\n        # Ini bisa membantu LLM RAG nanti jika kita bisa ekstrak nama negara, tapi untuk sekarang cukup deteksi keyword\n        if re.search(r\"(ship|send|delivery)\\s+(to|for)\\s+\\w+\", query_lower_for_keywords): # \\w+ untuk nama negara/kota\n             logger.info(f\"Intent detected as: general (shipping destination query) based on keywords in '{query_for_classification}'\")\n        else:\n            logger.info(f\"Intent detected as: general (location/shipping policy) based on keywords in '{query_for_classification}'\")\n        return \"general\"\n\n    # 6. Deteksi Keyword untuk Brand Inquiry (Intent: general)\n    brand_inquiry_keywords = [\n        \"mission\", \"brand mission\", \"company mission\", \"your goal\", \"vision\", \n        \"company history\", \"origin story\", \"about your company\", \"who are you\"\n        # \"return policy\" bisa dimasukkan di sini jika ingin RAG mencoba menjawabnya\n        # atau biarkan LLM intent classifier yang menanganinya.\n    ]\n    if any(keyword in query_lower_for_keywords for keyword in brand_inquiry_keywords):\n        logger.info(f\"Intent detected as: general (brand inquiry) based on keywords in '{query_for_classification}'\")\n        return \"general\"\n    # --- AKHIR PERUBAHAN FASE 1a ---\n\n    # 7. Jika tidak ada kecocokan keyword, gunakan LLM untuk klasifikasi\n    logger.info(f\"No specific keyword match. Using LLM for intent classification on: '{query_for_classification}'\")\n    llm_classified_intent = classify_intent_with_llm(query_for_classification)\n    \n    final_intent = \"general\" # Default jika pemetaan LLM tidak jelas\n    if llm_classified_intent == \"product_recommendation_request\":\n        final_intent = \"recommendation\"\n    elif llm_classified_intent in [\"product_information_request\", \"payment_inquiry\", \"brand_inquiry\", \"other_general_query\"]:\n        final_intent = \"general\"\n    elif llm_classified_intent == \"unknown_or_unrelated\":\n        final_intent = \"unclear_handoff\"\n    else: # Fallback jika LLM mengembalikan sesuatu yang tidak ada di VALID_LLM_INTENTS (seharusnya tidak terjadi)\n        logger.warning(f\"LLM classification result '{llm_classified_intent}' not explicitly mapped. Defaulting to 'general'.\")\n        final_intent = \"general\"\n        \n    logger.info(f\"Final determined intent for original query \\\"{user_query}\\\" is: {final_intent} (based on LLM classification of: \\\"{query_for_classification}\\\")\")\n    return final_intent\n\n# ... (sisa kode generate_chatbot_response dan __main__ tetap sama, tidak saya sertakan di sini untuk keringkasan) ...\n\ndef generate_chatbot_response(\n    user_query_or_payload: str, \n    conversation_history: Optional[List[Dict[str, str]]] = None,\n    input_type: str = \"text\",\n    session_state: Optional[Dict[str, Any]] = None\n) -> Dict[str, Any]:\n    current_quiz_state = session_state if session_state is not None else {} \n    if not _chatbot_initialized:\n        logger.warning(\"Chatbot dependencies not initialized...\"); initialize_chatbot_dependencies()\n        if not vector_store_instance._loaded : \n             logger.error(\"Failed to initialize chatbot dependencies (vector store). Returning handoff.\")\n             try: return get_handoff_response()\n             except NameError: \n                 global HANDOFF_MESSAGE_TEMPLATE \n                 handoff_msg = HANDOFF_MESSAGE_TEMPLATE if 'HANDOFF_MESSAGE_TEMPLATE' in globals() else \"Fallback Handoff Message.\"", "mimetype": "text/plain", "start_char_idx": 16032, "end_char_idx": 19942, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c": {"__data__": {"id_": "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "daa79d4d-19e4-4b09-98d7-ba99773a0996", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "6558d1e26943a6c28354c6719f1330dc09b29b727259a6089ffc98d48b4f3571", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b6b6464d-fb83-43fe-b275-1c251eb817d9", "node_type": "1", "metadata": {}, "hash": "57ad8c37fb3abbd8979c7078a11b1efefabea3d0caa60defb78b6bb0b07e7ae0", "class_name": "RelatedNodeInfo"}}, "text": "return {\"reply\": handoff_msg, \"quick_replies\": []} \n    \n    if input_type == \"payload\":\n        logger.info(f\"Processing payload: \\\"{user_query_or_payload}\\\" with session_state: {current_quiz_state}\")\n        payload_value = user_query_or_payload\n        if payload_value == \"action_start_recommendation_quiz\": return start_recommendation_quiz()\n        elif current_quiz_state.get(\"active_quiz\") and payload_value.startswith(\"quiz_q\"):\n            return handle_quiz_answer(payload_value, current_quiz_state)\n        elif payload_value == \"action_about_us\": return handle_action_about_us(conversation_history)\n        elif payload_value == \"action_explore_perfumes\": return handle_action_explore_perfumes(conversation_history)\n        elif payload_value.startswith(\"action_view_product_\"): \n            product_identifier = payload_value.replace(\"action_view_product_\", \"\")\n            return handle_action_view_product(product_identifier, conversation_history)\n        elif payload_value.startswith(\"action_buy_product_\"):\n            product_identifier = payload_value.replace(\"action_buy_product_\", \"\")\n            return handle_action_buy_product(product_identifier)\n        elif payload_value.startswith(\"action_goto_tokopedia_\"):\n            product_identifier = payload_value.replace(\"action_goto_tokopedia_\", \"\")\n            return handle_action_goto_marketplace(\"tokopedia\", product_identifier)\n        elif payload_value == \"action_faq_main\": return handle_faq_main()\n        elif payload_value == \"action_faq_shipping\": return handle_faq_shipping(conversation_history)\n        elif payload_value == \"action_faq_payment\": return handle_faq_payment(conversation_history)\n        elif payload_value == \"action_faq_payment_tokopedia\": return handle_faq_payment_tokopedia(conversation_history)\n        elif payload_value == \"action_faq_payment_shopee\": return handle_faq_payment_shopee(conversation_history)\n        elif payload_value == \"action_faq_returns\": return handle_faq_returns(conversation_history)\n        elif payload_value == \"action_contact_us\": return handle_contact_us(conversation_history)\n        elif payload_value == \"action_main_menu\": return handle_action_main_menu()\n        else:\n            logger.warning(f\"Unknown payload received: {payload_value}\")\n            response_data = {\"reply\": f\"I'm not sure how to handle the action: '{payload_value}'. Let's go to the main menu.\"}\n            main_menu_resp = handle_action_main_menu()\n            response_data[\"quick_replies\"] = main_menu_resp.get(\"quick_replies\", [])\n            return response_data\n    \n    elif input_type == \"text\":\n        user_query = user_query_or_payload\n        logger.info(f\"Received user query for text processing: \\\"{user_query}\\\" with session_state: {current_quiz_state}\")\n        \n        # Jika kuis aktif, tangani input teks secara khusus\n        if current_quiz_state.get(\"active_quiz\"):\n            # Izinkan \"hi\" atau \"halo\" untuk mereset kuis dan kembali ke menu utama\n            if user_query.lower().strip() in [\"hi\", \"halo\", \"hello\", \"hey\"]:\n                logger.info(\"Greeting received during active quiz. Resetting quiz and showing main menu.\")\n                # Hapus state kuis sebelum memanggil main menu\n                current_quiz_state.clear() # Atau setidaknya active_quiz = False\n                return handle_action_main_menu()\n\n            quiz_question_details = get_active_quiz_question_details(current_quiz_state)\n            if quiz_question_details:\n                return {\n                    \"reply\": f\"Please select one of the options to continue the quiz: {quiz_question_details['text']}\",\n                    \"quick_replies\": quiz_question_details[\"options\"],\n                    \"quiz_session_data\": current_quiz_state \n                }\n            else: # Seharusnya tidak terjadi jika active_quiz true tapi tidak ada detail pertanyaan\n                logger.warning(f\"Text input during active quiz, but could not get question details. State: {current_quiz_state}. Resetting quiz.\")\n                current_quiz_state.clear()\n                return handle_action_main_menu()\n\n        # Jika kuis tidak aktif, lanjutkan dengan deteksi intent normal\n        intent = detect_intent(user_query) \n\n        if intent == \"greeting\": \n            logger.info(\"Intent detected as greeting during text input (quiz not active).\")", "mimetype": "text/plain", "start_char_idx": 19960, "end_char_idx": 24331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6b6464d-fb83-43fe-b275-1c251eb817d9": {"__data__": {"id_": "b6b6464d-fb83-43fe-b275-1c251eb817d9", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "57fe2e17ec25526ca5d83ed7a2bb2e9656e08b6cc9be0b713ac3f2080c50414e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51188862-12a2-4079-97a0-e947e30b97c2", "node_type": "1", "metadata": {}, "hash": "840e8962649fde27bc1aba18efd6b036e2a838149713f31f0e5fcfb3a1717bab", "class_name": "RelatedNodeInfo"}}, "text": "return handle_action_main_menu()\n        elif intent == \"recommendation\": # Tidak perlu cek kuis aktif di sini karena sudah ditangani di atas\n            logger.info(\"Recommendation intent from text, starting quiz...\")\n            return start_recommendation_quiz()\n        elif intent == \"out_of_scope\" or intent == \"known_unanswerable_handoff\" or intent == \"unclear_handoff\":\n            return get_handoff_response()\n        else: # Intent adalah \"general\" atau intent lain yang memerlukan RAG\n            logger.info(f\"Intent is '{intent}'. Proceeding with RAG using original query for retrieval: '{user_query}'\")\n            retrieved_chunks = retrieve_relevant_chunks(user_query, k=TOP_K_CHUNKS)\n            \n            # Tentukan intent_type untuk prompt berdasarkan hasil deteksi atau klasifikasi\n            # Untuk saat ini, jika intent dari detect_intent adalah \"general\", kita gunakan itu.\n            # Jika ada pemetaan lebih spesifik dari LLM (misal brand_inquiry), itu bisa digunakan.\n            prompt_intent_type = \"general\" # Default untuk RAG\n            if intent != \"general\" and intent not in [\"recommendation\", \"greeting\", \"out_of_scope\", \"known_unanswerable_handoff\", \"unclear_handoff\"]:\n                # Jika intent adalah hasil spesifik dari LLM yang valid (misal, \"brand_inquiry\")\n                # dan kita ingin prompt system yang berbeda, kita bisa set di sini.\n                # Untuk sekarang, semua yang bukan di atas akan dianggap \"general\" untuk RAG.\n                pass\n\n\n            prompt_messages = create_llm_prompt(user_query, retrieved_chunks, prompt_intent_type, conversation_history)\n            llm_response_content = get_llm_chat_response(prompt_messages)\n            \n            response_data = {\"reply\": \"\", \"quick_replies\": []} # Default response_data\n            if llm_response_content: \n                response_data[\"reply\"] = llm_response_content.strip()\n                # Tambahkan quick replies default setelah jawaban RAG\n                response_data[\"quick_replies\"] = [\n                    {\"label\": \"\ud83c\udf81 Find My Scent\", \"payload\": \"action_start_recommendation_quiz\"},\n                    {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n                    {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n                ]\n            else: \n                logger.warning(f\"LLM did not return content for RAG query (intent: {intent}). Using handoff.\")\n                return get_handoff_response() \n            \n            return response_data\n    else:\n        logger.error(f\"Unknown input_type: {input_type}\")\n        return {\"reply\": \"Sorry, there was an issue processing your request type.\", \"quick_replies\": []}\n\n\nif __name__ == '__main__':\n    if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n        setup_logging(level=logging.DEBUG)\n    logger.info(\"--- Testing core.chatbot.py (with Purchase Assistance Logic) ---\")\n    initialize_chatbot_dependencies()\n    if not vector_store_instance._loaded: logger.error(\"FATAL: Vector store could not be loaded for chatbot.py test. Exiting.\"); sys.exit(1)\n    import json\n    \n    test_product_name_from_catalog = \"Blue Point For Him\" \n    test_product_identifier = re.sub(r'[^a-z0-9_]+', '', test_product_name_from_catalog.lower().replace(' ', '_'))\n    \n    test_scenarios = [\n        {\"description\": \"Initial Greeting\", \"input_type\": \"text\", \"value\": \"Hi\", \"session_state\": None},\n        # ... (Skenario tes lain bisa ditambahkan di sini jika perlu) ...\n        {\"description\": \"Test Location Query\", \"input_type\": \"text\", \"value\": \"Where is Bali Surfer located?\", \"session_state\": None},\n        {\"description\": \"Test Shipping to Canada Query\", \"input_type\": \"text\", \"value\": \"Can you send to my uncle in Canada?\", \"session_state\": None},\n        {\"description\": \"Test Mission Query\", \"input_type\": \"text\", \"value\": \"What is your mission?\", \"session_state\": None},\n        {\"description\": \"Test Return Policy Query\", \"input_type\": \"text\", \"value\": \"What is your return policy?", "mimetype": "text/plain", "start_char_idx": 24344, "end_char_idx": 28396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51188862-12a2-4079-97a0-e947e30b97c2": {"__data__": {"id_": "51188862-12a2-4079-97a0-e947e30b97c2", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76659b49-0055-4e28-9020-a31ea62cbc5b", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "254555b6aa9ee948e5e2bd8549bc97c2f2bac97e8c98421d6855b335b24b408b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6b6464d-fb83-43fe-b275-1c251eb817d9", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "e2b3436ef7b2f152b9b53f0cb60522c332b56e806d8e25fd5a524e0b815e41d3", "class_name": "RelatedNodeInfo"}}, "text": "\", \"session_state\": None},\n\n    ]\n    for scenario in test_scenarios:\n        logger.info(f\"\\n\\n=================================================\")\n        logger.info(f\"--- Testing Scenario: {scenario['description']} ---\")\n        logger.info(f\"Input Type: {scenario['input_type']}, Value: \\\"{scenario['value']}\\\"\")\n        response_dict = generate_chatbot_response(user_query_or_payload=scenario['value'], input_type=scenario['input_type'], session_state=scenario['session_state'])\n        logger.info(f\"Chatbot Response Dictionary:\\n{json.dumps(response_dict, indent=2)}\")\n        assert response_dict.get(\"reply\",\"\").strip() != \"\", f\"Scenario '{scenario['description']}' produced an empty reply.\"\n        # Hapus assertion spesifik untuk \"Q3 Occasion\" karena itu hanya relevan untuk alur kuis penuh\n        # if scenario['value'] == f\"action_buy_product_{test_product_identifier}\":\n        #     assert any(btn[\"payload\"] == f\"action_goto_tokopedia_{test_product_identifier}\" for btn in response_dict.get(\"quick_replies\", [])), \"Tokopedia button missing for buy action\"\n        # if scenario['value'] == f\"action_goto_tokopedia_{test_product_identifier}\":\n        #     assert response_dict.get(\"link_action\") is not None, \"Link action missing for goto_tokopedia\"\n        #     assert response_dict[\"link_action\"][\"url\"] is not None, \"URL missing in link_action\"\n        logger.info(f\"=================================================\\n\")\n\n    # ... (Skenario tes kuis penuh tetap sama) ...\n    logger.info(\"\\n\\n Scenario: Full Quiz Flow (Post-Refactor)\")\n    logger.info(\"\\n--- Step 1: Start Quiz (via payload) ---\")\n    resp1 = generate_chatbot_response(user_query_or_payload=\"action_start_recommendation_quiz\", input_type=\"payload\")\n    assert resp1.get(\"quiz_session_data\", {}).get(\"active_quiz\") is True\n    state_from_resp1 = resp1.get(\"quiz_session_data\")\n    resp2 = generate_chatbot_response(user_query_or_payload=\"quiz_q1_ans_me_female\", input_type=\"payload\", session_state=state_from_resp1)\n    assert resp2.get(\"quiz_session_data\", {}).get(\"answers\", {}).get(\"q1_recipient\") == \"me_female\"\n    state_from_resp2 = resp2.get(\"quiz_session_data\")\n    resp3 = generate_chatbot_response(user_query_or_payload=\"quiz_q2_ans_fresh_citrus\", input_type=\"payload\", session_state=state_from_resp2)\n    assert resp3.get(\"quiz_session_data\", {}).get(\"answers\", {}).get(\"q2_scent_profile\") == \"fresh_citrus\"\n    state_from_resp3 = resp3.get(\"quiz_session_data\")\n    resp4 = generate_chatbot_response(user_query_or_payload=\"quiz_q3_ans_everyday\", input_type=\"payload\", session_state=state_from_resp3)\n    assert resp4.get(\"quiz_session_data\") is None \n    assert \"- Q3 Occasion: Everyday\" in resp4.get(\"reply\", \"\") # Disesuaikan dengan format baru dari quiz_manager\n    assert \"carousel_cards\" in resp4, \"Carousel cards expected after quiz\"\n    if \"carousel_cards\" in resp4: assert len(resp4[\"carousel_cards\"]) > 0, \"Carousel cards array is empty\"\n\n\n    logger.info(\"--- Finished testing core.chatbot.py (with Purchase Assistance Logic) ---\")", "mimetype": "text/plain", "start_char_idx": 28396, "end_char_idx": 31438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04d4d346-861c-4518-8352-39e66a710ab4": {"__data__": {"id_": "04d4d346-861c-4518-8352-39e66a710ab4", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23cb7585-b237-4849-8290-fe3c0ad08fab", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "c02970ee076ed6e493a27354165d65dc43f938d74fc18986cbfa5b6433b9ffcf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9acb6aeb-8477-4f63-878d-fb213506b879", "node_type": "1", "metadata": {}, "hash": "3ea5f682afa403ec1ff9aabd37a6e45e0240229e838991f9bf29a1df28e841ea", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging\nfrom typing import List, Optional, Any\nimport time # <--- TAMBAHKAN BARIS INI\n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.config import (\n        ARK_API_KEY,\n        SKYLARK_EMBEDDING_MODEL_ID,\n        # BYTEPLUS_API_BASE_URL \n    )\n    from backend.utils.logging_config import setup_logging\n    from byteplussdkarkruntime import Ark\n\nexcept ImportError as e:\n    print(f\"Error importing backend modules in core/embedding.py: {e}\")\n    print(\"Please ensure that the script is run from the project root directory or that PYTHONPATH is set correctly.\")\n    sys.exit(1)\n\nlogger = logging.getLogger(__name__)\n\n_client_ark_embedding: Optional[Ark] = None\ntry:\n    API_BASE_URL = \"https://ark.ap-southeast.bytepluses.com/api/v3\" \n    if hasattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL'):\n        cfg_base_url = getattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL')\n        if cfg_base_url:\n            API_BASE_URL = cfg_base_url\n            \n    _client_ark_embedding = Ark(api_key=ARK_API_KEY, base_url=API_BASE_URL)\n    logger.info(f\"BytePlus Ark SDK client for embeddings initialized with base_url: {API_BASE_URL}\")\nexcept Exception as e:\n    logger.critical(f\"Failed to initialize BytePlus Ark SDK client in core/embedding.py: {e}\")\n    _client_ark_embedding = None\n\nEMBEDDING_API_PATH = \"/embeddings/multimodal\"\n\ndef get_query_embedding(query_text: str) -> Optional[List[float]]:\n    if not _client_ark_embedding:\n        logger.error(\"BytePlus Ark SDK client for embeddings is not initialized. Cannot get query embedding.\")\n        return None\n\n    if not query_text or not query_text.strip():\n        logger.warning(\"Received empty or whitespace-only query_text for embedding.\")\n        return None\n\n    logger.info(f\"Generating embedding for query: \\\"{query_text[:70].replace(os.linesep, ' ')}...\\\"\")\n\n    formatted_input = [{\"type\": \"text\", \"text\": query_text}]\n    request_body_dict = {\n        \"model\": SKYLARK_EMBEDDING_MODEL_ID,\n        \"input\": formatted_input,\n        \"encoding_format\": \"float\"\n    }\n    logger.debug(f\"Request body for query embedding: {request_body_dict}\")\n\n    try:\n        response_data = _client_ark_embedding.post(\n            path=EMBEDDING_API_PATH,\n            body=request_body_dict,\n            cast_to=Any\n        )\n\n        logger.debug(f\"Response type from SDK for query: {type(response_data)}\")\n        logger.debug(f\"Response data from SDK for query (first 500 chars): {str(response_data)[:500]}\")\n\n        if isinstance(response_data, dict) and \"data\" in response_data:\n            data_item = response_data[\"data\"]\n            if isinstance(data_item, dict) and \"embedding\" in data_item and isinstance(data_item[\"embedding\"], list):\n                embedding_vector = data_item[\"embedding\"]\n                logger.info(f\"Successfully generated embedding for query. Vector dimension: {len(embedding_vector)}\")\n                return embedding_vector\n            elif isinstance(data_item, list) and len(data_item) == 1:\n                single_item_in_list = data_item[0]\n                if isinstance(single_item_in_list, dict) and \"embedding\" in single_item_in_list and isinstance(single_item_in_list[\"embedding\"], list):\n                    embedding_vector = single_item_in_list[\"embedding\"]\n                    logger.info(f\"Successfully generated embedding for query (from list of one). Vector dimension: {len(embedding_vector)}\")\n                    return embedding_vector\n                else:\n                    logger.warning(f\"Embedding data item (in list) for query is malformed: {single_item_in_list}\")\n                    return None\n            else:\n                logger.warning(f\"Embedding data object for query is malformed: {data_item}\")\n                return None\n        elif isinstance(response_data, dict) and \"error\" in response_data:\n            logger.error(f\"API Error received from BytePlus for query: {response_data['error']}\")\n            return None\n        else:\n            logger.error(f\"Unexpected response structure or 'data' key missing for query.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4290, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9acb6aeb-8477-4f63-878d-fb213506b879": {"__data__": {"id_": "9acb6aeb-8477-4f63-878d-fb213506b879", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23cb7585-b237-4849-8290-fe3c0ad08fab", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "c02970ee076ed6e493a27354165d65dc43f938d74fc18986cbfa5b6433b9ffcf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "04d4d346-861c-4518-8352-39e66a710ab4", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "e779c9ed81d9d35504289f331ced919b1f9c9e40cf8a09ff7135cbfd608d5458", "class_name": "RelatedNodeInfo"}}, "text": "Type: {type(response_data)}, Response: {str(response_data)[:1000]}\")\n            return None\n\n    except Exception as e:\n        logger.error(f\"Exception calling BytePlus embedding API for query \\\"{query_text[:30]}...\\\": {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return None\n\nif __name__ == '__main__':\n    if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n        setup_logging(level=logging.DEBUG)\n\n    logger.info(\"--- Testing core.embedding.py ---\")\n    \n    if not _client_ark_embedding:\n        logger.error(\"Cannot run test: BytePlus Ark SDK client for embeddings failed to initialize.\")\n    else:\n        test_queries = [\n            \"Tell me about Blue Point For Him\",\n            \"What are the payment options on Tokopedia?\",\n            \"Are your products vegan?\"\n        ]\n\n        for query in test_queries:\n            logger.info(f\"\\nTesting query: \\\"{query}\\\"\")\n            embedding_vector = get_query_embedding(query)\n            if embedding_vector:\n                logger.info(f\"  Successfully got embedding. Dimension: {len(embedding_vector)}\")\n                logger.debug(f\"  Embedding (first 10 values): {embedding_vector[:10]}\")\n            else:\n                logger.error(f\"  Failed to get embedding for query: \\\"{query}\\\"\")\n            time.sleep(0.5) # Sekarang 'time' sudah terdefinisi\n\n    logger.info(\"--- Finished testing core.embedding.py ---\")", "mimetype": "text/plain", "start_char_idx": 4291, "end_char_idx": 5751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1659ea24-5899-44fa-918e-d5aa40f92369": {"__data__": {"id_": "1659ea24-5899-44fa-918e-d5aa40f92369", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "56d84923ae1b219addb64beadb8378aa06e3481fc193c474086aa50eed514588", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8", "node_type": "1", "metadata": {}, "hash": "3a0565ef4ae159062150b8c6b2c05a61a8d79856c42b806ea6fd3a931b851a25", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/core/faq_manager.py\n\nimport logging\nfrom typing import Dict, Any, Optional, List\n\n# Impor yang diperlukan\nfrom backend.core.retrieval import retrieve_relevant_chunks\nfrom backend.core.prompting import create_llm_prompt \nfrom backend.core.llm_interaction import get_llm_chat_response\nfrom backend.utils.config import TOP_K_CHUNKS \n# Impor konstanta kontak jika dipindahkan ke config atau prompting\n# from backend.utils.config import CUSTOMER_CARE_WHATSAPP, CUSTOMER_CARE_EMAIL \n# atau\nfrom backend.core.prompting import CUSTOMER_CARE_WHATSAPP, CUSTOMER_CARE_EMAIL\n\n\nlogger = logging.getLogger(__name__)\n\ndef handle_faq_main() -> Dict[str, Any]:\n    \"\"\"\n    Menghasilkan respons untuk menampilkan menu utama FAQ.\n    \"\"\"\n    logger.info(\"Handling FAQ main menu request.\")\n    response_data: Dict[str, Any] = {\n        \"reply\": \"Sure, I can help with Frequently Asked Questions. What topic are you interested in?\",\n        \"quick_replies\": [\n            {\"label\": \"\ud83d\ude9a Shipping Info\", \"payload\": \"action_faq_shipping\"},\n            {\"label\": \"\ud83d\udcb3 Payment Options\", \"payload\": \"action_faq_payment\"},\n            {\"label\": \"\ud83d\udd04 Returns/Warranty\", \"payload\": \"action_faq_returns\"},\n            {\"label\": \"\ud83d\udcde Contact Us\", \"payload\": \"action_contact_us\"},\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n        ]\n    }\n    return response_data\n\ndef handle_faq_shipping(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    \"\"\"\n    Menangani permintaan informasi pengiriman dengan RAG dan LLM yang disempurnakan.\n    \"\"\"\n    logger.info(\"Handling FAQ shipping info request.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    \n    queries_for_shipping = [\n        \"Bali Surfer's Perfume shipping details from Bandung including cost and delivery options\",\n        \"Bali Surfer's Perfume shipment processing time and shipping area\" \n    ]\n    \n    all_relevant_chunks: List[Dict] = []\n    for q in queries_for_shipping:\n        # Coba k=2 untuk query kedua untuk menangkap info dari Payment Guide jika terpisah\n        k_value = 2 if \"processing time\" in q else 1 \n        chunks = retrieve_relevant_chunks(q, k=k_value) \n        if chunks:\n            all_relevant_chunks.extend(chunks)\n    \n    unique_chunks_dict = {chunk.get('text_content', ''): chunk for chunk in all_relevant_chunks}\n    final_retrieved_chunks = list(unique_chunks_dict.values())\n\n    if not final_retrieved_chunks:\n        logger.warning(\"No relevant chunks found for shipping information.\")\n        response_data[\"reply\"] = \"We generally ship from Bandung, Indonesia. For detailed shipping costs and times, this information is usually available on the product page or during checkout on Tokopedia/Shopee. We ship within Indonesia.\"\n    else:\n        logger.info(f\"Retrieved {len(final_retrieved_chunks)} unique chunks for shipping info.\")\n        prompt_user_query = \"Summarize Bali Surfer's Perfume shipping policy using clear bullet points if possible. Include details about: where items are shipped from, typical shipping costs, estimated delivery times for economy and instant options (if available), shipment processing time, and the shipping area (e.g., specific countries or regions).\"\n        \n        prompt_messages = create_llm_prompt(\n            user_query=prompt_user_query,\n            retrieved_chunks=final_retrieved_chunks,\n            intent_type=\"general\", \n            conversation_history=conversation_history\n        )\n        llm_response = get_llm_chat_response(prompt_messages)\n\n        if llm_response:\n            response_data[\"reply\"] = llm_response.strip()\n        else:\n            logger.warning(\"LLM failed to generate summary for shipping information.\")\n            response_data[\"reply\"] = \"We ship from Bandung, Indonesia, typically within 1-2 business days. Standard economy shipping is around Rp9,000 with an estimated arrival of 4-5 days to most areas in Indonesia. Instant delivery options are also available for some locations. For the most accurate details, please check the specific product page.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8": {"__data__": {"id_": "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "56d84923ae1b219addb64beadb8378aa06e3481fc193c474086aa50eed514588", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1659ea24-5899-44fa-918e-d5aa40f92369", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "1dfe5cb767eb1cc0e25d19f682deeaab4ad675bf16178dc07464fc93dfcdb0ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "10375478-9b69-4f99-9790-39277831b609", "node_type": "1", "metadata": {}, "hash": "2df283db66313d9174aa2b1758c4277004e620921ff342b381c6ac4b4d89ef3e", "class_name": "RelatedNodeInfo"}}, "text": "For the most accurate details, please check the specific product page.\"\n\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_faq_payment(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    \"\"\"\n    Menangani permintaan informasi opsi pembayaran, mengarah ke sub-pilihan platform.\n    \"\"\"\n    logger.info(\"Handling FAQ payment options request.\")\n    response_data: Dict[str, Any] = {\n        \"reply\": \"You can purchase our perfumes through our online stores on Tokopedia or Shopee. We support various payment methods there. Would you like a step-by-step guide for a specific platform?\",\n        \"quick_replies\": [\n            {\"label\": \"Tokopedia Guide\", \"payload\": \"action_faq_payment_tokopedia\"}, # Disederhanakan labelnya\n            {\"label\": \"Shopee Guide\", \"payload\": \"action_faq_payment_shopee\"},   # Disederhanakan labelnya\n            {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n        ]\n    }\n    return response_data\n\ndef _get_payment_guide(platform_name: str, conversation_history: Optional[List[Dict[str, str]]] = None) -> str:\n    \"\"\"\n    Helper untuk mengambil dan merangkum panduan pembayaran untuk platform tertentu.\n    \"\"\"\n    logger.debug(f\"Getting payment guide for {platform_name}.\")\n    # Query lebih spesifik untuk menargetkan bagian yang benar di Bali Surver.txt\n    query_konseptual = f\"Payment guide for Bali Surfer's Perfume on {platform_name}\"\n    # k=1 seharusnya cukup jika bagian Tokopedia/Shopee di-chunk dengan baik sebagai satu unit\n    retrieved_chunks = retrieve_relevant_chunks(query_konseptual, k=1) \n    \n    if not retrieved_chunks:\n        logger.warning(f\"No specific payment guide chunk found for {platform_name} using query: '{query_konseptual}'.\")\n        return f\"I couldn't find the specific payment guide for {platform_name} right now. Generally, you can search for 'Bali Surfer's Perfume' on {platform_name}, add your desired items to the cart, and follow their standard checkout process. They typically accept various methods like e-wallets, bank transfers, and credit/debit cards.\"\n\n    # Prompt LLM untuk merangkum langkah-langkah dengan jelas dan menggunakan daftar bernomor\n    prompt_user_query = (\n        f\"Based on the provided context about Bali Surfer's Perfume, \"\n        f\"provide a clear, concise, step-by-step summary of how to make a payment on {platform_name}. \"\n        f\"Please use a numbered list for the steps. \"\n        f\"Focus only on the payment steps for {platform_name}.\"\n    )\n    \n    prompt_messages = create_llm_prompt(\n        user_query=prompt_user_query,\n        retrieved_chunks=retrieved_chunks,\n        intent_type=\"payment_inquiry\", \n        conversation_history=conversation_history\n    )\n    llm_response = get_llm_chat_response(prompt_messages)\n    \n    if llm_response:\n        # Tambahan: Cek sederhana apakah output LLM mengandung angka (indikasi daftar)\n        if any(char.isdigit() for char in llm_response):\n            return llm_response.strip()\n        else:\n            logger.warning(f\"LLM response for {platform_name} guide did not seem to be a numbered list. Response: {llm_response[:100]}...\")\n            # Jika tidak ada daftar, mungkin lebih baik tampilkan konteks mentah jika bersih, atau fallback\n            # Untuk sekarang, kita tetap tampilkan respons LLM apa adanya.\n            return f\"Here's some information on paying via {platform_name}:\\n{llm_response.strip()}\"\n    else:\n        logger.warning(f\"LLM failed to generate payment guide for {platform_name}.\")\n        return f\"Please search for 'Bali Surfer's Perfume' on {platform_name} and follow their checkout instructions. They support common payment methods like e-wallets, bank transfers, and credit/debit cards.\"", "mimetype": "text/plain", "start_char_idx": 4020, "end_char_idx": 7979, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10375478-9b69-4f99-9790-39277831b609": {"__data__": {"id_": "10375478-9b69-4f99-9790-39277831b609", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "56d84923ae1b219addb64beadb8378aa06e3481fc193c474086aa50eed514588", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "af7e9c490f5e6fe9d2e30f6314ef6a4e4eebccc36d9e6b71ba32ee74230f56d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61d57bf7-ab65-4a87-add8-3240f0b075e4", "node_type": "1", "metadata": {}, "hash": "d8c7dfb298e7a700252b9b9172cd18aed47fe9b6147fcb146c2f35563663df28", "class_name": "RelatedNodeInfo"}}, "text": "They support common payment methods like e-wallets, bank transfers, and credit/debit cards.\"\n\n\ndef handle_faq_payment_tokopedia(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling FAQ Tokopedia payment guide request.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    response_data[\"reply\"] = _get_payment_guide(\"Tokopedia\", conversation_history)\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"Shopee Guide\", \"payload\": \"action_faq_payment_shopee\"},\n        {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_faq_payment_shopee(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling FAQ Shopee payment guide request.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    response_data[\"reply\"] = _get_payment_guide(\"Shopee\", conversation_history)\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"Tokopedia Guide\", \"payload\": \"action_faq_payment_tokopedia\"},\n        {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_faq_returns(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling FAQ returns/warranty info request.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    query_konseptual = \"What is the return or warranty policy for Bali Surfer's Perfume regarding damaged products or malfunctions?\"\n    retrieved_chunks = retrieve_relevant_chunks(query_konseptual, k=1) # Info garansi biasanya ringkas\n    \n    prompt_user_query = \"Explain Bali Surfer's Perfume return and warranty policy based on the context, focusing on what is covered (e.g., damaged packaging, cracked bottle, sprayer malfunctions) and what the customer should do. Mention the 100% money-back guarantee if applicable.\"\n    prompt_messages = create_llm_prompt(\n        user_query=prompt_user_query,\n        retrieved_chunks=retrieved_chunks,\n        intent_type=\"general\", \n        conversation_history=conversation_history\n    )\n    llm_response = get_llm_chat_response(prompt_messages)\n\n    if llm_response:\n        response_data[\"reply\"] = llm_response.strip()\n    else:\n        response_data[\"reply\"] = \"We offer a 100% money-back guarantee if your product arrives with damaged packaging, a cracked or broken bottle, or a malfunctioning sprayer. Please consult our admin before rating if you experience such issues. You can contact us for assistance.\"\n    \n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\ud83d\udcde Contact Support\", \"payload\": \"action_contact_us\"},\n        {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data\n\ndef handle_contact_us(conversation_history: Optional[List[Dict[str, str]]] = None) -> Dict[str, Any]:\n    logger.info(\"Handling Contact Us request.\")\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []}\n    \n    query_konseptual = \"Bali Surfer's Perfume customer care contact details including WhatsApp, email, and address.\"\n    retrieved_chunks = retrieve_relevant_chunks(query_konseptual, k=1)\n\n    prompt_user_query = \"Please provide the customer contact information for Bali Surfer's Perfume, including WhatsApp, email, and physical address if available in the context. Present it clearly, perhaps using bullet points for each contact method.\"", "mimetype": "text/plain", "start_char_idx": 7887, "end_char_idx": 11532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61d57bf7-ab65-4a87-add8-3240f0b075e4": {"__data__": {"id_": "61d57bf7-ab65-4a87-add8-3240f0b075e4", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b6af1f5-c9fb-43d6-b105-7089ce96625e", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "56d84923ae1b219addb64beadb8378aa06e3481fc193c474086aa50eed514588", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10375478-9b69-4f99-9790-39277831b609", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "1cab03265022ec14107a765400a966f616e5bbc0517e6cc203c2173cb016388f", "class_name": "RelatedNodeInfo"}}, "text": "Present it clearly, perhaps using bullet points for each contact method.\"\n    prompt_messages = create_llm_prompt(\n        user_query=prompt_user_query,\n        retrieved_chunks=retrieved_chunks,\n        intent_type=\"general\",\n        conversation_history=conversation_history\n    )\n    llm_response = get_llm_chat_response(prompt_messages)\n\n    if llm_response and (\"whatsapp\" in llm_response.lower() or \"email\" in llm_response.lower() or \"address\" in llm_response.lower()):\n        response_data[\"reply\"] = f\"You can reach our team through the following channels:\\n{llm_response.strip()}\"\n    else:\n        logger.warning(\"Failed to get contact info via RAG+LLM, using fallback.\")\n        address = \"Jl. A.H. Nasution 103, Bandung, Jawa Barat, Indonesia\" \n        response_data[\"reply\"] = (\n            f\"You can reach our friendly customer support team via:\\n\"\n            f\"- WhatsApp: {CUSTOMER_CARE_WHATSAPP}\\n\"\n            f\"- Email: {CUSTOMER_CARE_EMAIL}\\n\"\n            f\"- Address: {address}\\n\"\n            f\"They'll be happy to help!\"\n        )\n\n    response_data[\"quick_replies\"] = [\n        {\"label\": \"\u2753 More FAQs\", \"payload\": \"action_faq_main\"},\n        {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n    ]\n    return response_data", "mimetype": "text/plain", "start_char_idx": 11459, "end_char_idx": 12713, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c07df0e2-ef76-4a78-bf05-350f3c205e2a": {"__data__": {"id_": "c07df0e2-ef76-4a78-bf05-350f3c205e2a", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a846f99-5fe7-4493-a0dd-639788eb506a", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "9f3ffb24d9f4327d76272a1536caec790d173d2774a2c4477aa27369641c6fa6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "febfd0b0-6031-474d-9d9d-eb36658adf52", "node_type": "1", "metadata": {}, "hash": "6181d98a9a6dff8324c7d8b579c14e50569cef885889f90822265ec4506439b1", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging\nfrom typing import List, Dict, Optional, Any \nimport time # Sudah diimpor dari perbaikan sebelumnya\n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.config import (\n        ARK_API_KEY,\n        SKYLARK_LITE_MODEL_ID,\n        # BYTEPLUS_API_BASE_URL \n    )\n    from backend.utils.logging_config import setup_logging\n    from byteplussdkarkruntime import Ark\n    from byteplussdkarkruntime._exceptions import ArkAPIError \nexcept ImportError as e:\n    print(f\"Error importing backend modules in core/llm_interaction.py: {e}\")\n    if 'setup_logging' not in globals():\n        def setup_logging(level=logging.INFO): logging.basicConfig(level=level)\n    if 'ArkAPIError' not in globals():\n        class ArkAPIError(Exception): pass \n    if 'Ark' not in globals():\n        class Ark: \n            def __init__(self, api_key, base_url): pass\n            class Chat:\n                class Completions:\n                    def create(self, **kwargs): return None\n                completions = Completions()\n            chat = Chat()\n    if 'ARK_API_KEY' not in globals(): ARK_API_KEY = \"test_key\"\n    if 'SKYLARK_LITE_MODEL_ID' not in globals(): SKYLARK_LITE_MODEL_ID = \"test_model\"\n\n\nlogger = logging.getLogger(__name__)\n\n_client_ark_chat: Optional[Ark] = None\nif not ARK_API_KEY:\n    logger.critical(\"ARK_API_KEY is not set in core/llm_interaction.py. LLM calls will fail.\")\nelse:\n    try:\n        API_BASE_URL = \"https://ark.ap-southeast.bytepluses.com/api/v3\" \n        if hasattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL'):\n            cfg_base_url = getattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL')\n            if cfg_base_url:\n                API_BASE_URL = cfg_base_url\n                \n        _client_ark_chat = Ark(api_key=ARK_API_KEY, base_url=API_BASE_URL)\n        logger.info(f\"BytePlus Ark SDK client for chat initialized with base_url: {API_BASE_URL}\")\n    except Exception as e:\n        logger.critical(f\"Failed to initialize BytePlus Ark SDK client in core/llm_interaction.py: {e}\")\n        _client_ark_chat = None", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "febfd0b0-6031-474d-9d9d-eb36658adf52": {"__data__": {"id_": "febfd0b0-6031-474d-9d9d-eb36658adf52", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a846f99-5fe7-4493-a0dd-639788eb506a", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "9f3ffb24d9f4327d76272a1536caec790d173d2774a2c4477aa27369641c6fa6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c07df0e2-ef76-4a78-bf05-350f3c205e2a", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "e434972d109101120e16ecded118b2e862f3217b8ed7453decdbca159df30c96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07e9ba50-ceb9-4701-b868-265100dfb95c", "node_type": "1", "metadata": {}, "hash": "6a9650e788fa57652c36dcfb5a3c391412d72339b9790d51235d15c8dcdadc49", "class_name": "RelatedNodeInfo"}}, "text": "def get_llm_chat_response(\n    prompt_messages: List[Dict[str, str]],\n    model_id: Optional[str] = None,\n    temperature: float = 0.7, \n    max_tokens: int = 1024,\n) -> Optional[str]:\n    if not _client_ark_chat:\n        logger.error(\"BytePlus Ark SDK client for chat is not initialized. Cannot get LLM response.\")\n        return None\n\n    if not prompt_messages:\n        logger.warning(\"Received empty prompt_messages. Cannot get LLM response.\")\n        return None\n\n    final_model_id = model_id if model_id else SKYLARK_LITE_MODEL_ID\n    if not final_model_id:\n        logger.error(\"LLM Model ID is not configured. Cannot get LLM response.\")\n        return None\n        \n    request_params = {\n        \"model\": final_model_id,\n        \"messages\": prompt_messages,\n        \"temperature\": temperature,\n        \"max_tokens\": max_tokens,\n        \"stream\": False \n    }\n    logger.debug(f\"Sending request to LLM with params: {request_params}\")\n\n    try:\n        completion_response = _client_ark_chat.chat.completions.create(**request_params)\n        \n        logger.debug(f\"Raw LLM response type: {type(completion_response)}\")\n        logger.debug(f\"Raw LLM response data (first 500 chars): {str(completion_response)[:500]}\")\n\n        if completion_response and completion_response.choices:\n            if len(completion_response.choices) > 0:\n                message = completion_response.choices[0].message\n                if message and message.content:\n                    logger.info(f\"Successfully received LLM response content.\")\n                    logger.debug(f\"LLM response content: {message.content}\")\n                    return message.content\n                else:\n                    logger.warning(f\"LLM response choice message or content is empty. Message: {message}\")\n            else:\n                logger.warning(f\"LLM response 'choices' array is empty. Response: {completion_response}\")\n        else:\n            logger.warning(f\"LLM response or 'choices' attribute is missing. Response: {completion_response}\")\n        \n        return None \n\n    except ArkAPIError as e: \n        logger.error(f\"BytePlus Ark API Error during chat completion: {e}\")\n        if hasattr(e, 'body') and e.body and isinstance(e.body, dict) and 'error' in e.body: # Pastikan e.body adalah dict\n             logger.error(f\"API Error details: {e.body['error']}\")\n        return None\n    except Exception as e:\n        logger.error(f\"An unexpected exception occurred during chat completion: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return None\n\nif __name__ == '__main__':\n    if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n        setup_logging(level=logging.DEBUG)\n\n    # ======================================================================\n    # PERUBAHAN DI SINI: Impor SYSTEM_MESSAGE_GENERAL\n    # ======================================================================\n    try:\n        from backend.core.prompting import SYSTEM_MESSAGE_GENERAL\n    except ImportError:\n        logger.warning(\"Could not import SYSTEM_MESSAGE_GENERAL from prompting.py for testing. Using a simple placeholder.\")\n        SYSTEM_MESSAGE_GENERAL = \"You are an AI assistant. Please use the provided context to answer the user's query about Bali Surfer's Perfume.\"", "mimetype": "text/plain", "start_char_idx": 2279, "end_char_idx": 5607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07e9ba50-ceb9-4701-b868-265100dfb95c": {"__data__": {"id_": "07e9ba50-ceb9-4701-b868-265100dfb95c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a846f99-5fe7-4493-a0dd-639788eb506a", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "9f3ffb24d9f4327d76272a1536caec790d173d2774a2c4477aa27369641c6fa6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "febfd0b0-6031-474d-9d9d-eb36658adf52", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "eae90794b201b5e8c8d09d8e2b84e0c8efbd93a4aa239224959513c39ac0fe0e", "class_name": "RelatedNodeInfo"}}, "text": "logger.info(\"--- Testing core.llm_interaction.py ---\")\n\n    if not _client_ark_chat:\n        logger.error(\"Cannot run test: BytePlus Ark SDK client for chat failed to initialize.\")\n    else:\n        test_prompt_1 = [\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": \"What is the capital of Bali?\"}\n        ]\n        logger.info(f\"\\nTesting with simple prompt: {test_prompt_1}\")\n        response_1 = get_llm_chat_response(test_prompt_1)\n        if response_1:\n            logger.info(f\"LLM Response 1: {response_1}\")\n        else:\n            logger.error(\"Failed to get response for test_prompt_1.\")\n        time.sleep(1) # Jeda antar panggilan API untuk pengujian\n\n        test_prompt_2_context = \"\"\"CONTEXT:\n--- Context Item 1 ---\nProduct Name: Blue Point For Him\nPrice: Rp225,000\nScent Profile: Citrus, Fruity, Oceanic\nContent: A fresh blend of citrus and fruity notes.\n--- END OF CONTEXT ---\n\"\"\"\n        test_prompt_2 = [\n            {\"role\": \"system\", \"content\": SYSTEM_MESSAGE_GENERAL}, # Sekarang menggunakan yang diimpor atau placeholder\n            {\"role\": \"user\", \"content\": f\"{test_prompt_2_context}\\nUser Query: Tell me about Blue Point For Him.\"}\n        ]\n\n        logger.info(f\"\\nTesting with RAG-like prompt (Query 2)\") # Log yang lebih jelas\n        logger.debug(f\"Prompt for Query 2: {test_prompt_2}\") # Log promptnya\n        response_2 = get_llm_chat_response(test_prompt_2, max_tokens=150)\n        if response_2:\n            logger.info(f\"LLM Response 2: {response_2}\")\n        else:\n            logger.error(\"Failed to get response for test_prompt_2.\")\n            \n    logger.info(\"--- Finished testing core.llm_interaction.py ---\")", "mimetype": "text/plain", "start_char_idx": 5614, "end_char_idx": 7335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cafbad8-f9b6-4c47-8dd4-5c0976ef4727": {"__data__": {"id_": "2cafbad8-f9b6-4c47-8dd4-5c0976ef4727", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "3196b7c69e53802f99dcae042bcceeac32653aa29cc285773e0076c9a8093306", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2", "node_type": "1", "metadata": {}, "hash": "f1fe03ec66cc17e0238550ebb1e0f500c47b9433d06b04b83a324d049a61eecd", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/core/prompting.py\n\nimport os\nimport sys\nimport logging\nfrom typing import List, Dict, Any, Optional\nimport json \n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.logging_config import setup_logging\n    from backend.data.chunking import Chunk \nexcept ImportError as e:\n    print(f\"Error importing backend modules in core/prompting.py: {e}\")\n    if 'Chunk' not in globals():\n        class Chunk(dict): pass\n    if 'setup_logging' not in globals():\n        def setup_logging(level=logging.INFO): logging.basicConfig(level=level)\n\nif not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n    setup_logging(level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\nCUSTOMER_CARE_WHATSAPP = \"0898-2323-0000\" \nCUSTOMER_CARE_EMAIL = \"email@balisurfer.com\" \n\n# --- PERUBAHAN DI SINI ---\nSYSTEM_MESSAGE_GENERAL = f\"\"\"You are a friendly, polite, and helpful AI assistant for Bali Surfer's Perfume, an e-commerce store specializing in ocean-inspired, artisanal perfumes.\nYour primary goal is to assist customers with their inquiries about our brand, products (including scent profiles, descriptions, price, volume, occasion, etc.), and how to purchase.\nAlways base your answers on the information provided in the 'CONTEXT' section.\n\nIf the user asks about our physical location or address, check the CONTEXT for this information and provide it (e.g., \"Our main office is located at [address from context]\").\nIf the user asks about shipping destinations (e.g., \"Do you ship to [country/city]?\"), check the CONTEXT for our shipping policy. State clearly whether we ship only domestically (e.g., \"We currently only ship within Indonesia\") or if international shipping is available, based on the CONTEXT.\nIf the user asks about return policies or warranties, look for information in the CONTEXT regarding money-back guarantees, conditions for returns (e.g., damaged packaging, bottle cracked, sprayer malfunctions), and what the customer should do.\n\nIf the information is not available in the provided context, or if the question is outside the scope of Bali Surfer's Perfume, politely state that you don't have that specific detail or cannot answer that type of question.\nThen, suggest they contact our customer support for further assistance: WhatsApp at {CUSTOMER_CARE_WHATSAPP} or email at {CUSTOMER_CARE_EMAIL}.\nDo NOT make up information or answer questions unrelated to Bali Surfer's Perfume.\nKeep your answers concise and directly relevant to the user's query and the provided context.\nBe professional and maintain a positive tone.\nIf the context contains product details like 'Scent Profile', 'Price', 'Volume', 'Occasion', use them in your answer when relevant.\n\"\"\"\n# --- AKHIR PERUBAHAN ---\n\nSYSTEM_MESSAGE_RECOMMENDATION = f\"\"\"You are a friendly, polite, and helpful AI assistant for Bali Surfer's Perfume.\nWhen a user asks for a perfume recommendation, your goal is to suggest 1 to 3 suitable perfumes from the provided 'CONTEXT'.\nAnalyze the user's preferences mentioned in their query (e.g., scent notes, occasion, price range, for him/her, vibe).\nMatch these preferences against the product details in the 'CONTEXT', paying close attention to 'Product Name', 'Scent Profile', 'Description', 'Price', 'Occasion', 'Volume', and any other relevant metadata.\nFor each recommended perfume, briefly explain WHY it is a good match for the user's request, referencing the specific attributes from the context.\nIf the provided context does not contain enough information to make a good recommendation based on the user's query, or if no products in the context clearly match, politely state that. You can then ask for more specific preferences or offer to list some of our popular perfumes if the context mentions best sellers.\nDo NOT recommend products not present in the provided context.\nAlways direct users to customer support (WhatsApp at {CUSTOMER_CARE_WHATSAPP} or email at {CUSTOMER_CARE_EMAIL}) if you cannot fulfill their request or for more personalized advice.\n\"\"\"\n\nGREETING_RESPONSES = [\n    \"Hello! Welcome to Bali Surfer's Perfume. How can I help you find your perfect scent today?\",\n    \"Hi there! Thanks for visiting Bali Surfer's Perfume. What can I do for you?\",\n    \"Welcome to Bali Surfer's Perfume! Feel free to ask me anything about our products or brand.\"", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 4498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2": {"__data__": {"id_": "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "3196b7c69e53802f99dcae042bcceeac32653aa29cc285773e0076c9a8093306", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cafbad8-f9b6-4c47-8dd4-5c0976ef4727", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "c2ce999a4e02b60c5d61d285ef0dd3d7b8d3acb17c6d8afa196147bf8cd04ccc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd5d7b2c-8196-4a4b-88e4-0053d0101a1b", "node_type": "1", "metadata": {}, "hash": "a596be14023f6645cac78c1a193405812a7a835a24b7918be2a7b462d333692a", "class_name": "RelatedNodeInfo"}}, "text": "Feel free to ask me anything about our products or brand.\"\n]\n\nHANDOFF_MESSAGE_TEMPLATE = f\"\"\"I'm sorry, I couldn't find the specific information you're looking for right now, or your request is a bit outside what I can help with. \nFor the best assistance, please contact our friendly customer support team:\n- WhatsApp: {CUSTOMER_CARE_WHATSAPP}\n- Email: {CUSTOMER_CARE_EMAIL}\nThey'll be happy to help!\"\"\"\n\ndef format_context_for_prompt(retrieved_chunks: List[Chunk]) -> str:\n    if not retrieved_chunks:\n        return \"No specific context found for this query.\"\n\n    context_str = \"CONTEXT:\\n\"\n    for i, chunk in enumerate(retrieved_chunks):\n        context_str += f\"\\n--- Context Item {i+1} ---\\n\"\n        metadata = chunk.get('metadata', {})\n        # Coba sertakan lebih banyak metadata jika relevan untuk RAG umum\n        context_str += f\"Type: {metadata.get('type', 'N/A')}\\n\"\n        if metadata.get('type') == 'product':\n            context_str += f\"Product Name: {metadata.get('product_name', 'N/A')}\\n\"\n            if 'price_idr' in metadata: \n                context_str += f\"Price: Rp{metadata['price_idr']:,}\\n\" \n            if 'volume' in metadata:\n                context_str += f\"Volume: {metadata.get('volume', 'N/A')}\\n\"\n            # Sertakan scent_keywords dan occasion_tags karena bisa relevan untuk pertanyaan umum\n            if 'scent_keywords' in metadata and metadata['scent_keywords']:\n                context_str += f\"Scent Keywords: {', '.join(metadata.get('scent_keywords', []))}\\n\"\n            if 'occasion_tags' in metadata and metadata['occasion_tags']:\n                 context_str += f\"Occasion Tags: {', '.join(metadata.get('occasion_tags', []))}\\n\"\n            if 'target_gender' in metadata:\n                context_str += f\"Target Gender: {metadata.get('target_gender')}\\n\"\n        elif metadata.get('type') == 'about_us':\n            context_str += f\"Section: {metadata.get('section', 'N/A')}\\n\"\n        elif metadata.get('type') == 'payment_guide':\n            context_str += f\"Platform: {metadata.get('platform', 'N/A')}\\n\"\n        elif metadata.get('type') == 'products_overview':\n            context_str += f\"Section: Products Overview\\n\"\n        \n        context_str += f\"Content: {chunk.get('text_content', '').strip()}\\n\"\n    context_str += \"--- END OF CONTEXT ---\\n\"\n    return context_str\n\ndef create_llm_prompt(\n    user_query: str,\n    retrieved_chunks: Optional[List[Chunk]] = None,\n    intent_type: str = \"general\", \n    conversation_history: Optional[List[Dict[str, str]]] = None\n) -> List[Dict[str, str]]:\n    messages: List[Dict[str, str]] = []\n\n    if intent_type == \"recommendation\":\n        system_message_content = SYSTEM_MESSAGE_RECOMMENDATION\n    else: \n        system_message_content = SYSTEM_MESSAGE_GENERAL\n    \n    messages.append({\"role\": \"system\", \"content\": system_message_content})\n\n    if conversation_history:\n        # Batasi histori percakapan agar tidak terlalu panjang untuk prompt\n        # Ambil N interaksi terakhir (misalnya, 4 interaksi = 2 giliran user, 2 giliran bot)\n        max_history_turns = 4 \n        if len(conversation_history) > max_history_turns:\n            messages.extend(conversation_history[-max_history_turns:])\n        else:\n            messages.extend(conversation_history)\n\n    context_str = \"\"\n    if retrieved_chunks:\n        context_str = format_context_for_prompt(retrieved_chunks)\n    \n    final_user_content = \"\"\n    if context_str and context_str != \"No specific context found for this query.\":\n        final_user_content += context_str + \"\\n\" \n    \n    final_user_content += f\"User Query: {user_query}\" \n    \n    messages.append({\"role\": \"user\", \"content\": final_user_content})\n    \n    # logger.debug(f\"Constructed LLM prompt messages: {json.dumps(messages, indent=2)}\") # Bisa sangat verbose\n    return messages\n\nif __name__ == '__main__':\n    logger.info(\"--- Testing core.prompting.py (with updated SYSTEM_MESSAGE_GENERAL) ---\")\n\n    logger.info(\"\\nSYSTEM_MESSAGE_GENERAL:\")\n    logger.info(SYSTEM_MESSAGE_GENERAL)\n\n    dummy_chunk_location_shipping = [\n        Chunk({'text_content': \"OTHER PAYMENT INFO AND CONTACT\\nFor payment inquiries or assistance, contact Customer Care:\\nAddress: Jl.", "mimetype": "text/plain", "start_char_idx": 4440, "end_char_idx": 8645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd5d7b2c-8196-4a4b-88e4-0053d0101a1b": {"__data__": {"id_": "bd5d7b2c-8196-4a4b-88e4-0053d0101a1b", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "3196b7c69e53802f99dcae042bcceeac32653aa29cc285773e0076c9a8093306", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}, "hash": "a472d29f6b7d43c7a88f156409484d41e3db2d8fe7db6c3a0a8d83aa8ba50773", "class_name": "RelatedNodeInfo"}}, "text": "A.H. Nasution 103, Bandung, Jawa Barat, Indonesia\\nWhatsApp: 0898-2323-0000\\nEmail: email@balisurfer.com\\nPayment confirmation time: 1-2 business hours\\nCheck your marketplace notifications after payment\\nShipment time 1-2 business days\\nOnly ship to Indonesia\", \n               'metadata': {'type': 'payment_guide', 'platform': 'Other', 'source': 'Bali Surver.txt'}})\n    ]\n    dummy_chunk_warranty = [\n         Chunk({'text_content': \"Product Name: Bali Surfer\u2019s Perfume - Blue Point For Him\\nWarranty: 100% money-back guarantee if packaging is damaged, bottle cracked or broken, or sprayer malfunctions; please consult admin before rating.\", \n               'metadata': {'type': 'product', 'product_name': 'Blue Point For Him'}})\n    ]\n\n    logger.info(\"\\n--- Test 1: Location Query with Context ---\")\n    query1 = \"Where are you located?\"\n    prompt1 = create_llm_prompt(user_query=query1, retrieved_chunks=dummy_chunk_location_shipping, intent_type=\"general\")\n    logger.info(f\"Generated prompt for Query 1 (first message is system, last is user):\\nSystem: {prompt1[0]['content'][:200]}...\\nUser: {prompt1[-1]['content']}\")\n\n    logger.info(\"\\n--- Test 2: Shipping Query with Context ---\")\n    query2 = \"Do you ship to USA?\"\n    prompt2 = create_llm_prompt(user_query=query2, retrieved_chunks=dummy_chunk_location_shipping, intent_type=\"general\")\n    logger.info(f\"Generated prompt for Query 2 (first message is system, last is user):\\nSystem: {prompt2[0]['content'][:200]}...\\nUser: {prompt2[-1]['content']}\")\n\n    logger.info(\"\\n--- Test 3: Return Policy Query with Context ---\")\n    query3 = \"What is your return policy?\"\n    prompt3 = create_llm_prompt(user_query=query3, retrieved_chunks=dummy_chunk_warranty, intent_type=\"general\")\n    logger.info(f\"Generated prompt for Query 3 (first message is system, last is user):\\nSystem: {prompt3[0]['content'][:200]}...\\nUser: {prompt3[-1]['content']}\")\n\n    logger.info(\"--- Finished testing core.prompting.py ---\")", "mimetype": "text/plain", "start_char_idx": 8646, "end_char_idx": 10615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83729607-4c9c-473e-a561-ed4a28d11023": {"__data__": {"id_": "83729607-4c9c-473e-a561-ed4a28d11023", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bcceba26-7544-4425-b400-ae8b7928cb80", "node_type": "1", "metadata": {}, "hash": "b86fa2ecd0bb9d1b3c7075b27cfac0112584f09f6694bb296ff30debb2c56070", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/core/quiz_manager.py\n\nimport logging\nimport random \nimport re \nfrom typing import Dict, Any, List, Optional, Tuple\n\nfrom backend.vector_store.faiss_store import vector_store_instance \n\nlogger = logging.getLogger(__name__)\n\nQUIZ_QUESTIONS: Dict[str, Dict[str, Any]] = {\n    \"q1_recipient\": {\n        \"text\": \"Awesome! Let's find your perfect Bali Surfer scent. First, who is this perfume for?\",\n        \"options\": [\n            {\"label\": \"For Me (Male)\", \"payload\": \"quiz_q1_ans_me_male\"},\n            {\"label\": \"For Me (Female)\", \"payload\": \"quiz_q1_ans_me_female\"},\n            {\"label\": \"Gift for Him\", \"payload\": \"quiz_q1_ans_gift_male\"},\n            {\"label\": \"Gift for Her\", \"payload\": \"quiz_q1_ans_gift_female\"},\n            {\"label\": \"Unisex / Anyone\", \"payload\": \"quiz_q1_ans_unisex\"}\n        ],\n        \"next_question_id\": \"q2_scent_profile\"\n    },\n    \"q2_scent_profile\": {\n        \"text\": \"Great choice! Now, what kind of scents do you (or they) usually enjoy?\",\n        \"options\": [\n            {\"label\": \"\ud83c\udf4a Fresh/Citrus\", \"payload\": \"quiz_q2_ans_fresh_citrus\"},\n            {\"label\": \"\ud83c\udf38 Floral\", \"payload\": \"quiz_q2_ans_floral\"},\n            {\"label\": \"\ud83c\udf6c Sweet/Gourmand\", \"payload\": \"quiz_q2_ans_sweet_gourmand\"},\n            {\"label\": \"\ud83c\udf32 Woody/Spicy\", \"payload\": \"quiz_q2_ans_woody_spicy\"},\n            {\"label\": \"\ud83c\udf0a Surprise Me!\", \"payload\": \"quiz_q2_ans_surprise\"}\n        ],\n        \"next_question_id\": \"q3_occasion\"\n    },\n    \"q3_occasion\": {\n        \"text\": \"Got it! And for what kind of occasion or vibe is this perfume intended?\",\n        \"options\": [\n            {\"label\": \"\ud83c\udfd6\ufe0f Everyday Casual\", \"payload\": \"quiz_q3_ans_everyday\"},\n            {\"label\": \"\ud83c\udf06 Night Out / Special\", \"payload\": \"quiz_q3_ans_special\"},\n            {\"label\": \"\ud83c\udfe2 Work/Office\", \"payload\": \"quiz_q3_ans_work\"},\n            {\"label\": \"\ud83c\udfc4 Outdoor/Beachy\", \"payload\": \"quiz_q3_ans_outdoor\"}\n        ],\n        \"next_question_id\": None \n    }\n}\n\nGENDER_MAP: Dict[str, List[str]] = {\n    \"me_male\": [\"male\", \"unisex\"], \"me_female\": [\"female\", \"unisex\"],\n    \"gift_male\": [\"male\", \"unisex\"], \"gift_her\": [\"female\", \"unisex\"], \n    \"unisex\": [\"unisex\", \"male\", \"female\"] \n}\nSCENT_KEYWORD_MAP: Dict[str, List[str]] = {\n    \"fresh_citrus\": [\"citrus\", \"oceanic\", \"marine\", \"bergamot\", \"grapefruit\", \"lemon\", \"aquatic\", \"fresh\", \"zesty\", \"crisp\", \"green\", \"aromatic\", \"sweet orange\"],\n    \"floral\": [\"rose\", \"jasmine\", \"lavender\", \"flowery\", \"floral\", \"ylang ylang\"],\n    \"sweet_gourmand\": [\"vanilla\", \"honey\", \"hazelnut\", \"almond\", \"saffron\", \"strawberry candy\", \"soursop\", \"watermelon\", \"biscuit butter\", \"peach\", \"lychee\", \"sweet\", \"candy\", \"gourmand\", \"nutty\", \"chestnut\", \"tonka bean\"],\n    \"woody_spicy\": [\"woody\", \"musky\", \"amber\", \"patchouli\", \"cedarwood\", \"oakmoss\", \"spicy\", \"warm spicy\", \"pink pepper\", \"cardamom\", \"cinnamon\", \"nutmeg\", \"sarsaparilla\", \"cedar\"],\n    \"surprise\": [] \n}\nOCCASION_TAG_MAP: Dict[str, List[str]] = {\n    \"everyday\": [\"daytime\", \"casual\", \"everyday_wear\", \"daily\", \"all_day\", \"versatile\", \"morning\", \"fresh\", \"relaxing\"],\n    \"special\": [\"evening\", \"formal\", \"special_occasion\", \"night_out\", \"night\", \"romantic\", \"elegant\", \"warm\", \"cozy\"],", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcceba26-7544-4425-b400-ae8b7928cb80": {"__data__": {"id_": "bcceba26-7544-4425-b400-ae8b7928cb80", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83729607-4c9c-473e-a561-ed4a28d11023", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "4fd418c99c2bcf2d629f265cf230ac0b3a7e1f60c2741801660cf68d847e05d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08e15406-f89e-4af2-9199-af846b12eb48", "node_type": "1", "metadata": {}, "hash": "3a990a6aac61a1dd2016dc6745ae6ee1f0040a528844785fc90835c09732fe93", "class_name": "RelatedNodeInfo"}}, "text": "\"night\", \"romantic\", \"elegant\", \"warm\", \"cozy\"],\n    \"work\": [\"work\", \"office\", \"indoor\", \"professional\", \"subtle\", \"daytime\"],\n    \"outdoor\": [\"outdoor\", \"beachy\", \"sports\", \"daytime\", \"energetic\", \"fresh\", \"adventure\", \"warm\"]\n}\nGENDER_MATCH_SCORE = 30\nSCENT_KEYWORD_MATCH_SCORE_UNIT = 5\nOCCASION_TAG_MATCH_SCORE_UNIT = 3\nRATING_BONUS_FACTOR = 1\nBEST_SELLER_THRESHOLD = 1000 \n\ndef _filter_and_rank_products(quiz_answers: Dict[str, str], all_product_chunks: List[Dict]) -> List[Tuple[float, Dict]]:\n    logger.info(f\"Filtering and ranking products based on quiz answers: {quiz_answers}\")\n    scored_products: List[Tuple[float, Dict]] = []\n    \n    user_gender_pref_key = quiz_answers.get(\"q1_recipient\")\n    user_scent_pref_key = quiz_answers.get(\"q2_scent_profile\")\n    user_occasion_pref_key = quiz_answers.get(\"q3_occasion\")\n\n    target_genders = GENDER_MAP.get(user_gender_pref_key, []) if user_gender_pref_key else []\n    if user_gender_pref_key == \"gift_female\": \n        target_genders = GENDER_MAP.get(\"gift_her\", []) \n        \n    target_scent_keywords = SCENT_KEYWORD_MAP.get(user_scent_pref_key, []) if user_scent_pref_key else []\n    target_occasion_tags = OCCASION_TAG_MAP.get(user_occasion_pref_key, []) if user_occasion_pref_key else []\n    is_surprise_me_scent = (user_scent_pref_key == \"surprise\")\n\n    for product_chunk in all_product_chunks:\n        metadata = product_chunk.get('metadata', {})\n        match_score = 0.0\n        if metadata.get('type') != 'product':\n            continue\n\n        product_gender = metadata.get('target_gender', 'unisex').lower()\n        common_scents_len = 0 \n        common_occasions_len = 0 \n\n        if target_genders:\n            if product_gender in target_genders:\n                match_score += GENDER_MATCH_SCORE\n            elif user_gender_pref_key and product_gender != \"unisex\" :\n                map_key_check = user_gender_pref_key.replace(\"me_\", \"\").replace(\"gift_\",\"\")\n                if map_key_check in GENDER_MAP and product_gender not in GENDER_MAP.get(map_key_check, []):\n                    match_score -= GENDER_MATCH_SCORE * 0.5 \n\n        if not is_surprise_me_scent and target_scent_keywords:\n            product_scents = metadata.get('scent_keywords', [])\n            common_scents = set(product_scents) & set(target_scent_keywords)\n            common_scents_len = len(common_scents)\n            match_score += common_scents_len * SCENT_KEYWORD_MATCH_SCORE_UNIT\n            if not common_scents and target_scent_keywords: \n                match_score -= SCENT_KEYWORD_MATCH_SCORE_UNIT \n\n        if target_occasion_tags:\n            product_occasions = metadata.get('occasion_tags', [])\n            common_occasions = set(product_occasions) & set(target_occasion_tags)\n            common_occasions_len = len(common_occasions)\n            match_score += common_occasions_len * OCCASION_TAG_MATCH_SCORE_UNIT\n            if not common_occasions and target_occasion_tags: \n                 match_score -= OCCASION_TAG_MATCH_SCORE_UNIT * 0.5\n\n        rating = metadata.get('rating_value', 0.0)\n        sold_count = metadata.get('sold_count', 0)\n        \n        match_score += (rating * RATING_BONUS_FACTOR)\n        \n        if sold_count > BEST_SELLER_THRESHOLD: \n            match_score += 5 \n        elif sold_count > 500: \n            match_score += 2\n        \n        logger.debug(f\"Product: {metadata.get('product_name')}, Gender: {product_gender}, Pref Genders: {target_genders}, Scent Match: {common_scents_len if not is_surprise_me_scent else 'N/A'}, Occasion Match: {common_occasions_len if target_occasion_tags else 'N/A'}, Rating: {rating}, Sold: {sold_count}, Final Score: {match_score}\")\n        \n        if match_score > 0 or (is_surprise_me_scent and user_gender_pref_key): \n            scored_products.append((match_score, product_chunk))\n        elif not target_genders and not target_scent_keywords and not target_occasion_tags: \n            scored_products.append((match_score, product_chunk)) \n\n    if is_surprise_me_scent and not scored_products and all_product_chunks:\n        logger.", "mimetype": "text/plain", "start_char_idx": 3129, "end_char_idx": 7208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08e15406-f89e-4af2-9199-af846b12eb48": {"__data__": {"id_": "08e15406-f89e-4af2-9199-af846b12eb48", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bcceba26-7544-4425-b400-ae8b7928cb80", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "5a1c71a2dc762d253bc26db168835dfd15ff6eda045d67f705c881119bb776db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5989c398-d366-49e1-8fa2-4fbe9e666b35", "node_type": "1", "metadata": {}, "hash": "fb2eb15f16bd611b0880d86e40260ba3a4cb7b03f2634aa12ae1fd172c73a518", "class_name": "RelatedNodeInfo"}}, "text": "info(\"Surprise me fallback: no initial matches, using top rated/sold general products.\")\n        for product_chunk in all_product_chunks:\n            metadata = product_chunk.get('metadata', {})\n            if metadata.get('type') != 'product': continue\n            base_score = metadata.get('rating_value', 0.0) + (metadata.get('sold_count', 0) * 0.001) \n            if target_genders: \n                 if metadata.get('target_gender', 'unisex').lower() in target_genders:\n                    scored_products.append((base_score, product_chunk))\n            else: \n                scored_products.append((base_score, product_chunk))\n\n    sorted_products_with_scores = sorted(scored_products, key=lambda item: item[0], reverse=True)\n    top_n = 3\n    top_products_with_scores = sorted_products_with_scores[:top_n]\n    \n    logger.info(f\"Top sorted products with scores ({len(top_products_with_scores)}): \"\n                f\"{[(s, p.get('metadata',{}).get('product_name')) for s, p in top_products_with_scores]}\")\n    return top_products_with_scores\n\ndef _create_carousel_data(recommended_products_with_scores: List[Tuple[float, Dict]], \n                          quiz_answers: Dict[str, str]) -> List[Dict[str, Any]]:\n    carousel_cards_data: List[Dict[str, Any]] = []\n    if not recommended_products_with_scores:\n        return carousel_cards_data\n\n    for score, product_chunk in recommended_products_with_scores:\n        metadata = product_chunk.get('metadata', {})\n        title = metadata.get('product_name', 'Unknown Perfume')\n        \n        # --- PERUBAHAN DI SINI: Gunakan image_url dari metadata jika ada, jika tidak fallback ke placeholder ---\n        actual_image_url = metadata.get('image_url') # Coba ambil URL gambar asli dari metadata\n        if actual_image_url:\n            image_url_to_use = actual_image_url\n            logger.debug(f\"Using actual image_url for {title}: {actual_image_url}\")\n        else:\n            # Fallback ke URL placeholder jika tidak ada image_url di metadata\n            image_url_to_use = f\"https://via.placeholder.com/250x250.png/0D8ABC/FFFFFF?text={title.replace(' ', '+')}\"\n            logger.debug(f\"Using placeholder image_url for {title}: {image_url_to_use}\")\n        # --- AKHIR PERUBAHAN ---\n            \n        price_idr = metadata.get('price_idr')\n        price_str = f\"Rp{price_idr:,}\" if price_idr is not None else \"Price N/A\"\n        \n        description_text = metadata.get('description_text', \"An exquisite fragrance from Bali Surfer's Perfume.\")\n        sentences = re.split(r'(?<=[.!?])\\s+', description_text)\n        subtitle = sentences[0]\n        if len(sentences) > 1 and len(subtitle) < 60 : \n            subtitle += \" \" + sentences[1]\n        \n        max_len_subtitle = 120 \n        if len(subtitle) > max_len_subtitle:\n            subtitle = subtitle[:max_len_subtitle].rsplit(' ', 1)[0] + '...' \n\n        product_identifier = re.sub(r'[^a-z0-9_]+', '', title.lower().replace(' ', '_'))\n        \n        buttons = [\n            {\"label\": \"\u2728 View Details\", \"payload\": f\"action_view_product_{product_identifier}\"},\n            {\"label\": \"\ud83d\uded2 Buy Now\", \"payload\": f\"action_buy_product_{product_identifier}\"}\n        ]\n\n        sold_count = metadata.get('sold_count', 0)\n        is_bestseller_flag = sold_count > BEST_SELLER_THRESHOLD \n        \n        card_data = {\n            \"title\": title, \n            \"image_url\": image_url_to_use, # Gunakan URL yang sudah dipilih\n            \"subtitle\": subtitle, \n            \"price\": price_str, \n            \"buttons\": buttons, \n            \"debug_score\": round(score, 2),\n            \"is_bestseller\": is_bestseller_flag \n        }\n        carousel_cards_data.append(card_data)\n    return carousel_cards_data\n\ndef start_recommendation_quiz() -> Dict[str, Any]:\n    logger.info(\"Initializing new recommendation quiz session (from quiz_manager.py).\")\n    initial_quiz_state: Dict[str, Any] = {\"active_quiz\": True, \"current_question_id\": \"q1_recipient\", \"answers\": {}}\n    first_question_id = initial_quiz_state[\"current_question_id\"]\n    question_data = QUIZ_QUESTIONS.get(first_question_id)\n    if not question_data:\n        logger.error(f\"Could not find data for initial quiz question: {first_question_id}\")\n        return {\"reply\": \"Sorry, I'm having trouble starting the recommendation quiz.", "mimetype": "text/plain", "start_char_idx": 7208, "end_char_idx": 11513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5989c398-d366-49e1-8fa2-4fbe9e666b35": {"__data__": {"id_": "5989c398-d366-49e1-8fa2-4fbe9e666b35", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08e15406-f89e-4af2-9199-af846b12eb48", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "78e48f61fbf72cd5e062d9f296be80400e5b3ffcbedaed6b783fc5d1cbfe8787", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b", "node_type": "1", "metadata": {}, "hash": "87bc9ba6b8535710902901bed5b5c0b9b744b5c708b4dacdc938e70704e951cc", "class_name": "RelatedNodeInfo"}}, "text": "Please try again later.\", \"quick_replies\": [{\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}]}\n    return {\"reply\": question_data[\"text\"], \"quick_replies\": question_data[\"options\"], \"quiz_session_data\": initial_quiz_state}\n\ndef handle_quiz_answer(payload_answer: str, current_quiz_state: Dict[str, Any]) -> Dict[str, Any]:\n    response_data: Dict[str, Any] = {\"reply\": \"\", \"quick_replies\": []} \n    question_id_answered = current_quiz_state.get(\"current_question_id\")\n    \n    extracted_answer_value = payload_answer \n    if question_id_answered:\n        answer_prefix = f\"quiz_{question_id_answered.split('_')[0]}_ans_\" \n        if payload_answer.startswith(answer_prefix):\n            extracted_answer_value = payload_answer[len(answer_prefix):]\n        else:\n            logger.warning(f\"Payload '{payload_answer}' does not match expected prefix '{answer_prefix}' for question '{question_id_answered}'. Using full payload as answer value.\")\n        \n        if not isinstance(current_quiz_state.get(\"answers\"), dict): \n            current_quiz_state[\"answers\"] = {}\n        current_quiz_state[\"answers\"][question_id_answered] = extracted_answer_value\n        logger.info(f\"Quiz answer recorded: {question_id_answered} = {extracted_answer_value}\")\n    else:\n        logger.warning(f\"Could not determine question_id_answered from state: {current_quiz_state} for payload: {payload_answer}\")\n        response_data[\"reply\"] = \"There was a slight issue with the quiz. Let's try starting over.\"\n        response_data[\"quick_replies\"] = [{\"label\": \"Restart Recommendation\", \"payload\": \"action_start_recommendation_quiz\"}]\n        response_data[\"quiz_session_data\"] = None \n        return response_data\n\n    next_question_id = QUIZ_QUESTIONS.get(question_id_answered, {}).get(\"next_question_id\")\n\n    if next_question_id and next_question_id in QUIZ_QUESTIONS: \n        current_quiz_state[\"current_question_id\"] = next_question_id\n        question_data = QUIZ_QUESTIONS[next_question_id]\n        response_data[\"reply\"] = question_data[\"text\"]\n        response_data[\"quick_replies\"] = question_data[\"options\"]\n        response_data[\"quiz_session_data\"] = current_quiz_state \n        logger.debug(f\"Next quiz question: {next_question_id}. Current state: {current_quiz_state}\")\n    else: \n        current_quiz_state[\"active_quiz\"] = False \n        current_quiz_state[\"current_question_id\"] = None \n        final_answers = current_quiz_state.get(\"answers\", {})\n        logger.info(f\"Quiz finished. Final answers: {final_answers}\")\n        \n        answers_summary_parts = []\n        if final_answers.get(\"q1_recipient\"):\n            answers_summary_parts.append(f\"- Q1 Recipient: {final_answers['q1_recipient'].replace('_', ' ').title()}\")\n        if final_answers.get(\"q2_scent_profile\"):\n            answers_summary_parts.append(f\"- Q2 Scent Profile: {final_answers['q2_scent_profile'].replace('_', ' ').title()}\")\n        if final_answers.get(\"q3_occasion\"):\n            answers_summary_parts.append(f\"- Q3 Occasion: {final_answers['q3_occasion'].replace('_', ' ').title()}\")\n        \n        answers_summary = \"\\n\".join(answers_summary_parts)\n        base_reply_text = f\"Thanks for completing the quiz! Here are your preferences:\\n{answers_summary}\\n\\n\"\n        \n        all_chunks_from_store = vector_store_instance.chunk_map\n        all_product_chunks: List[Dict] = []\n        if all_chunks_from_store:\n            all_product_chunks = [chunk for chunk in all_chunks_from_store if chunk.get('metadata', {}).get('type') == 'product']\n        else:\n            logger.error(\"CHUNK_MAP IS NOT LOADED OR EMPTY IN VECTOR_STORE_INSTANCE! Cannot get product recommendations.\")\n\n        if not all_product_chunks:\n            logger.warning(\"No product chunks available to filter for recommendations.\")\n            response_data[\"reply\"] = base_reply_text + \"However, I'm having trouble accessing our product catalog right now to make recommendations. Please try again shortly or contact support.\"", "mimetype": "text/plain", "start_char_idx": 11514, "end_char_idx": 15507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b": {"__data__": {"id_": "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5989c398-d366-49e1-8fa2-4fbe9e666b35", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "a18108b895e7836bd1d8d86fca037fab07c8d2b29c9d12a3ab0f874e7d16bac9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4703fd7f-a415-4ff4-9d17-c75b1eef3a44", "node_type": "1", "metadata": {}, "hash": "f72e39884812e502d95b4416e3ce8146bade1f743357a81905ce23d9cc0d4def", "class_name": "RelatedNodeInfo"}}, "text": "Please try again shortly or contact support.\"\n            response_data[\"quiz_session_data\"] = None \n        else:\n            recommended_products_with_scores = _filter_and_rank_products(final_answers, all_product_chunks)\n            \n            if recommended_products_with_scores:\n                carousel_data = _create_carousel_data(recommended_products_with_scores, final_answers)\n                if carousel_data:\n                    response_data[\"reply\"] = base_reply_text + \"Based on these, I recommend checking out:\"\n                    response_data[\"carousel_cards\"] = carousel_data \n                else: \n                    product_names = [p.get('metadata',{}).get('product_name', 'Unknown Product') for score, p in recommended_products_with_scores]\n                    response_data[\"reply\"] = base_reply_text + \\\n                                             f\"I recommend checking out:\\n- \" + \"\\n- \".join(product_names) + \\\n                                             \"\\n\\n(I had trouble showing product cards right now.)\"\n            else: \n                response_data[\"reply\"] = base_reply_text + \\\n                                         \"I couldn't find a perfect match with those specific criteria right now. \" \\\n                                         \"Would you like to try the quiz again with different options?\"\n        \n        response_data[\"quick_replies\"] = [\n            {\"label\": \"Start a New Quiz\", \"payload\": \"action_start_recommendation_quiz\"},\n            {\"label\": \"\u21a9\ufe0f Main Menu\", \"payload\": \"action_main_menu\"}\n        ]\n        response_data[\"quiz_session_data\"] = None \n    return response_data\n\ndef get_active_quiz_question_details(current_quiz_state: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n    if not current_quiz_state.get(\"active_quiz\"):\n        return None\n    active_question_id = current_quiz_state.get(\"current_question_id\")\n    if active_question_id and active_question_id in QUIZ_QUESTIONS:\n        return QUIZ_QUESTIONS[active_question_id]\n    logger.warning(f\"get_active_quiz_question_details: Invalid active_question_id '{active_question_id}' in state.\")\n    return None\n\nif __name__ == '__main__':\n    if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n        logging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    \n    logger.info(\"--- Testing quiz_manager.py (using actual image_url from metadata if available) ---\")\n    \n    # Mock vector_store_instance.chunk_map dengan beberapa produk memiliki image_url dan beberapa tidak\n    if not hasattr(vector_store_instance, 'chunk_map') or not vector_store_instance.chunk_map:\n        logger.info(\"Mocking vector_store_instance.chunk_map for quiz_manager.py test\")\n        vector_store_instance.chunk_map = [\n            {\"metadata\": {\"type\": \"product\", \"product_name\": \"Ocean Breeze (Best Seller)\", \"target_gender\": \"unisex\", \n                          \"scent_keywords\": [\"citrus\", \"marine\", \"fresh\"], \"occasion_tags\": [\"daytime\", \"outdoor\"], \n                          \"price_idr\": 200000, \"description_text\": \"A very fresh ocean breeze.\", \n                          \"sold_count\": 6000, \"rating_value\": 4.8, \n                          \"image_url\": \"https://example.com/ocean_breeze.jpg\"}}, # URL Asli\n            {\"metadata\": {\"type\": \"product\", \"product_name\": \"Sunset Floral\", \"target_gender\": \"female\", \n                          \"scent_keywords\": [\"floral\", \"rose\", \"jasmine\"], \"occasion_tags\": [\"evening\", \"romantic\"], \n                          \"price_idr\": 250000, \"description_text\": \"Romantic sunset floral notes.\", \n                          \"sold_count\": 800, \"rating_value\": 4.7,\n                          \"image_url\": None }}, # Tidak ada URL asli, akan pakai placeholder\n            {\"metadata\": {\"type\": \"product\", \"product_name\": \"Woodsman (Popular)\", \"target_gender\": \"male\", \n                          \"scent_keywords\": [\"woody\", \"cedar\", \"spicy\"], \"occasion_tags\": [\"evening\", \"formal\"], \n                          \"price_idr\": 220000, \"description_text\": \"Strong and woody.", "mimetype": "text/plain", "start_char_idx": 15462, "end_char_idx": 19562, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4703fd7f-a415-4ff4-9d17-c75b1eef3a44": {"__data__": {"id_": "4703fd7f-a415-4ff4-9d17-c75b1eef3a44", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "920623a3-837c-4701-a871-88012d6549df", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "6aef6e1ab09fd1c65d5d216187e04dd1b3354de7901bd3bc3fabae471b949e7d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "b983dccf7265752f4b44c6d61d9ae92ea872523655455685ca5ead426a932fd8", "class_name": "RelatedNodeInfo"}}, "text": "\", \n                          \"sold_count\": 1500, \"rating_value\": 4.9,\n                          \"image_url\": \"https://example.com/woodsman.jpg\"}}, # URL Asli\n        ]\n\n    test_quiz_answers = {\"q1_recipient\": \"unisex\", \"q2_scent_profile\": \"surprise\", \"q3_occasion\": \"everyday\"}\n    \n    logger.info(f\"\\n--- Testing Filter for: {test_quiz_answers} ---\")\n    recommendations_with_scores = _filter_and_rank_products(test_quiz_answers, vector_store_instance.chunk_map) \n    \n    logger.info(f\"\\n--- Testing Carousel Data Generation (with actual/placeholder image_url) ---\")\n    if recommendations_with_scores:\n        carousel_data_generated = _create_carousel_data(recommendations_with_scores, test_quiz_answers)\n        import json\n        logger.info(f\"Generated Carousel Data:\\n{json.dumps(carousel_data_generated, indent=2)}\")\n        \n        for card in carousel_data_generated:\n            assert \"image_url\" in card, f\"Field 'image_url' missing in card: {card.get('title')}\"\n            if card[\"title\"] == \"Ocean Breeze (Best Seller)\":\n                 assert card[\"image_url\"] == \"https://example.com/ocean_breeze.jpg\"\n            elif card[\"title\"] == \"Sunset Floral\":\n                 assert \"via.placeholder.com\" in card[\"image_url\"] # Harusnya pakai placeholder\n            elif card[\"title\"] == \"Woodsman (Popular)\":\n                assert card[\"image_url\"] == \"https://example.com/woodsman.jpg\"\n    else:\n        logger.info(\"No recommendations from filter to create carousel data.\")\n        \n    logger.info(\"\\n--- Finished testing quiz_manager.py ---\")", "mimetype": "text/plain", "start_char_idx": 19562, "end_char_idx": 21131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f81178f8-36c3-4766-9d0d-ac39d1b3b0a3": {"__data__": {"id_": "f81178f8-36c3-4766-9d0d-ac39d1b3b0a3", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8190836a-fef3-42e0-bffd-cc6f7213200f", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "f5b9728e2e434970c4c94275c5df03ea445d9bb3a6531e540c836a37f5500479", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6524d622-7068-4f33-99ff-fc410f06b0b7", "node_type": "1", "metadata": {}, "hash": "62fedd546aab40db4b14e12f3b228d9bdd4eeb23f5cfeb91c04dc55056bbda4b", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging\nfrom typing import List, Optional, Any # Pastikan List, Optional, Any diimpor\n\n# Menyesuaikan sys.path agar bisa impor dari direktori backend\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.config import TOP_K_CHUNKS # Jumlah chunk default yang akan diambil\n    from backend.utils.logging_config import setup_logging\n    from backend.core.embedding import get_query_embedding # Fungsi untuk embed query\n    from backend.vector_store.faiss_store import vector_store_instance # Instance FAISS store kita\n    from backend.data.chunking import Chunk # Tipe data Chunk\nexcept ImportError as e:\n    print(f\"Error importing backend modules in core/retrieval.py: {e}\")\n    # Fallback untuk pengujian mandiri jika struktur package belum sepenuhnya dikenali\n    if 'Chunk' not in globals():\n        class Chunk(dict): pass\n    if 'TOP_K_CHUNKS' not in globals():\n        TOP_K_CHUNKS = 3\n    if 'get_query_embedding' not in globals():\n        def get_query_embedding(query_text: str) -> Optional[List[float]]: return None\n    if 'vector_store_instance' not in globals():\n        class MockVectorStore:\n            _loaded = False\n            def load(self): self._loaded = True; return True\n            def search(self, query_embedding: List[float], k: int) -> List[Chunk]: return []\n        vector_store_instance = MockVectorStore()\n    if 'setup_logging' not in globals():\n        def setup_logging(level=logging.INFO): logging.basicConfig(level=level)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1635, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6524d622-7068-4f33-99ff-fc410f06b0b7": {"__data__": {"id_": "6524d622-7068-4f33-99ff-fc410f06b0b7", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8190836a-fef3-42e0-bffd-cc6f7213200f", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "f5b9728e2e434970c4c94275c5df03ea445d9bb3a6531e540c836a37f5500479", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f81178f8-36c3-4766-9d0d-ac39d1b3b0a3", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "b9d98e4a8aa390efadc878ff13398a118ce23ac4f2e0cf9643e27951f5e53db3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a98ebc3e-8daa-4621-9f0d-90953a85787b", "node_type": "1", "metadata": {}, "hash": "9fff29ff6262424e70c95d25351b7be6fd4c750f5b5efbe987bcc1b6904519f1", "class_name": "RelatedNodeInfo"}}, "text": "logger = logging.getLogger(__name__)\n\ndef retrieve_relevant_chunks(user_query: str, k: Optional[int] = None) -> List[Chunk]:\n    \"\"\"\n    Retrieves the top k relevant chunks from the vector store for a given user query.\n\n    Args:\n        user_query: The raw text query from the user.\n        k: The number of top chunks to retrieve. If None, uses TOP_K_CHUNKS from config.\n\n    Returns:\n        A list of Chunk objects that are most relevant to the query.\n        Returns an empty list if no relevant chunks are found or an error occurs.\n    \"\"\"\n    if not user_query or not user_query.strip():\n        logger.warning(\"Received empty or whitespace-only user query for retrieval.\")\n        return []\n\n    num_to_retrieve = k if k is not None and k > 0 else TOP_K_CHUNKS\n    logger.info(f\"Attempting to retrieve top {num_to_retrieve} chunks for query: \\\"{user_query[:70].replace(os.linesep, ' ')}...\\\"\")\n\n    # Langkah 1: Dapatkan Query Embedding\n    logger.debug(\"Getting query embedding...\")\n    query_vector = get_query_embedding(user_query)\n\n    if not query_vector:\n        logger.error(f\"Failed to get embedding for query: \\\"{user_query}\\\". Cannot perform retrieval.\")\n        return []\n    logger.debug(f\"Successfully obtained query embedding. Dimension: {len(query_vector)}\")\n\n    # Langkah 2: Lakukan Pencarian di Vector Store\n    # Pastikan vector store sudah di-load. Metode search di faiss_store.py akan mencoba load jika belum.\n    if not vector_store_instance._loaded: # Cek flag _loaded dari instance\n        logger.info(\"Vector store not yet loaded. Attempting to load now for retrieval...\")\n        if not vector_store_instance.load():\n            logger.error(\"Failed to load vector store. Cannot perform retrieval.\")\n            return []\n            \n    logger.debug(f\"Searching vector store with k={num_to_retrieve}...\")\n    try:\n        relevant_chunks = vector_store_instance.search(query_embedding=query_vector, k=num_to_retrieve)\n    except Exception as e:\n        logger.error(f\"An exception occurred during vector store search: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return []\n\n    # Langkah 3: Proses Hasil Retrieval\n    if relevant_chunks:\n        logger.info(f\"Successfully retrieved {len(relevant_chunks)} relevant chunks.\")\n        for i, r_chunk in enumerate(relevant_chunks):\n            logger.debug(f\"  Retrieved chunk {i+1} - Type: {r_chunk.get('metadata', {}).get('type')}, Name: {r_chunk.get('metadata', {}).get('product_name', 'N/A')}, Text: \\\"{r_chunk.get('text_content', '')[:50].replace(os.linesep, ' ')}...\\\"\")\n    else:\n        logger.info(\"No relevant chunks found for the query.\")\n        \n    return relevant_chunks\n\nif __name__ == '__main__':\n    # Setup logging untuk pengujian mandiri modul ini\n    if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n        setup_logging(level=logging.DEBUG)\n\n    logger.info(\"--- Testing core.retrieval.py ---\")\n\n    # Penting: Pastikan vector store sudah di-load sebelum pengujian\n    # Jika vector_store_instance.load() tidak dipanggil di __init__ atau saat impor,\n    # kita perlu memanggilnya di sini.\n    if not vector_store_instance._loaded:\n        logger.info(\"Loading vector store for testing retrieval.py...\")\n        if not vector_store_instance.load():\n            logger.error(\"FATAL: Could not load vector store. Aborting test.\")\n            sys.exit(1) # Keluar jika store tidak bisa dimuat\n        logger.info(\"Vector store loaded successfully for testing.\")\n    else:\n        logger.info(\"Vector store already loaded.\")", "mimetype": "text/plain", "start_char_idx": 1638, "end_char_idx": 5241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a98ebc3e-8daa-4621-9f0d-90953a85787b": {"__data__": {"id_": "a98ebc3e-8daa-4621-9f0d-90953a85787b", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8190836a-fef3-42e0-bffd-cc6f7213200f", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "f5b9728e2e434970c4c94275c5df03ea445d9bb3a6531e540c836a37f5500479", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6524d622-7068-4f33-99ff-fc410f06b0b7", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "550243802845e459d3cf722f77c541409475516070bc2bc6aac50c60f216a859", "class_name": "RelatedNodeInfo"}}, "text": "test_queries = [\n        \"Tell me about Blue Point For Him perfume\",\n        \"What are the payment options on Tokopedia?\",\n        \"Are your products vegan and cruelty-free?\",\n        \"I am looking for a perfume with pineapple notes\",\n        \"recommend a perfume for evening wear\" # Ini akan menguji seberapa baik retrieval untuk rekomendasi\n    ]\n\n    for query in test_queries:\n        logger.info(f\"\\n--- Testing retrieval for query: \\\"{query}\\\" ---\")\n        retrieved = retrieve_relevant_chunks(query, k=TOP_K_CHUNKS) # Menggunakan TOP_K_CHUNKS dari config\n        \n        if retrieved:\n            logger.info(f\"Found {len(retrieved)} chunks:\")\n            for i, chunk_item in enumerate(retrieved):\n                metadata = chunk_item.get('metadata', {})\n                text_preview = chunk_item.get('text_content', '')[:100].replace(os.linesep, ' ')\n                logger.info(f\"  Result {i+1}:\")\n                logger.info(f\"    Metadata: {metadata}\")\n                logger.info(f\"    Text: \\\"{text_preview}...\\\"\")\n        else:\n            logger.info(\"  No chunks retrieved for this query.\")\n        logger.info(\"--------------------------------------\")\n        # time.sleep(1) # Jeda jika ada banyak query tes dan API embedding punya rate limit\n\n    logger.info(\"--- Finished testing core.retrieval.py ---\")", "mimetype": "text/plain", "start_char_idx": 5248, "end_char_idx": 6575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95a615df-39a3-4140-a176-5eba9e924c53": {"__data__": {"id_": "95a615df-39a3-4140-a176-5eba9e924c53", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc5bbe72-2a35-4d27-95c5-5c463624f996", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "75b88132795e7d976768650de4bc67b722b04dc29108d7612ec69f70635945c4", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8db0f441-d843-406c-9438-1b9a4969a470": {"__data__": {"id_": "8db0f441-d843-406c-9438-1b9a4969a470", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99c54870-df71-4cb0-b702-070027838d28", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "f13f77ac3ca161693d812f7997f1160250955e99f482ed029f2786a322bce4b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c71a61f-edda-4ff5-b258-01ceac7ee63d", "node_type": "1", "metadata": {}, "hash": "d26472ac851f14ec104132e0b3e88da9e3c113afb1247ce5f95b1ad4080b5a71", "class_name": "RelatedNodeInfo"}}, "text": "# File: backend/data/chunking.py\n\nimport re\nimport logging\nfrom typing import List, Dict, Any, TypedDict, Optional, Set\nimport os \n\n# Impor dari modul lain di backend\ntry:\n    from backend.utils.logging_config import setup_logging\nexcept ImportError:\n    import sys\n    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n    if project_root not in sys.path:\n        sys.path.insert(0, project_root)\n    from backend.utils.logging_config import setup_logging\n\nif not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n    setup_logging(level=logging.DEBUG) \n\nlogger = logging.getLogger(__name__)\n\nclass Chunk(TypedDict):\n    text_content: str\n    metadata: Dict[str, Any]\n\ndef extract_product_metadata(product_block: str) -> Dict[str, Any]:\n    \"\"\"\n    Extracts structured metadata from a product text block.\n    DIPERBARUI untuk mengekstrak Tokopedia URL, target_gender, scent_keywords, occasion_tags,\n    DAN SEKARANG JUGA IMAGE URL.\n    \"\"\"\n    metadata = {'type': 'product'}\n    \n    name_match = re.search(r\"Product Name: Bali Surfer\u2019s Perfume - (.+)\", product_block)\n    if name_match:\n        metadata['product_name'] = name_match.group(1).strip()\n    else: \n        name_match_simple = re.search(r\"Product Name:\\s*(.+)\", product_block)\n        if name_match_simple:\n             metadata['product_name'] = name_match_simple.group(1).strip()\n\n    sold_match = re.search(r\"Sold: ([\\d,]+)\\+\", product_block)\n    if sold_match:\n        try: metadata['sold_count'] = int(sold_match.group(1).replace(',', ''))\n        except ValueError: logger.warning(f\"Could not parse sold count for product: {metadata.get('product_name', 'Unknown')}\")\n\n    rating_match = re.search(r\"Rating: ([\\d\\.]+) \\((\\d{1,3}(?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c71a61f-edda-4ff5-b258-01ceac7ee63d": {"__data__": {"id_": "7c71a61f-edda-4ff5-b258-01ceac7ee63d", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99c54870-df71-4cb0-b702-070027838d28", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "f13f77ac3ca161693d812f7997f1160250955e99f482ed029f2786a322bce4b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8db0f441-d843-406c-9438-1b9a4969a470", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "26bedaedaaeea5bf357832ca30ea2b89a6a0efddcb9c345fc6d74036b4e6e147", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c150e08-3886-4704-b67d-dce89e211539", "node_type": "1", "metadata": {}, "hash": "795ef15bde831c3a0c853a2f3691c99c36de4082491cb84253a8e793c09833d2", "class_name": "RelatedNodeInfo"}}, "text": "]+) \\((\\d{1,3}(?:,\\d{3})*|\\d+) ratings\\)\", product_block)\n    if rating_match:\n        try:\n            metadata['rating_value'] = float(rating_match.group(1))\n            metadata['rating_count'] = int(rating_match.group(2).replace(',', ''))\n        except ValueError: logger.warning(f\"Could not parse rating for product: {metadata.get('product_name', 'Unknown')}\")\n            \n    price_match = re.search(r\"Price: Rp([\\d,]+)\", product_block)\n    if price_match:\n        try: metadata['price_idr'] = int(price_match.group(1).replace(',', ''))\n        except ValueError: logger.warning(f\"Could not parse price for product: {metadata.get('product_name', 'Unknown')}\")\n\n    volume_match = re.search(r\"Volume: (\\d+ ml) Eau de Parfum\", product_block)\n    if volume_match: metadata['volume'] = volume_match.group(1)\n    else: \n        volume_match_simple = re.search(r\"Volume: (\\d+ ml)\", product_block)\n        if volume_match_simple: metadata['volume'] = volume_match_simple.group(1)\n\n    scent_match = re.search(r\"Scent Profile:\\s*(.+)\", product_block, re.IGNORECASE)\n    if scent_match:\n        scent_string = scent_match.group(1).strip()\n        metadata['scent_keywords'] = sorted(list(set([s.strip().lower() for s in scent_string.split(',') if s.strip()])))\n    else: metadata['scent_keywords'] = []\n        \n    target_gender_value = \"unisex\" \n    target_match = re.search(r\"Target:\\s*(.+)\", product_block, re.IGNORECASE)\n    if target_match:\n        target_str = target_match.group(1).strip().lower()\n        if \"for him\" in target_str or \"male\" in target_str: target_gender_value = \"male\"\n        elif \"for her\" in target_str or \"female\" in target_str: target_gender_value = \"female\"\n        elif \"unisex\" in target_str: target_gender_value = \"unisex\"\n        elif \"unspecified\" in target_str: target_gender_value = \"unisex\" \n    metadata['target_gender'] = target_gender_value\n\n    all_occasion_tags: Set[str] = set() \n    occasion_match_explicit = re.search(r\"Occasion:\\s*(.+)\", product_block, re.IGNORECASE)\n    if occasion_match_explicit:\n        occasion_str = occasion_match_explicit.group(1).strip()\n        tags = [tag.strip().lower() for tag in re.split(r',|\\s+and\\s+|\\s+&\\s+', occasion_str) if tag.strip()]\n        all_occasion_tags.update(tags)\n    suggested_occasion_match = re.search(r\"Suggested Occasion:\\s*(.+)\", product_block, re.IGNORECASE)\n    if suggested_occasion_match:\n        suggested_str = suggested_occasion_match.group(1).strip()\n        tags = [tag.strip().lower() for tag in suggested_str.split(',') if tag.strip()]\n        all_occasion_tags.update(tags)\n    metadata['occasion_tags'] = sorted(list(all_occasion_tags)) if all_occasion_tags else []\n\n    tokopedia_url_match = re.search(r\"Tokopedia URL:\\s*(https?://[^\\s]+)\", product_block, re.IGNORECASE)\n    if tokopedia_url_match:\n        metadata['tokopedia_url'] = tokopedia_url_match.group(1).strip()\n    else:\n        metadata['tokopedia_url'] = None \n\n    metadata['shopee_url'] = None \n\n    # --- PERUBAHAN DI SINI: Ekstrak Image URL ---\n    image_url_match = re.search(r\"Image URL:\\s*(https?://[^\\s]+)\", product_block, re.IGNORECASE)\n    if image_url_match:\n        metadata['image_url'] = image_url_match.group(1).strip()\n    else:\n        metadata['image_url'] = None # Atau string kosong jika preferensi\n    # --- AKHIR PERUBAHAN ---\n\n    certification_match = re.search(r\"Certification:\\s*(.+)\", product_block, re.IGNORECASE)\n    if certification_match: metadata['certification'] = certification_match.group(1).strip()\n        \n    made_in_match = re.search(r\"Made in:\\s*(.+)\", product_block, re.IGNORECASE)\n    if made_in_match: metadata['made_in'] = made_in_match.group(1).strip()\n\n    warranty_match = re.search(r\"Warranty:\\s*(.+?", "mimetype": "text/plain", "start_char_idx": 1756, "end_char_idx": 5485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c150e08-3886-4704-b67d-dce89e211539": {"__data__": {"id_": "6c150e08-3886-4704-b67d-dce89e211539", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99c54870-df71-4cb0-b702-070027838d28", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "f13f77ac3ca161693d812f7997f1160250955e99f482ed029f2786a322bce4b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c71a61f-edda-4ff5-b258-01ceac7ee63d", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "772fb5961f0f092ba2777c9a4ff2b4cfc70ecc06c77dcf1c902bc47678972d12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00fd73f5-5005-47e1-bd54-f20f9d917a12", "node_type": "1", "metadata": {}, "hash": "fbbc5537c0d699120b9a8edf18b03d511dd93a098e654d84db154296c28a4385", "class_name": "RelatedNodeInfo"}}, "text": ")(?=\\n\\s*\\w+:\\s*|$)\", product_block, re.DOTALL | re.IGNORECASE)\n    if warranty_match: metadata['warranty'] = warranty_match.group(1).strip().replace('\\n', ' ')\n    \n    description_match = re.search(r\"Description:\\s*(.+?)(?=\\n\\s*\\w+:\\s*|$)\", product_block, re.DOTALL | re.IGNORECASE)\n    if description_match: metadata['description_text'] = description_match.group(1).strip().replace('\\n', ' ')\n\n    return metadata\n\ndef chunk_text_content(full_text: str) -> List[Chunk]:\n    chunks: List[Chunk] = []\n    if not full_text: logger.warning(\"Received empty text content for chunking.\"); return chunks\n    sections = re.split(r'(?=^ABOUT US\\b|^OUR PRODUCTS\\b|^PAYMENT GUIDE\\b)', full_text, flags=re.MULTILINE | re.IGNORECASE)\n    for section_text in sections:\n        section_text = section_text.strip()\n        if not section_text: continue\n        logger.debug(f\"Processing section starting with: {section_text[:50].replace(os.linesep, ' ')}...\")\n        if re.match(r\"ABOUT US\", section_text, re.IGNORECASE):\n            story_match = re.search(r\"Our Story\\n(.*?)(?=\\nOur Mission|\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            mission_match = re.search(r\"Our Mission\\n(.*?)(?=\\nOur Values|\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            values_match = re.search(r\"Our Values\\n(.*?)(?=\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            if story_match and story_match.group(1).strip(): chunks.append({'text_content': f\"Our Story\\n{story_match.group(1).strip()}\", 'metadata': {'type': 'about_us', 'section': 'Our Story', 'source': 'Bali Surver.txt'}})\n            if mission_match and mission_match.group(1).strip(): chunks.append({'text_content': f\"Our Mission\\n{mission_match.group(1).strip()}\", 'metadata': {'type': 'about_us', 'section': 'Our Mission', 'source': 'Bali Surver.txt'}})\n            if values_match and values_match.group(1).strip(): chunks.append({'text_content': f\"Our Values\\n{values_match.group(1).strip()}\", 'metadata': {'type': 'about_us', 'section': 'Our Values', 'source': 'Bali Surver.txt'}})\n        elif re.match(r\"OUR PRODUCTS\", section_text, re.IGNORECASE):\n            product_list_start_match = re.search(r\"\\n\\d+\\.\\s*Product Name:\", section_text)\n            overview_text = section_text; product_blocks_text = \"\"\n            if product_list_start_match:\n                overview_end_index = product_list_start_match.start()\n                overview_text = section_text[:overview_end_index].strip()\n                product_blocks_text = section_text[overview_end_index:].strip()\n            if overview_text and overview_text.lower().strip() != \"our products\":\n                chunks.append({'text_content': overview_text, 'metadata': {'type': 'products_overview', 'source': 'Bali Surver.txt'}})\n            individual_product_blocks = re.split(r'(?=\\n?\\d*\\.?\\s*Product Name:)', product_blocks_text)\n            first_block = True \n            for product_block in individual_product_blocks:\n                product_block = product_block.strip()\n                if not product_block:\n                    if first_block: first_block = False; continue\n                if first_block and product_block.lower().startswith(\"our products\"): first_block = False; continue\n                first_block = False\n                if not re.match(r\"(\\d+\\.\\s*)?Product Name:\", product_block, re.IGNORECASE):\n                    logger.debug(f\"Skipping non-product block in OUR PRODUCTS: {product_block[:100].replace(os.linesep, ' ')}...\")\n                    continue\n                logger.debug(f\"Found product block: {product_block[:70].replace(os.linesep, ' ')}...\")\n                metadata = extract_product_metadata(product_block)\n                metadata['source'] = 'Bali Surver.txt' \n                chunks.append({'text_content': product_block, 'metadata': metadata})\n        elif re.match(r\"PAYMENT GUIDE\", section_text, re.IGNORECASE):\n            tokopedia_match = re.search(r\"TOKOPEDIA\\n(.*?)(?=\\nSHOPEE|\\nOTHER|\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            shopee_match = re.search(r\"SHOPEE\\n(.*?", "mimetype": "text/plain", "start_char_idx": 5485, "end_char_idx": 9555, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00fd73f5-5005-47e1-bd54-f20f9d917a12": {"__data__": {"id_": "00fd73f5-5005-47e1-bd54-f20f9d917a12", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99c54870-df71-4cb0-b702-070027838d28", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "f13f77ac3ca161693d812f7997f1160250955e99f482ed029f2786a322bce4b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c150e08-3886-4704-b67d-dce89e211539", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "549ce98489c08906acc6deaf9efec0001a38fb3c69e376e9fb5267697a436f83", "class_name": "RelatedNodeInfo"}}, "text": ")(?=\\nOTHER|\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            other_match = re.search(r\"OTHER\\n(.*?)(?=\\Z)\", section_text, re.DOTALL | re.IGNORECASE)\n            if tokopedia_match and tokopedia_match.group(1).strip(): chunks.append({'text_content': f\"TOKOPEDIA\\n{tokopedia_match.group(1).strip()}\", 'metadata': {'type': 'payment_guide', 'platform': 'Tokopedia', 'source': 'Bali Surver.txt'}})\n            if shopee_match and shopee_match.group(1).strip(): chunks.append({'text_content': f\"SHOPEE\\n{shopee_match.group(1).strip()}\", 'metadata': {'type': 'payment_guide', 'platform': 'Shopee', 'source': 'Bali Surver.txt'}})\n            if other_match and other_match.group(1).strip(): chunks.append({'text_content': f\"OTHER PAYMENT INFO AND CONTACT\\n{other_match.group(1).strip()}\", 'metadata': {'type': 'payment_guide', 'platform': 'Other', 'source': 'Bali Surver.txt'}})\n    logger.info(f\"Generated {len(chunks)} chunks from the source text.\")\n    return chunks\n\nif __name__ == '__main__':\n    try:\n        from backend.data.loader import load_source_data\n    except ImportError:\n        import sys\n        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n        if project_root not in sys.path: sys.path.insert(0, project_root)\n        from backend.data.loader import load_source_data\n\n    logger.info(\"--- Testing data.chunking.py (with Image URL extraction) ---\")\n    full_content = load_source_data() # Pastikan Bali Surver.txt sudah ada Image URL\n    if full_content:\n        generated_chunks = chunk_text_content(full_text=full_content)\n        logger.info(f\"Total chunks generated: {len(generated_chunks)}\")\n        product_chunks_count = 0\n        found_image_urls = 0\n        for i, chunk_item in enumerate(generated_chunks):\n            if chunk_item['metadata'].get('type') == 'product':\n                product_chunks_count += 1\n                if chunk_item['metadata'].get('image_url'):\n                    found_image_urls +=1\n                if product_chunks_count <= 3 or chunk_item['metadata'].get('product_name') == \"Blue Point For Him\": \n                    logger.info(f\"\\n--- Product Chunk Example ---\")\n                    logger.info(f\"Product Name: {chunk_item['metadata'].get('product_name')}\")\n                    logger.info(f\"Tokopedia URL: {chunk_item['metadata'].get('tokopedia_url')}\")\n                    logger.info(f\"Image URL: {chunk_item['metadata'].get('image_url')}\") # Cetak Image URL\n        logger.info(f\"\\nTotal product chunks found: {product_chunks_count}\")\n        logger.info(f\"Product chunks with Image URL found: {found_image_urls}\")\n        if product_chunks_count != 17:\n             logger.warning(f\"Expected 17 product chunks, but found {product_chunks_count}.\")\n        if found_image_urls != product_chunks_count and found_image_urls != 0 : # Toleransi jika belum semua ada URL\n             logger.warning(f\"Not all product chunks have an Image URL. Found: {found_image_urls}/{product_chunks_count}\")\n        elif found_image_urls == 0 and product_chunks_count > 0:\n            logger.error(\"No Image URLs were extracted from product chunks. Check 'Image URL:' format in source file and regex.\")\n\n    else: logger.error(\"Could not load source data, so chunking was not performed.\")\n    logger.info(\"--- Finished testing data.chunking.py ---\")", "mimetype": "text/plain", "start_char_idx": 9555, "end_char_idx": 12906, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "558fdebe-9bcc-4337-b186-00f9d28f596c": {"__data__": {"id_": "558fdebe-9bcc-4337-b186-00f9d28f596c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e911ecec-728b-4d37-ae47-9c0243536c51", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "3855448a743c2af9285e67c105743a4c1062b6350cdf8c6cc8fa3b91028804c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b8a309e-c71a-4f71-bc01-74d98e023f8e", "node_type": "1", "metadata": {}, "hash": "8c7dadc9e3965836c698e10c1026bda84f6459df5d7b05ce6d4963dca442e2d1", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport logging\n\n# Impor konfigurasi dan setup logging dari modul utils\n# Kita perlu menyesuaikan path impor berdasarkan struktur direktori\n# Jika loader.py ada di backend/data/, dan config.py ada di backend/utils/\n# maka kita bisa menggunakan impor relatif atau menambahkan backend ke sys.path jika perlu,\n# namun cara paling bersih adalah memastikan struktur package Anda benar.\n# Untuk struktur kita, kita bisa mengimpor dari package 'backend' jika dijalankan dari root.\n# Atau, jika dijalankan sebagai skrip, kita perlu sedikit trik untuk path.\n# Mari kita asumsikan struktur package yang benar untuk impor.\ntry:\n    from backend.utils.config import SOURCE_TEXT_FILE_PATH\n    from backend.utils.logging_config import setup_logging\nexcept ImportError:\n    # Fallback jika dijalankan sebagai skrip utama dan 'backend' belum ada di sys.path\n    # Ini sering terjadi saat pengujian modul individual\n    import sys\n    # Tambahkan direktori 'backend' ke sys.path agar bisa impor utils.config\n    # __file__ adalah path ke loader.py (.../backend/data/loader.py)\n    # os.path.dirname(__file__) -> .../backend/data\n    # os.path.dirname(os.path.dirname(__file__)) -> .../backend\n    # os.path.dirname(os.path.dirname(os.path.dirname(__file__))) -> .../ (root proyek, satu level di atas backend)\n    # Kita ingin menambahkan direktori root proyek agar bisa impor 'backend.utils.config'\n    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n    if project_root not in sys.path:\n        sys.path.insert(0, project_root)\n    from backend.utils.config import SOURCE_TEXT_FILE_PATH\n    from backend.utils.logging_config import setup_logging", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1682, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b8a309e-c71a-4f71-bc01-74d98e023f8e": {"__data__": {"id_": "1b8a309e-c71a-4f71-bc01-74d98e023f8e", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e911ecec-728b-4d37-ae47-9c0243536c51", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "3855448a743c2af9285e67c105743a4c1062b6350cdf8c6cc8fa3b91028804c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "558fdebe-9bcc-4337-b186-00f9d28f596c", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "b11cf1489a9c97264eafd504916e80fdb2d15086f1ce0a1801c5fb317ec1499e", "class_name": "RelatedNodeInfo"}}, "text": "# Atur logging untuk modul ini\n# Panggil setup_logging() jika belum dipanggil secara global (misalnya di server.py)\n# Untuk pengujian mandiri, kita akan memanggilnya di blok if __name__ == '__main__'\nlogger = logging.getLogger(__name__)\n\ndef load_source_data() -> str | None:\n    \"\"\"\n    Loads the raw text content from the source file specified in the config.\n\n    Returns:\n        str | None: The content of the file as a string, or None if an error occurs.\n    \"\"\"\n    logger.info(f\"Attempting to load source data from: {SOURCE_TEXT_FILE_PATH}\")\n\n    if not os.path.exists(SOURCE_TEXT_FILE_PATH):\n        logger.error(f\"Source file not found at path: {SOURCE_TEXT_FILE_PATH}\")\n        return None\n\n    try:\n        with open(SOURCE_TEXT_FILE_PATH, 'r', encoding='utf-8') as file:\n            content = file.read()\n        logger.info(f\"Successfully loaded {len(content)} characters from {SOURCE_TEXT_FILE_PATH}\")\n        return content\n    except FileNotFoundError:\n        # Ini seharusnya sudah ditangani oleh pengecekan os.path.exists di atas,\n        # tapi sebagai lapisan pertahanan tambahan.\n        logger.error(f\"File not found during open operation: {SOURCE_TEXT_FILE_PATH}\")\n        return None\n    except IOError as e:\n        logger.error(f\"IOError occurred while reading file {SOURCE_TEXT_FILE_PATH}: {e}\")\n        return None\n    except UnicodeDecodeError as e:\n        logger.error(f\"UnicodeDecodeError occurred while reading file {SOURCE_TEXT_FILE_PATH}. Ensure it's UTF-8 encoded: {e}\")\n        return None\n    except Exception as e:\n        logger.error(f\"An unexpected error occurred while loading data from {SOURCE_TEXT_FILE_PATH}: {e}\")\n        return None\n\nif __name__ == '__main__':\n    # Setup logging untuk pengujian mandiri modul ini\n    # Ini akan menggunakan level default INFO dari setup_logging jika tidak dispesifikasikan\n    # atau Anda bisa set level yang berbeda di sini.\n    # Pastikan setup_logging dipanggil sebelum logger digunakan secara ekstensif.\n    # Jika logging_config.py memanggil setup_logging() saat impor, ini mungkin tidak perlu.\n    # Namun, untuk kejelasan, kita panggil di sini.\n    try:\n        # Jika dijalankan sebagai skrip, kita mungkin perlu setup logging secara eksplisit\n        # karena setup_logging() di logging_config.py mungkin tidak otomatis terpanggil\n        # saat modul itu diimpor oleh modul lain yang bukan entry point utama.\n        if not any(isinstance(h, logging.StreamHandler) for h in logging.getLogger().handlers):\n             setup_logging(level=logging.DEBUG) # Set level DEBUG untuk pengujian\n    except NameError:\n        # Jika setup_logging tidak terdefinisi karena fallback impor gagal, ini akan error.\n        # Ini menunjukkan masalah path yang lebih dalam.\n        print(\"ERROR: Could not setup logging due to import issues. Check sys.path adjustments.\")\n\n\n    logger.info(\"--- Testing data.loader.py ---\")\n    loaded_content = load_source_data()\n\n    if loaded_content:\n        logger.info(f\"Successfully loaded data. First 500 characters:\\n{loaded_content[:500]}\")\n        logger.info(f\"\\nTotal characters loaded: {len(loaded_content)}\")\n    else:\n        logger.error(\"Failed to load data from the source file.\")\n\n    logger.info(\"--- Finished testing data.loader.py ---\")", "mimetype": "text/plain", "start_char_idx": 1685, "end_char_idx": 4955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15f439a6-67dc-47a8-bb44-07c90449eacd": {"__data__": {"id_": "15f439a6-67dc-47a8-bb44-07c90449eacd", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/requirements.txt", "file_name": "requirements.txt", "file_type": "text/plain", "file_size": 179, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1e72c3ce-99b9-471f-811e-be570ec1b4cf", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/requirements.txt", "file_name": "requirements.txt", "file_type": "text/plain", "file_size": 179, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "d7c60090b34cbc7a4513c3e0fa03d9a6eb1b923482a82ef86375e4d6d0cc4309", "class_name": "RelatedNodeInfo"}}, "text": "byteplus-python-sdk-v2>=1.0.110\nfaiss-cpu\nnumpy\npython-dotenv\nFlask>=2.0\nFlask-Cors>=3.0\nhttpx>=0.20 # Atau versi lain yang sesuai, >=0.20 adalah asumsi yang wajar\npydantic>=1.10", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4bc7a83f-e906-4fb8-a567-f2b6526b0be6": {"__data__": {"id_": "4bc7a83f-e906-4fb8-a567-f2b6526b0be6", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "533691eb-26f8-4278-a72a-0d9a517bed9c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "e5928fa8ae731e15d63ef81e92c27a3327b47e61fd00766a20eddb8e43bab4b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51d249f2-7cb2-4519-ab91-857816e097db", "node_type": "1", "metadata": {}, "hash": "3b88f6dddf3aaa2b9a3a47f5b7e0169c558be19e91fc776a56eb39acf7e5eba2", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging\nimport time\nimport faiss\nimport numpy as np\nimport pickle\nfrom typing import List, Dict, Any, Optional\n\n# Menyesuaikan sys.path\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.config import (\n        ARK_API_KEY,\n        SKYLARK_EMBEDDING_MODEL_ID,\n        FAISS_INDEX_PATH,\n        CHUNK_MAP_PATH,\n        # BYTEPLUS_API_BASE_URL \n    )\n    from backend.utils.logging_config import setup_logging\n    from backend.data.loader import load_source_data\n    from backend.data.chunking import chunk_text_content, Chunk\n    from byteplussdkarkruntime import Ark\n\nexcept ImportError as e:\n    print(f\"Error importing backend modules: {e}\")\n    print(\"Please ensure that the script is run from the project root directory or that PYTHONPATH is set correctly.\")\n    sys.exit(1)\n\nsetup_logging(level=logging.INFO) \nlogger = logging.getLogger(__name__)\n\nif not ARK_API_KEY:\n    logger.critical(\"ARK_API_KEY is not set. Exiting.\")\n    sys.exit(1)\n\ntry:\n    API_BASE_URL = \"https://ark.ap-southeast.bytepluses.com/api/v3\"\n    if hasattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL'):\n        cfg_base_url = getattr(sys.modules['backend.utils.config'], 'BYTEPLUS_API_BASE_URL')\n        if cfg_base_url:\n            API_BASE_URL = cfg_base_url\n            \n    client_ark = Ark(api_key=ARK_API_KEY, base_url=API_BASE_URL)\n    logger.info(f\"BytePlus Ark SDK client initialized with base_url: {API_BASE_URL}\")\nexcept Exception as e:\n    logger.critical(f\"Failed to initialize BytePlus Ark SDK client: {e}\")\n    sys.exit(1)\n\nEMBEDDING_API_PATH = \"/embeddings/multimodal\"\n\ndef get_embeddings_batch(texts: List[str]) -> Optional[List[List[float]]]:\n    all_embeddings: List[List[float]] = []\n    if not texts:\n        logger.info(\"No texts provided for embedding.\")\n        return all_embeddings\n\n    for index, text_content in enumerate(texts):\n        logger.info(f\"Processing text {index + 1}/{len(texts)} for embedding: \\\"{text_content[:50].replace(os.linesep, ' ')}...\\\"\")\n        \n        formatted_input = [{\"type\": \"text\", \"text\": text_content}]\n        request_body_dict = {\n            \"model\": SKYLARK_EMBEDDING_MODEL_ID,\n            \"input\": formatted_input,\n            \"encoding_format\": \"float\"\n        }\n        logger.debug(f\"Request body dict for embedding: {request_body_dict}\")\n\n        try:\n            response_data = client_ark.post(\n                path=EMBEDDING_API_PATH,\n                body=request_body_dict,\n                cast_to=Any \n            )\n\n            logger.debug(f\"Response type from SDK after post: {type(response_data)}\")\n            logger.debug(f\"Response data from SDK after post (first 500 chars): {str(response_data)[:500]}\")\n            \n            if isinstance(response_data, dict) and \"data\" in response_data:\n                # Asumsi 'data' adalah objek tunggal (dict) karena kita mengirim satu input\n                data_item = response_data[\"data\"]\n                if isinstance(data_item, dict) and \"embedding\" in data_item and isinstance(data_item[\"embedding\"], list):\n                    all_embeddings.append(data_item[\"embedding\"])\n                    logger.debug(f\"Successfully got embedding for text {index + 1}.\")\n                # Kemungkinan lain: jika API mengembalikan list of data objects bahkan untuk satu input\n                elif isinstance(data_item, list) and len(data_item) == 1:\n                    single_item_in_list = data_item[0]\n                    if isinstance(single_item_in_list, dict) and \"embedding\" in single_item_in_list and isinstance(single_item_in_list[\"embedding\"], list):\n                        all_embeddings.append(single_item_in_list[\"embedding\"])\n                        logger.debug(f\"Successfully got embedding for text {index + 1} (from list of one).\")", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51d249f2-7cb2-4519-ab91-857816e097db": {"__data__": {"id_": "51d249f2-7cb2-4519-ab91-857816e097db", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "533691eb-26f8-4278-a72a-0d9a517bed9c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "e5928fa8ae731e15d63ef81e92c27a3327b47e61fd00766a20eddb8e43bab4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4bc7a83f-e906-4fb8-a567-f2b6526b0be6", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "693b9acb14f7a4bcc38eefa64ef901c2a06c61eae1fe1ea50d2ce88b6f97ae0d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5fdfdd44-0b87-478d-8766-5c63409bd18d", "node_type": "1", "metadata": {}, "hash": "7aa256f85f0052e41a385c32755d21d086dcdae99e56cda20cad983d1cb0ba5e", "class_name": "RelatedNodeInfo"}}, "text": "else:\n                        logger.warning(f\"Embedding data item (in list) for text {index + 1} is malformed: {single_item_in_list}\")\n                        return None\n                else: # Jika 'data' bukan dict dengan 'embedding' atau list tunggal yang valid\n                    logger.warning(f\"Embedding data object for text {index + 1} is malformed: {data_item}\")\n                    return None \n            elif isinstance(response_data, dict) and \"error\" in response_data:\n                 logger.error(f\"API Error received from BytePlus: {response_data['error']}\")\n                 return None\n            else: \n                logger.error(f\"Unexpected response structure or 'data' key missing. Type: {type(response_data)}, Response: {str(response_data)[:1000]}\")\n                return None\n            \n            if index < len(texts) - 1:\n                 time.sleep(0.3) \n\n        except Exception as e:\n            logger.error(f\"Exception calling BytePlus embedding API for text {index + 1} (\\\"{text_content[:30].replace(os.linesep, ' ')}...\\\"): {e}\")\n            import traceback\n            logger.error(traceback.format_exc())\n            return None \n            \n    if len(all_embeddings) == len(texts):\n        logger.info(f\"Successfully generated all {len(all_embeddings)} embeddings.\")\n        return all_embeddings\n    else:\n        logger.error(f\"Final mismatch in expected and generated embeddings count. Expected: {len(texts)}, Got: {len(all_embeddings)}\")\n        return None\n\ndef build_and_save_vector_store():\n    logger.info(\"Starting the process to build and save vector store...\")\n    full_content = load_source_data()\n    if not full_content:\n        logger.error(\"Failed to load source data. Aborting vector store build.\")\n        return\n\n    logger.info(\"Chunking text content...\")\n    structured_chunks: List[Chunk] = chunk_text_content(full_content)\n    if not structured_chunks:\n        logger.error(\"No chunks were generated from the source text. Aborting vector store build.\")\n        return\n    logger.info(f\"Successfully generated {len(structured_chunks)} structured chunks.\")\n\n    texts_to_embed = [chunk['text_content'] for chunk in structured_chunks]\n    chunks_for_map: List[Chunk] = structured_chunks \n\n    logger.info(\"Generating embeddings for all text chunks...\")\n    embeddings = get_embeddings_batch(texts_to_embed) \n\n    if not embeddings or len(embeddings) != len(texts_to_embed):\n        logger.error(\"Failed to generate embeddings for all chunks. Aborting vector store build.\")\n        return\n\n    embeddings_np = np.array(embeddings, dtype='float32')\n    if embeddings_np.size == 0: \n        logger.error(\"Embeddings array is empty. Aborting FAISS index build.\")\n        return\n        \n    if embeddings_np.ndim == 1: \n        if len(texts_to_embed) == 1:\n            embeddings_np = embeddings_np.reshape(1, -1) \n            logger.info(f\"Reshaped single embedding to: {embeddings_np.shape}\")\n        else:\n            logger.error(f\"Embeddings NumPy array has unexpected shape: {embeddings_np.shape} for {len(texts_to_embed)} texts. Aborting.\")\n            return\n            \n    logger.info(f\"Embeddings converted to NumPy array with shape: {embeddings_np.shape}\")\n\n    if embeddings_np.shape[0] == 0:\n        logger.error(\"No embeddings were generated successfully (array is empty after potential reshape). Cannot build FAISS index.\")\n        return\n\n    dimension = embeddings_np.shape[1]\n    logger.info(f\"Building FAISS index with dimension: {dimension}\")\n    index = faiss.IndexFlatL2(dimension)\n    \n    index.add(embeddings_np)\n    logger.info(f\"Successfully added {index.ntotal} vectors to FAISS index.\")\n\n    try:\n        static_data_dir = os.path.dirname(FAISS_INDEX_PATH)\n        if not os.path.exists(static_data_dir):\n            os.makedirs(static_data_dir)\n            logger.info(f\"Created directory for static data: {static_data_dir}\")\n\n        logger.info(f\"Saving FAISS index to: {FAISS_INDEX_PATH}\")\n        faiss.write_index(index, FAISS_INDEX_PATH)\n        logger.info(\"FAISS index saved successfully.\")\n\n        logger.info(f\"Saving chunk map to: {CHUNK_MAP_PATH}\")\n        with open(CHUNK_MAP_PATH, 'wb') as f:\n            pickle.dump(chunks_for_map, f)\n        logger.info(\"Chunk map saved successfully.\")\n    except Exception as e:\n        logger.error(f\"Error saving FAISS index or chunk map: {e}\")\n        import traceback\n        logger.error(traceback.format_exc())\n        return\n    logger.info(\"Vector store build and save process completed successfully!\")", "mimetype": "text/plain", "start_char_idx": 3966, "end_char_idx": 8529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fdfdd44-0b87-478d-8766-5c63409bd18d": {"__data__": {"id_": "5fdfdd44-0b87-478d-8766-5c63409bd18d", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "533691eb-26f8-4278-a72a-0d9a517bed9c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "e5928fa8ae731e15d63ef81e92c27a3327b47e61fd00766a20eddb8e43bab4b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51d249f2-7cb2-4519-ab91-857816e097db", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "554a9d5e24469ef3d7f58856222471884668806c70a27902b64ea893f8cf695d", "class_name": "RelatedNodeInfo"}}, "text": "if __name__ == '__main__':\n    logger.info(\"=== Running Offline Vector Store Build Script ===\")\n    build_and_save_vector_store()\n    logger.info(\"=== Offline Vector Store Build Script Finished ===\")", "mimetype": "text/plain", "start_char_idx": 8531, "end_char_idx": 8730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2b71b59-a82a-4392-a562-e4ca4df9334c": {"__data__": {"id_": "e2b71b59-a82a-4392-a562-e4ca4df9334c", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd104bae-6dce-4589-95ef-1c71df2bf52d", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "42fa796e26d7ba3c46a40d5bd9a3dba10dc3660a5d8e1dad93278c7af9735dfe", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6edd4f6-b5ad-4e87-941f-926644a1a0ad": {"__data__": {"id_": "c6edd4f6-b5ad-4e87-941f-926644a1a0ad", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "11dd6273-debc-4fa2-908b-a9a0c5295dd8", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "9eb1a8181b779ff64ffc3ec207b65bb25ebfcb235e40eadc2e793dee8cdce282", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6b521f1-1e23-409c-bcb4-4bf935bd4685", "node_type": "1", "metadata": {}, "hash": "b8d731233281b6105a5c779a3e8170d2ecddb9a3c3270228e418967eac62929c", "class_name": "RelatedNodeInfo"}}, "text": "import os\nfrom dotenv import load_dotenv\nimport logging # Kita akan menggunakan logging di sini juga\n\n# Mengatur logger untuk modul config ini\nlogger = logging.getLogger(__name__)\n\n# Tentukan path absolut ke direktori root proyek\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# Path ke file .env yang ada di direktori backend\nDOTENV_PATH = os.path.join(PROJECT_ROOT_DIR, 'backend', '.env')\n\n# Muat variabel dari file .env\nif os.path.exists(DOTENV_PATH):\n    load_dotenv(dotenv_path=DOTENV_PATH)\n    logger.info(f\".env file loaded from: {DOTENV_PATH}\")\nelse:\n    logger.warning(f\".env file not found at: {DOTENV_PATH}. Environment variables should be set manually.\")\n\n# Akses API Key\nARK_API_KEY = os.environ.get(\"ARK_API_KEY\")\n\n# Model IDs (Pastikan ini sesuai dengan yang ingin Anda gunakan)\nSKYLARK_LITE_MODEL_ID = \"skylark-lite-250215\"\nSKYLARK_EMBEDDING_MODEL_ID = \"skylark-embedding-vision-250328\" \n\n# Path untuk data sumber (Bali Surver.txt di root proyek)\nSOURCE_TEXT_FILE_NAME = \"Bali Surver.txt\" \nSOURCE_TEXT_FILE_PATH = os.path.join(PROJECT_ROOT_DIR, SOURCE_TEXT_FILE_NAME)\n\n# Path untuk data statis yang dihasilkan (FAISS index, map) di dalam backend/static_data/\nBACKEND_DIR = os.path.join(PROJECT_ROOT_DIR, 'backend')\nSTATIC_DATA_DIR_NAME = \"static_data\"\nSTATIC_DATA_PATH = os.path.join(BACKEND_DIR, STATIC_DATA_DIR_NAME)\n\nFAISS_INDEX_FILE_NAME = \"bali_surfer.index\"\nCHUNK_MAP_FILE_NAME = \"index_to_chunk_map.pkl\"\nFAISS_INDEX_PATH = os.path.join(STATIC_DATA_PATH, FAISS_INDEX_FILE_NAME)\nCHUNK_MAP_PATH = os.path.join(STATIC_DATA_PATH, CHUNK_MAP_FILE_NAME)\n\n# Parameter Retrieval\nTOP_K_CHUNKS = 3 \n\n# ======================================================================\n# BARU: URL Toko Umum (Ganti dengan URL toko Anda yang sebenarnya)\n# ======================================================================\nTOKOPEDIA_STORE_URL = \"https://www.tokopedia.com/balisurfersperfume\" # CONTOH, HARAP GANTI\n# SHOPEE_STORE_URL = \"https://shopee.co.id/balisurfersperfume\"  \n# ======================================================================\n\n# API Base URL (SDK BytePlus biasanya sudah punya default, tapi bisa di-override jika perlu)\n# BYTEPLUS_API_BASE_URL = \"https://ark.ap-southeast.bytepluses.com/api/v3\"\n\n# Validasi dan Logging\nif not ARK_API_KEY:\n    logger.error(\"ARK_API_KEY not found in environment variables. Ensure it is set in the .env file or system environment.\")\nelse:\n    logger.info(\"ARK_API_KEY loaded successfully.\")\n\nif not os.path.exists(SOURCE_TEXT_FILE_PATH):\n    logger.warning(f\"Source text file not found at: {SOURCE_TEXT_FILE_PATH}\")\nelse:\n    logger.info(f\"Source text file path configured: {SOURCE_TEXT_FILE_PATH}\")\n\nif not os.path.exists(STATIC_DATA_PATH):\n    try:\n        os.makedirs(STATIC_DATA_PATH)\n        logger.info(f\"Created static_data directory at: {STATIC_DATA_PATH}\")\n    except OSError as e:\n        logger.error(f\"Could not create static_data directory at {STATIC_DATA_PATH}: {e}\")\n\nlogger.info(f\"FAISS index path configured: {FAISS_INDEX_PATH}\")\nlogger.info(f\"Chunk map path configured: {CHUNK_MAP_PATH}\")\nlogger.info(f\"Tokopedia Store URL (general): {TOKOPEDIA_STORE_URL}\") # Logging URL baru\n#logger.info(f\"Shopee Store URL (general): {SHOPEE_STORE_URL}\")       # Logging URL baru", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6b521f1-1e23-409c-bcb4-4bf935bd4685": {"__data__": {"id_": "e6b521f1-1e23-409c-bcb4-4bf935bd4685", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "11dd6273-debc-4fa2-908b-a9a0c5295dd8", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "9eb1a8181b779ff64ffc3ec207b65bb25ebfcb235e40eadc2e793dee8cdce282", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6edd4f6-b5ad-4e87-941f-926644a1a0ad", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "34bf3678b922049eab227226b05bd3a856e04e005f0d213945c5071c54d3a173", "class_name": "RelatedNodeInfo"}}, "text": "if __name__ == '__main__':\n    import sys\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        handlers=[logging.StreamHandler(sys.stdout)]\n    )\n    logger.info(\"--- Config Test ---\")\n    logger.info(f\"Project Root: {PROJECT_ROOT_DIR}\")\n    logger.info(f\"Backend Dir: {BACKEND_DIR}\")\n    logger.info(f\"Dotenv Path: {DOTENV_PATH}\")\n    logger.info(f\"API Key (first 5 chars): {ARK_API_KEY[:5] + '...' if ARK_API_KEY else 'Not Set'}\")\n    logger.info(f\"Source Text Path: {SOURCE_TEXT_FILE_PATH} (Exists: {os.path.exists(SOURCE_TEXT_FILE_PATH)})\")\n    logger.info(f\"Static Data Path: {STATIC_DATA_PATH} (Exists: {os.path.exists(STATIC_DATA_PATH)})\")\n    logger.info(f\"FAISS Index Path: {FAISS_INDEX_PATH}\")\n    logger.info(f\"Chunk Map Path: {CHUNK_MAP_PATH}\")\n    logger.info(f\"Tokopedia Store URL: {TOKOPEDIA_STORE_URL}\") # BARU di tes\n    #logger.info(f\"Shopee Store URL: {SHOPEE_STORE_URL}\")", "mimetype": "text/plain", "start_char_idx": 3294, "end_char_idx": 4264, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fccfaaa1-192b-44dd-bd8a-a086567326cd": {"__data__": {"id_": "fccfaaa1-192b-44dd-bd8a-a086567326cd", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/logging_config.py", "file_name": "logging_config.py", "file_type": "text/x-python", "file_size": 1265, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06dc1791-f85c-4383-b9d8-e6ef09df60ec", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/logging_config.py", "file_name": "logging_config.py", "file_type": "text/x-python", "file_size": 1265, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "d9c96c44f65e063b425fd08182bfe0b3ec1721302e55efc81c54c3cc9cfff264", "class_name": "RelatedNodeInfo"}}, "text": "import logging\nimport sys\n\ndef setup_logging(level=logging.INFO):\n    \"\"\"Sets up basic logging configuration for the application.\"\"\"\n    logging.basicConfig(\n        level=level,\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        handlers=[\n            logging.StreamHandler(sys.stdout)  # Output to console\n            # You can add a FileHandler here if you want to log to a file\n            # logging.FileHandler(\"app.log\")\n        ]\n    )\n    # Reduce verbosity from some libraries if needed\n    # logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n    # logging.getLogger(\"httpx\").setLevel(logging.WARNING) # Example for httpx if used by SDK\n\n# Call setup_logging() when this module is first imported (optional)\n# setup_logging()\n# Alternatively, call setup_logging() explicitly at the start of your application (e.g., in server.py)\n\nif __name__ == '__main__':\n    # Example usage\n    setup_logging(logging.DEBUG)\n    logger = logging.getLogger(__name__) # Get a logger specific to this module\n    logger.debug(\"This is a debug message.\")\n    logger.info(\"This is an info message.\")\n    logger.warning(\"This is a warning message.\")\n    logger.error(\"This is an error message.\")\n    logger.critical(\"This is a critical message.\")", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9435b2d6-b3c9-4972-892a-f859b5b80d4b": {"__data__": {"id_": "9435b2d6-b3c9-4972-892a-f859b5b80d4b", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fcf6522-44d0-4f6f-aed1-027f6f73d7a5", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "c5ca07b24da9e08bc4e03fe779ca80440ecce9745f03f8fe0c37a27032479ab4", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdbc7680-0188-4332-9fbb-0a4a7baebcb1": {"__data__": {"id_": "fdbc7680-0188-4332-9fbb-0a4a7baebcb1", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "771d0bf7ce6338fdcf14dff8292af4912d33e68edd2f859179d2ffb461a0bf62", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4", "node_type": "1", "metadata": {}, "hash": "69aaaebee864d66076049ea48e9675b526a1cc76ff74109f4cf45e13b3f1c8a0", "class_name": "RelatedNodeInfo"}}, "text": "import os\nimport sys\nimport logging\nimport faiss\nimport numpy as np\nimport pickle\nfrom typing import List, Dict, Any, Optional\n\n# Menyesuaikan sys.path agar bisa impor dari direktori backend\nPROJECT_ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nif PROJECT_ROOT_DIR not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT_DIR)\n\ntry:\n    from backend.utils.config import FAISS_INDEX_PATH, CHUNK_MAP_PATH\n    from backend.utils.logging_config import setup_logging\n    # Kita perlu tipe Chunk dari data.chunking untuk type hinting\n    from backend.data.chunking import Chunk # Pastikan Chunk diimpor\nexcept ImportError as e:\n\n    print(f\"Error importing backend modules in faiss_store.py: {e}\")\n\n    if 'Chunk' not in globals(): # Cek apakah Chunk sudah terdefinisi\n        class Chunk(dict): pass # Placeholder sederhana\n    if 'FAISS_INDEX_PATH' not in globals():\n        FAISS_INDEX_PATH = \"placeholder.index\"\n    if 'CHUNK_MAP_PATH' not in globals():\n        CHUNK_MAP_PATH = \"placeholder.pkl\"\n    if 'setup_logging' not in globals():\n        def setup_logging(level=logging.INFO): logging.basicConfig(level=level)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4": {"__data__": {"id_": "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "771d0bf7ce6338fdcf14dff8292af4912d33e68edd2f859179d2ffb461a0bf62", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdbc7680-0188-4332-9fbb-0a4a7baebcb1", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "839c9be54eddfefaa712af5c1915f6e27eeb85b988e44fbecab86da4bbcc76e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1251b79-f785-449b-8902-f3149ffb56ec", "node_type": "1", "metadata": {}, "hash": "1cfd2c0fe90704f0994d762b0af3c53cfdfcf0393f3a63f1b23d5c18e297d70a", "class_name": "RelatedNodeInfo"}}, "text": "logger = logging.getLogger(__name__)\n\nclass FAISSVectorStore:\n    \"\"\"\n    Manages loading and searching a FAISS index and its corresponding chunk map.\n    \"\"\"\n    def __init__(self, index_path: str = FAISS_INDEX_PATH, map_path: str = CHUNK_MAP_PATH):\n        self.index_path: str = index_path\n        self.map_path: str = map_path\n        self.index: Optional[faiss.Index] = None\n        self.chunk_map: Optional[List[Chunk]] = None # List dari objek Chunk\n        self._loaded: bool = False\n\n    def load(self) -> bool:\n        \"\"\"\n        Loads the FAISS index and chunk map from disk.\n        Returns True if loading was successful, False otherwise.\n        \"\"\"\n        if self._loaded:\n            logger.info(\"Vector store already loaded.\")\n            return True\n\n        logger.info(f\"Attempting to load FAISS index from: {self.index_path}\")\n        if not os.path.exists(self.index_path):\n            logger.error(f\"FAISS index file not found at: {self.index_path}. Please build the vector store first.\")\n            return False\n        \n        logger.info(f\"Attempting to load chunk map from: {self.map_path}\")\n        if not os.path.exists(self.map_path):\n            logger.error(f\"Chunk map file not found at: {self.map_path}. Please build the vector store first.\")\n            return False\n\n        try:\n            self.index = faiss.read_index(self.index_path)\n            logger.info(f\"Successfully loaded FAISS index with {self.index.ntotal} vectors.\")\n            \n            with open(self.map_path, 'rb') as f:\n                self.chunk_map = pickle.load(f)\n            \n            if not isinstance(self.chunk_map, list):\n                logger.error(f\"Chunk map loaded from {self.map_path} is not a list. Type: {type(self.chunk_map)}\")\n                self.index = None # Reset jika map tidak valid\n                self.chunk_map = None\n                return False\n\n            logger.info(f\"Successfully loaded chunk map with {len(self.chunk_map)} entries.\")\n\n            if self.index.ntotal != len(self.chunk_map):\n                logger.warning(\n                    f\"Mismatch between FAISS index size ({self.index.ntotal}) and chunk map size ({len(self.chunk_map)}). \"\n                    \"This might lead to errors during search.\"\n                )\n\n            self._loaded = True\n            return True\n\n        except FileNotFoundError as e: # Seharusnya sudah ditangani oleh os.path.exists\n            logger.error(f\"File not found during load operation: {e}\")\n            return False\n        except pickle.UnpicklingError as e:\n            logger.error(f\"Error unpickling chunk map from {self.map_path}: {e}\")\n            return False\n        except Exception as e: # Termasuk error dari faiss.read_index\n            logger.error(f\"An unexpected error occurred while loading vector store: {e}\")\n            import traceback\n            logger.error(traceback.format_exc())\n            return False\n\n    def search(self, query_embedding: List[float], k: int = 3) -> List[Chunk]:\n        \"\"\"\n        Searches the FAISS index for the top k most similar chunks to the query_embedding.\n\n        Args:\n            query_embedding: The embedding vector of the user's query.\n            k: The number of top similar chunks to retrieve.\n\n        Returns:\n            A list of Chunk objects (dictionaries) that are most similar.\n            Returns an empty list if the store is not loaded or no results are found.\n        \"\"\"\n        if not self._loaded:\n            logger.warning(\"Vector store is not loaded. Attempting to load now...\")\n            if not self.load(): # Coba load jika belum\n                logger.error(\"Failed to load vector store. Cannot perform search.\")\n                return []\n        \n        if self.index is None or self.chunk_map is None:\n            logger.error(\"FAISS index or chunk map is not available. Cannot perform search.\")\n            return []\n\n        if k <= 0:\n            logger.warning(\"Number of results to retrieve (k) must be positive.\")\n            return []\n        \n        # Pastikan k tidak lebih besar dari jumlah total item di indeks\n        k = min(k, self.index.ntotal)\n        if k == 0 and self.index.ntotal > 0 : # Jika k menjadi 0 karena min, tapi ada item\n             logger.warning(f\"Adjusted k to {self.index.ntotal} as original k was too large or index is small.\")\n             k = self.index.ntotal # Ambil semua jika k > ntotal\n        elif self.index.ntotal == 0:\n            logger.warning(\"FAISS index is empty. Cannot perform search.\")\n            return []", "mimetype": "text/plain", "start_char_idx": 1156, "end_char_idx": 5721, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1251b79-f785-449b-8902-f3149ffb56ec": {"__data__": {"id_": "f1251b79-f785-449b-8902-f3149ffb56ec", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abea19ba-bc33-4e0b-9349-641ad47ff35c", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "771d0bf7ce6338fdcf14dff8292af4912d33e68edd2f859179d2ffb461a0bf62", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "124084ccd3666be21e63d6955f8e2e7a0a8c3ba88c3bbdf0621de83575760447", "class_name": "RelatedNodeInfo"}}, "text": "try:\n            # FAISS expects a 2D array for queries (num_queries, dimension)\n            query_vector_np = np.array([query_embedding], dtype='float32')\n            \n            logger.debug(f\"Searching with query vector shape: {query_vector_np.shape}, k={k}\")\n            \n            # D: distances, I: indices\n            distances, indices = self.index.search(query_vector_np, k)\n            \n            retrieved_chunks: List[Chunk] = []\n            if indices.size > 0:\n                for i, idx in enumerate(indices[0]): # indices[0] karena kita hanya punya 1 query\n                    if 0 <= idx < len(self.chunk_map):\n                        chunk_data = self.chunk_map[idx]\n\n                        retrieved_chunks.append(chunk_data)\n                        logger.debug(f\"Retrieved chunk index {idx} with distance {distances[0][i]}\")\n                    else:\n                        logger.warning(f\"Invalid index {idx} retrieved from FAISS search. Max index: {len(self.chunk_map)-1}\")\n            \n            logger.info(f\"Search completed. Retrieved {len(retrieved_chunks)} chunks.\")\n            return retrieved_chunks\n\n        except Exception as e:\n            logger.error(f\"Error during FAISS search: {e}\")\n            import traceback\n            logger.error(traceback.format_exc())\n            return []\n\n\nvector_store_instance = FAISSVectorStore()\n\n\n\nif __name__ == '__main__':\n\n    setup_logging(level=logging.DEBUG)\n\n    logger.info(\"--- Testing vector_store.faiss_store.py ---\")\n\n    if not os.path.exists(FAISS_INDEX_PATH) or not os.path.exists(CHUNK_MAP_PATH):\n        logger.error(\"FAISS index or chunk map not found. Please run build_vector_store.py first.\")\n    else:\n        test_store = FAISSVectorStore()\n        if test_store.load(): # Muat data\n            logger.info(\"Vector store loaded successfully for testing.\")\n            \n            if test_store.index:\n                dimension = test_store.index.d\n                logger.info(f\"Index dimension: {dimension}\")\n                \n                # Buat dummy query embedding (vektor acak)\n                dummy_query_embedding = np.random.rand(dimension).astype('float32').tolist()\n                \n                k_results = 3\n                logger.info(f\"Performing dummy search for top {k_results} results...\")\n                results = test_store.search(dummy_query_embedding, k=k_results)\n                \n                if results:\n                    logger.info(f\"Found {len(results)} results:\")\n                    for i, res_chunk in enumerate(results):\n                        logger.info(f\"  Result {i+1}:\")\n                        logger.info(f\"    Metadata: {res_chunk['metadata']}\")\n                        logger.info(f\"    Text (first 70 chars): {res_chunk['text_content'][:70].replace(os.linesep, ' ')}...\")\n                else:\n                    logger.info(\"Dummy search returned no results (or an error occurred).\")\n            else:\n                logger.error(\"Failed to get index dimension for dummy search.\")\n        else:\n            logger.error(\"Failed to load vector store for testing.\")\n\n    logger.info(\"--- Finished testing vector_store.faiss_store.py ---\")", "mimetype": "text/plain", "start_char_idx": 5732, "end_char_idx": 8931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ae014cb-5801-4d73-a5dc-830d4d48f9a5": {"__data__": {"id_": "1ae014cb-5801-4d73-a5dc-830d4d48f9a5", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e722c170-ba69-41c6-9ea9-c7c706def820", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "8edd41fe89d8dacd4840766ed0c1fcecff57989365fff7d90222d084854097e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b42251e6-8f21-4b04-aead-84eac56a0b57", "node_type": "1", "metadata": {}, "hash": "ac0339c10e0bb55fb015819cd246df7ff9f898b616ec0066052670389a06518c", "class_name": "RelatedNodeInfo"}}, "text": "/* File: frontend/css/avatar.css */\n\n/* Pembungkus untuk setiap giliran bot (avatar + bubble/konten) */\n.bot-turn-wrapper {\n    display: flex;\n    align-items: flex-end; /* Default alignment, avatar sejajar bawah dengan bubble */\n    margin-bottom: 10px; /* Jarak antar giliran bot, atau bisa diatur dengan gap di #chatbox */\n    align-self: flex-start; /* Pastikan seluruh baris ini rata kiri */\n    max-width: 90%; /* Batasi lebar keseluruhan baris bot agar tidak terlalu lebar */\n}\n\n/* Styling untuk elemen avatar bot */\n.bot-avatar {\n    width: 32px; \n    height: 32px; \n    border-radius: 50%; \n    background-image: url('../images/logo-bali-surfer.png'); \n    background-size: contain; \n    background-position: center;\n    background-repeat: no-repeat;\n    margin-right: 8px; \n    flex-shrink: 0; \n    background-color: #e0e0e0; \n}\n\n/* Kontainer untuk teks pesan di dalam bot-bubble, setelah avatar */\n/* .bot-message-content juga memiliki kelas .message-bubble dan .bot-bubble dari script.js */\n.bot-message-content {\n    /* Styling bubble (background, padding, border-radius) didapat dari .message-bubble & .bot-bubble di style.css */\n    flex-grow: 1; /* Agar konten pesan mengisi sisa ruang horizontal */\n    min-width: 0; /* Penting untuk flex item agar bisa mengecil dan word-wrap bekerja dengan benar */\n}\n\n/* Penyesuaian khusus untuk .bot-turn-wrapper yang berisi carousel */\n.bot-turn-wrapper.carousel-container { /* .carousel-container ditambahkan ke wrapper ini di script.js */\n    align-items: flex-start; /* Avatar sejajar atas dengan blok carousel */\n    /* Padding luar untuk bubble carousel sudah di .bot-bubble.carousel-container di style.css */\n    /* Jika .carousel-container di style.css sekarang merujuk ke .bot-turn-wrapper ini, maka paddingnya: */\n    padding: 10px; \n    background-color: #f1f1f1; /* Background bubble bot jika diperlukan di sini */\n    border-radius: 18px; /* Radius bubble bot */\n    border-bottom-left-radius: 5px; /* Radius spesifik */\n    /* max-width: 85%; atau 100% jika .bot-turn-wrapper sudah dibatasi */\n}\n\n/* Bubble yang berisi kartu-kartu carousel (di dalam .bot-turn-wrapper.carousel-container, setelah avatar) */\n.carousel-bubble-content {\n    flex-grow: 1; /* Mengisi sisa ruang horizontal setelah avatar */\n    min-width: 0; /* Penting untuk flex item agar bisa mengecil */\n    /* Tidak perlu background atau padding di sini, karena kartu-kartu dan .carousel-cards-wrapper yang mengaturnya */\n}\n\n/* Wrapper untuk kartu-kartu carousel yang bisa di-scroll */\n.carousel-cards-wrapper {\n    display: flex;\n    overflow-x: auto;\n    overflow-y: hidden;\n    gap: 10px;\n    padding: 5px 0px 10px 5px; /* Atas, Kanan, Bawah, Kiri */\n    width: 100%; \n    box-sizing: border-box;\n}\n\n.carousel-cards-wrapper::-webkit-scrollbar {\n    height: 8px; \n}\n.carousel-cards-wrapper::-webkit-scrollbar-track {\n    background: #e0e0e0; \n    border-radius: 4px;\n}\n.carousel-cards-wrapper::-webkit-scrollbar-thumb {\n    background: #0D8ABC; \n    border-radius: 4px;\n}\n.carousel-cards-wrapper::-webkit-scrollbar-thumb:hover {\n    background: #005f86; \n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b42251e6-8f21-4b04-aead-84eac56a0b57": {"__data__": {"id_": "b42251e6-8f21-4b04-aead-84eac56a0b57", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e722c170-ba69-41c6-9ea9-c7c706def820", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "8edd41fe89d8dacd4840766ed0c1fcecff57989365fff7d90222d084854097e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ae014cb-5801-4d73-a5dc-830d4d48f9a5", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "137738f7115ae4096e1594eec1db6eae330d999e05a753de4dfc38da54dd4946", "class_name": "RelatedNodeInfo"}}, "text": "/* --- STYLING UNTUK INDIKATOR TYPING BARU --- */\n\n/* Wrapper untuk giliran typing, agar avatar dan typing dots sejajar */\n.bot-turn-wrapper.typing-indicator-turn {\n    align-items: center; /* Sejajarkan avatar dan typing dots di tengah secara vertikal */\n    /* Tidak perlu background atau padding bubble di wrapper ini */\n    /* Jarak bawahnya akan dari gap #chatbox atau margin .bot-turn-wrapper */\n}\n\n.typing-dots-container {\n    display: flex;\n    align-items: baseline; /* Agar teks \"Typing\" dan titik sejajar */\n    padding: 10px 0px 10px 0px; /* Beri sedikit ruang vertikal, tanpa background bubble */\n    font-style: italic;\n    color: #6c757d; /* Warna abu-abu yang lebih lembut */\n    font-size: 0.9em;\n}\n\n.typing-dots-container span:first-child { /* Teks \"Typing\" */\n    margin-right: 4px;\n}\n\n.typing-dot {\n    width: 6px;\n    height: 6px;\n    background-color: #6c757d;\n    border-radius: 50%;\n    margin: 0 2px;\n    animation: typingAnimation 1.4s infinite ease-in-out;\n    /* Setiap titik memiliki delay animasi yang berbeda */\n}\n\n.typing-dot:nth-child(2) { /* Titik pertama setelah teks \"Typing\" */\n    animation-delay: 0.2s;\n}\n\n.typing-dot:nth-child(3) { /* Titik kedua */\n    animation-delay: 0.4s;\n}\n.typing-dot:nth-child(4) { /* Titik ketiga */\n    animation-delay: 0.6s;\n}\n\n\n@keyframes typingAnimation {\n    0%, 80%, 100% {\n        transform: scale(0);\n        opacity: 0.5;\n    }\n    40% {\n        transform: scale(1.0);\n        opacity: 1;\n    }\n}\n\n/* --- AKHIR STYLING INDIKATOR TYPING --- */", "mimetype": "text/plain", "start_char_idx": 3096, "end_char_idx": 4612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "076aa109-eb13-4509-bb1f-b0ef73899505": {"__data__": {"id_": "076aa109-eb13-4509-bb1f-b0ef73899505", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28b28a63-2908-4b97-af1c-372d0dfc4526", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "181922706788acfa1f7d72665da5c50426bd59cf38173aef5900ae8543df01bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d04cdd7-de92-4755-b478-3b9f0f9a4468", "node_type": "1", "metadata": {}, "hash": "a524000d8abcae57cb0e5c90857e49afbde386571e16374cb99236da47524a17", "class_name": "RelatedNodeInfo"}}, "text": "/* File: frontend/css/style.css */\n\nbody {\n    font-family: 'Inter', sans-serif;\n    margin: 0;\n    padding: 0; \n    background-color: #f4f7f6;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh; \n    box-sizing: border-box; \n}\n\n#chat-container {\n    width: 100%;\n    max-width: 450px; \n    height: 90vh; \n    max-height: 800px; \n    background-color: #ffffff;\n    border-radius: 10px; \n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); \n    display: flex;\n    flex-direction: column;\n    overflow: hidden; \n}\n\n#chat-header {\n    background-color: #0D8ABC; \n    color: white;\n    padding: 15px;\n    font-weight: 500;\n    text-align: center;\n    border-top-left-radius: 10px; \n    border-top-right-radius: 10px; \n    flex-shrink: 0; \n}\n\n#chatbox {\n    flex-grow: 1;\n    padding: 15px;\n    overflow-y: auto; \n    display: flex;\n    flex-direction: column;\n    gap: 10px; /* Jarak antar .user-bubble dan .bot-turn-wrapper */\n    background-color: #eaf6fb; \n    min-height: 0; \n}\n\n/* Styling umum untuk semua bubble pesan (user dan bot) */\n.message-bubble {\n    padding: 10px 15px; /* Padding ini akan ada di .user-bubble dan .bot-message-content / .carousel-bubble */\n    border-radius: 18px;\n    word-wrap: break-word;\n    line-height: 1.4;\n    /* max-width: 85%; Dihapus dari sini, akan diatur oleh .user-bubble atau .bot-message-content */\n}\n\n.user-bubble {\n    background-color: #007bff; \n    color: white;\n    align-self: flex-end; /* Untuk .user-bubble agar rata kanan di chatbox */\n    border-bottom-right-radius: 5px; \n    max-width: 85%; /* Batasi lebar bubble pengguna */\n}\n\n/* .bot-bubble sekarang lebih sebagai penanda dan untuk styling dasar bubble konten, */\n/* BUKAN sebagai flex container untuk avatar. Itu tugas .bot-turn-wrapper */\n.bot-bubble {\n    background-color: #f1f1f1; \n    color: #333;\n    /* align-self: flex-start; Dihapus, .bot-turn-wrapper yang akan align-self */\n    border-bottom-left-radius: 5px; \n    /* position: relative; Dihapus, biarkan .carousel-card yang jadi relative untuk tag */\n    /* display: flex; Dihapus, tidak lagi jadi flex container untuk avatar */\n    /* align-items: ...; Dihapus */\n    max-width: 100%; /* Bubble konten bot bisa mengisi sisa ruang di .bot-turn-wrapper */\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d04cdd7-de92-4755-b478-3b9f0f9a4468": {"__data__": {"id_": "7d04cdd7-de92-4755-b478-3b9f0f9a4468", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28b28a63-2908-4b97-af1c-372d0dfc4526", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "181922706788acfa1f7d72665da5c50426bd59cf38173aef5900ae8543df01bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "076aa109-eb13-4509-bb1f-b0ef73899505", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "2e8d4a8dbe332ecd7701f5fa1ef34af5a57fce5fa0459c4a45ab0d331cae24ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d01fec2-65c5-482b-b4e8-3c4fe24fafdb", "node_type": "1", "metadata": {}, "hash": "31ef171913085ce95fd5e1b9a253563191a4c632feb6f545c6453355e2701787", "class_name": "RelatedNodeInfo"}}, "text": "#quick-reply-container {\n    padding: 10px; \n    display: flex;\n    flex-wrap: wrap; \n    justify-content: center; \n    gap: 8px; \n    border-top: 1px solid #eee; \n    background-color: #f9f9f9;\n    flex-shrink: 0; \n}\n\n.quick-reply-btn {\n    background-color: #0D8ABC; \n    color: white;\n    border: none;\n    border-radius: 15px; \n    padding: 8px 15px;\n    font-size: 0.9em;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.quick-reply-btn:hover {\n    background-color: #005f86; \n}\n\n#input-area {\n    display: flex;\n    padding: 10px;\n    border-top: 1px solid #ddd;\n    background-color: #fff;\n    flex-shrink: 0; \n}\n\n#userInput {\n    flex-grow: 1;\n    border: 1px solid #ccc;\n    border-radius: 20px;\n    padding: 10px 15px;\n    font-size: 1em;\n    margin-right: 8px;\n    outline: none;\n}\n\n#userInput:focus {\n    border-color: #0D8ABC;\n}\n\n#sendButton {\n    background-color: #0D8ABC; \n    color: white;\n    border: none;\n    border-radius: 20px;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n#sendButton:hover {\n    background-color: #005f86;\n}\n\n/* --- START: Carousel Styling (Tidak banyak berubah, tapi beberapa referensi kelas mungkin disesuaikan) --- */\n\n/* Kelas .carousel-container dari style.css lama TIDAK LAGI DIGUNAKAN untuk membungkus kartu secara langsung. */\n/* Itu sekarang adalah .carousel-cards-wrapper (distyle di avatar.css). */\n/* Kelas .carousel-container yang ditambahkan ke .bot-bubble di script.js lama */\n/* sekarang lebih berfungsi sebagai penanda untuk .bot-bubble yang berisi carousel. */\n/* Kita bisa menggunakan .carousel-bubble (dari script.js baru) untuk styling bubble carousel jika perlu.", "mimetype": "text/plain", "start_char_idx": 2270, "end_char_idx": 3981, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d01fec2-65c5-482b-b4e8-3c4fe24fafdb": {"__data__": {"id_": "8d01fec2-65c5-482b-b4e8-3c4fe24fafdb", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "28b28a63-2908-4b97-af1c-372d0dfc4526", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "181922706788acfa1f7d72665da5c50426bd59cf38173aef5900ae8543df01bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d04cdd7-de92-4755-b478-3b9f0f9a4468", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "29533173aa1cfe9c7fb4a240595af5103466c101829e382b2d6a55f79ff4a7ed", "class_name": "RelatedNodeInfo"}}, "text": "*/\n\n.bot-bubble.carousel-bubble { /* Menggantikan .bot-bubble.carousel-container untuk styling bubble luar */\n    padding: 0; /* Hapus padding bubble luar, karena .carousel-cards-wrapper akan punya padding internal */\n    background-color: transparent; /* Bubble luar transparan, biarkan kartu yang punya background */\n    /* max-width: 100%; sudah di .bot-bubble */\n    overflow: visible; /* Agar bayangan kartu tidak terpotong oleh bubble ini */\n}\n\n/* Styling untuk kartu-kartu tetap sama */\n.carousel-card {\n    flex: 0 0 auto; \n    width: 180px;   \n    background-color: #ffffff;\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n    display: flex;\n    flex-direction: column; \n    overflow: hidden; /* Jaga hidden agar konten tidak meluap dari radius kartu */\n    min-height: 230px; \n    position: relative; \n}\n\n.carousel-bestseller-tag { \n    position: absolute;\n    top: 5px;  \n    left: 5px; \n    background-color: #ffc107; \n    color: #333;\n    padding: 3px 8px; \n    font-size: 0.7em; \n    font-weight: 600; \n    border-radius: 4px; \n    z-index: 10; \n    line-height: 1; \n}\n\n.carousel-card-image {\n    width: 100%;\n    height: 120px; \n    object-fit: cover; \n    display: block; \n    background-color: #f0f0f0; \n    border-top-left-radius: 8px;  \n    border-top-right-radius: 8px; \n}\n\n.carousel-card-info {\n    padding: 12px; \n    flex-grow: 1; \n    display: flex;\n    flex-direction: column;\n}\n\n.carousel-card-title {\n    font-size: 0.9em; \n    font-weight: 500;\n    margin: 0 0 6px 0;\n    color: #333333;\n    line-height: 1.3;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box; \n    -webkit-line-clamp: 2; \n    -webkit-box-orient: vertical; \n}\n\n.carousel-card-subtitle {\n    font-size: 0.75em; \n    color: #555555;\n    margin: 0 0 8px 0;\n    line-height: 1.3;\n    flex-grow: 1; \n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box; \n    -webkit-line-clamp: 3; \n    -webkit-box-orient: vertical; \n}\n\n.carousel-card-price {\n    font-size: 0.85em; \n    font-weight: 500;\n    color: #0D8ABC; \n    margin: 8px 0 0 0; \n    text-align: right; \n}\n\n.carousel-card-buttons {\n    padding: 8px 12px; \n    border-top: 1px solid #f0f0f0; \n    display: flex;\n    flex-direction: column; \n    gap: 6px; \n    margin-top: auto; \n}\n\n.carousel-action-btn {\n    background-color: #0D8ABC; \n    color: white;\n    border: none; \n    padding: 7px 10px; \n    border-radius: 5px; \n    font-size: 0.8em; \n    font-weight: 500;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;\n    width: 100%; \n    box-sizing: border-box; \n}\n\n.carousel-action-btn:hover {\n    background-color: #005f86; \n}\n\n/* Scrollbar styling dipindahkan ke .carousel-cards-wrapper di avatar.css */\n/* Jadi, bagian ini bisa dihapus dari style.css jika tidak ada .carousel-container lain */\n/* .carousel-container::-webkit-scrollbar { ... } */\n\n/* --- END: Carousel Styling --- */", "mimetype": "text/plain", "start_char_idx": 3982, "end_char_idx": 6995, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc30f8a1-9604-4974-9b5a-82ed02c6832b": {"__data__": {"id_": "bc30f8a1-9604-4974-9b5a-82ed02c6832b", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/images/logo-bali-surfer.png", "file_name": "logo-bali-surfer.png", "file_type": "image/png", "file_size": 24825, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb812494-d334-4c4c-9b68-e435354ad303", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/images/logo-bali-surfer.png", "file_name": "logo-bali-surfer.png", "file_type": "image/png", "file_size": 24825, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}, "hash": "756efb70f5fc8b6d2df6eb7b0b55d9709920aaa668d14a90b7671c024a8ab222", "class_name": "RelatedNodeInfo"}}, "text": "", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 0, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "image": null, "image_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/images/logo-bali-surfer.png", "image_url": null, "image_mimetype": null, "text_embedding": null, "class_name": "ImageNode"}, "__type__": "2"}, "49ef1389-4192-44f9-9b23-92c6268a50d6": {"__data__": {"id_": "49ef1389-4192-44f9-9b23-92c6268a50d6", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/index.html", "file_name": "index.html", "file_type": "text/html", "file_size": 1030, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fedebcf3-43c9-40c1-a944-c8a80c409f45", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/index.html", "file_name": "index.html", "file_type": "text/html", "file_size": 1030, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "ea64c589bb9c82aaa02146ab60969c70a0138437227dcddc75ff275110a46671", "class_name": "RelatedNodeInfo"}}, "text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bali Surfer Chatbot</title>\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <link rel=\"stylesheet\" href=\"css/avatar.css\"> <!-- BARIS BARU DITAMBAHKAN DI SINI -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n</head>\n<body>\n    <div id=\"chat-container\">\n        <div id=\"chat-header\">\n            \ud83d\udcac Bali Surfer Bot\n        </div>\n        <div id=\"chatbox\">\n            <!-- Pesan chat akan muncul di sini -->\n        </div>\n        <div id=\"quick-reply-container\">\n            <!-- Tombol quick-reply akan muncul di sini -->\n        </div>\n        <div id=\"input-area\">\n            <input type=\"text\" id=\"userInput\" placeholder=\"Type your message...\" autocomplete=\"off\">\n            <button id=\"sendButton\">Send</button>\n        </div>\n    </div>\n\n    <script src=\"js/script.js\"></script>\n</body>\n</html>", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ede124b2-bdd5-4f16-833f-edbc1d46bda5": {"__data__": {"id_": "ede124b2-bdd5-4f16-833f-edbc1d46bda5", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "951fec756923b1792c0e24f8ee9e0e30bcdcdcdfc02ee06ea2597a9b440f0be8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7140191-cb2a-4802-ae1b-c6c5ebccea33", "node_type": "1", "metadata": {}, "hash": "6bc1ece989a3ec8d9b08c5b20fe508cee287eff950c65d160588665852436498", "class_name": "RelatedNodeInfo"}}, "text": "// File: frontend/js/script.js\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const chatbox = document.getElementById('chatbox');\n    const userInput = document.getElementById('userInput');\n    const sendButton = document.getElementById('sendButton');\n    const quickReplyContainer = document.getElementById('quick-reply-container');\n\n    const BACKEND_API_URL = 'http://127.0.0.1:5000/api/chat'; \n\n    let currentQuizSessionData = null;\n\n    function scrollToBottom(targetElement) {\n        setTimeout(() => {\n            chatbox.scrollTop = chatbox.scrollHeight;\n            // console.log('[Debug Scroll] Scrolled chatbox. Target:', targetElement ? (targetElement.className || targetElement.id) : 'N/A', 'ScrollTop:', chatbox.scrollTop, 'ScrollHeight:', chatbox.scrollHeight);\n        }, 150); \n    }\n\n    function displayMessage(message, sender) {\n        const turnWrapper = document.createElement('div'); \n        \n        if (sender === 'bot') {\n            turnWrapper.classList.add('bot-turn-wrapper'); \n\n            const avatarDiv = document.createElement('div');\n            avatarDiv.classList.add('bot-avatar');\n            turnWrapper.appendChild(avatarDiv); \n\n            const messageContentDiv = document.createElement('div');\n            messageContentDiv.classList.add('bot-message-content'); \n            messageContentDiv.classList.add('message-bubble', 'bot-bubble'); // Terapkan style bubble ke konten\n            messageContentDiv.innerHTML = message.replace(/\\n/g, '<br>');\n            turnWrapper.appendChild(messageContentDiv); \n            \n        } else { \n            turnWrapper.classList.add('message-bubble', 'user-bubble');\n            turnWrapper.innerHTML = message.replace(/\\n/g, '<br>');\n        }\n        \n        chatbox.appendChild(turnWrapper);\n        \n        if (!turnWrapper.classList.contains('carousel-container')) {\n            scrollToBottom(turnWrapper); \n        }\n    }\n\n    function displayQuickReplies(quickReplies) {\n        quickReplyContainer.innerHTML = ''; \n        if (quickReplies && quickReplies.length > 0) {\n            quickReplyContainer.style.padding = \"10px\"; \n            quickReplies.forEach(qr => {\n                const button = document.createElement('button');\n                button.classList.add('quick-reply-btn');\n                button.textContent = qr.label;\n                button.dataset.payload = qr.payload;\n\n                button.addEventListener('click', () => {\n                    displayMessage(qr.label, 'user'); \n                    sendPayloadToServer(qr.payload);\n                    quickReplyContainer.innerHTML = ''; \n                    quickReplyContainer.style.padding = \"0px\"; \n                });\n                quickReplyContainer.appendChild(button);\n            });\n        } else {\n            quickReplyContainer.style.padding = \"0px\"; \n        }\n    }\n    \n    function createCarouselCardElement(cardData) {\n        const card = document.createElement('div');\n        card.classList.add('carousel-card');\n\n        if (cardData.is_bestseller) {\n            const bestsellerTag = document.createElement('div');\n            bestsellerTag.classList.add('carousel-bestseller-tag');\n            bestsellerTag.textContent = '\u2b50 Best Seller';\n            card.appendChild(bestsellerTag); \n        }\n\n        const img = document.createElement('img');\n        img.classList.add('carousel-card-image');\n        img.src = cardData.image_url || 'https://via.placeholder.com/200x150.png/CCCCCC/FFFFFF?text=No+Image'; \n        img.alt = cardData.title || \"Perfume Image\";\n        \n        img.onerror = function() {\n            console.warn(`[Image Load Error] Failed to load image: ${this.src}.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3704, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7140191-cb2a-4802-ae1b-c6c5ebccea33": {"__data__": {"id_": "c7140191-cb2a-4802-ae1b-c6c5ebccea33", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "951fec756923b1792c0e24f8ee9e0e30bcdcdcdfc02ee06ea2597a9b440f0be8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ede124b2-bdd5-4f16-833f-edbc1d46bda5", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "b02d5cb58bb0a251d5c54a9d97b5f973ea134d6c4fd8a3807cc6798f928ae7eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e0ab7c2-bebe-4bd3-9525-21d840ced0c6", "node_type": "1", "metadata": {}, "hash": "5e0ed3746e700c0c6bc5e2064b7ed81ebe66b5f98082c24ac91aa3bad944a122", "class_name": "RelatedNodeInfo"}}, "text": "CSS background should take over.`);\n        };\n        card.appendChild(img);\n\n        const cardInfo = document.createElement('div');\n        cardInfo.classList.add('carousel-card-info');\n\n        const title = document.createElement('h4');\n        title.classList.add('carousel-card-title');\n        title.textContent = cardData.title || \"Perfume Name\";\n        cardInfo.appendChild(title);\n\n        if (cardData.subtitle) {\n            const subtitle = document.createElement('p');\n            subtitle.classList.add('carousel-card-subtitle');\n            subtitle.textContent = cardData.subtitle;\n            cardInfo.appendChild(subtitle);\n        }\n\n        if (cardData.price) {\n            const price = document.createElement('p');\n            price.classList.add('carousel-card-price');\n            price.textContent = cardData.price;\n            cardInfo.appendChild(price);\n        }\n        \n        card.appendChild(cardInfo);\n\n        if (cardData.buttons && cardData.buttons.length > 0) {\n            const cardButtons = document.createElement('div');\n            cardButtons.classList.add('carousel-card-buttons');\n            cardData.buttons.forEach(btnData => {\n                const button = document.createElement('button');\n                button.classList.add('carousel-action-btn'); \n                button.textContent = btnData.label;\n                button.dataset.payload = btnData.payload;\n\n                button.addEventListener('click', () => {\n                    displayMessage(`Selected: ${cardData.title} - ${btnData.label}`, 'user');\n                    sendPayloadToServer(btnData.payload);\n                });\n                cardButtons.appendChild(button);\n            });\n            card.appendChild(cardButtons);\n        }\n        return card;\n    }\n\n    function displayCarouselCards(carouselCardsArray) {\n        if (carouselCardsArray && carouselCardsArray.length > 0) {\n            const botTurnWrapperCarousel = document.createElement('div');\n            botTurnWrapperCarousel.classList.add('bot-turn-wrapper'); \n            botTurnWrapperCarousel.classList.add('carousel-container'); \n\n            const avatarDiv = document.createElement('div');\n            avatarDiv.classList.add('bot-avatar');\n            botTurnWrapperCarousel.appendChild(avatarDiv);\n\n            const carouselBubble = document.createElement('div');\n            carouselBubble.classList.add('carousel-bubble-content'); \n\n            const cardsWrapper = document.createElement('div');\n            cardsWrapper.classList.add('carousel-cards-wrapper'); \n            \n            carouselCardsArray.forEach((cardData) => {\n                const cardElement = createCarouselCardElement(cardData);\n                cardsWrapper.appendChild(cardElement); \n            });\n\n            carouselBubble.appendChild(cardsWrapper); \n            botTurnWrapperCarousel.appendChild(carouselBubble); \n\n            chatbox.appendChild(botTurnWrapperCarousel);\n            scrollToBottom(botTurnWrapperCarousel); \n        }\n    }\n\n    async function sendDataToServer(dataToSend) {\n        if (currentQuizSessionData) {\n            dataToSend.quiz_session_data = currentQuizSessionData;\n        }\n\n        const typingTurnWrapper = document.createElement('div');\n        typingTurnWrapper.classList.add('bot-turn-wrapper', 'typing-indicator-turn'); \n\n        const typingAvatar = document.createElement('div');\n        typingAvatar.classList.add('bot-avatar');\n        typingTurnWrapper.appendChild(typingAvatar);\n\n        const typingDotsContainer = document.createElement('div');\n        typingDotsContainer.classList.add('typing-dots-container');\n        \n        const typingText = document.createElement('span');\n        typingText.textContent = 'Typing';\n        typingDotsContainer.appendChild(typingText);\n\n        for (let i = 0; i < 3; i++) {\n            const dot = document.createElement('span');\n            dot.classList.add('typing-dot');\n            typingDotsContainer.appendChild(dot);\n        }\n        typingTurnWrapper.appendChild(typingDotsContainer);\n        \n        chatbox.appendChild(typingTurnWrapper);\n        scrollToBottom(typingTurnWrapper); \n\n        try {\n            const response = await fetch(BACKEND_API_URL, { \n                method: 'POST',\n                headers: { 'Content-Type': 'application/json', },\n                body: JSON.stringify(dataToSend),\n            });\n\n            if (chatbox.contains(typingTurnWrapper)){ \n                chatbox.removeChild(typingTurnWrapper);\n            }\n\n            if (!response.ok) {\n                let errorText = `HTTP error!", "mimetype": "text/plain", "start_char_idx": 3705, "end_char_idx": 8330, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e0ab7c2-bebe-4bd3-9525-21d840ced0c6": {"__data__": {"id_": "5e0ab7c2-bebe-4bd3-9525-21d840ced0c6", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "550804ab-fd65-4a96-bcf8-4f52bd7f69f0", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "951fec756923b1792c0e24f8ee9e0e30bcdcdcdfc02ee06ea2597a9b440f0be8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7140191-cb2a-4802-ae1b-c6c5ebccea33", "node_type": "1", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}, "hash": "db67323d38cf5b9c08b7d2adc164d1c39bce8cd098a638e5ffc26a4becf2611b", "class_name": "RelatedNodeInfo"}}, "text": "status: ${response.status}`;\n                try {\n                    const errorData = await response.json(); \n                    errorText = errorData.error || errorText;\n                } catch (e) {\n                    errorText = await response.text(); \n                }\n                throw new Error(errorText);\n            }\n\n            const responseData = await response.json();\n            \n            if (responseData.reply) {\n                displayMessage(responseData.reply, 'bot'); \n            }\n            \n            if (responseData.carousel_cards && responseData.carousel_cards.length > 0) {\n                displayCarouselCards(responseData.carousel_cards); \n                displayQuickReplies([]); \n            } else if (responseData.quick_replies) {\n                displayQuickReplies(responseData.quick_replies);\n                if (!responseData.reply && quickReplyContainer.children.length > 0) {\n                    const targetScrollElement = quickReplyContainer.previousElementSibling || chatbox.lastElementChild;\n                    if (targetScrollElement) {\n                        scrollToBottom(targetScrollElement);\n                    }\n                } else if (responseData.reply && quickReplyContainer.children.length > 0) {\n                     scrollToBottom(quickReplyContainer.previousElementSibling || chatbox.lastElementChild);\n                }\n            }\n\n            if (responseData.quiz_session_data && responseData.quiz_session_data.active_quiz) {\n                currentQuizSessionData = responseData.quiz_session_data;\n            } else {\n                currentQuizSessionData = null; \n            }\n\n            if (responseData.link_action && responseData.link_action.url) {\n                displayMessage(`I'll try to open: ${responseData.link_action.url}`, 'bot'); \n                window.open(responseData.link_action.url, responseData.link_action.target || '_blank');\n            }\n\n        } catch (error) {\n            if (chatbox.contains(typingTurnWrapper)){ \n                chatbox.removeChild(typingTurnWrapper);\n            }\n            console.error('Error sending/receiving message:', error);\n            displayMessage(`Sorry, I encountered an error: ${error.message}. Please ensure the backend server is running and accessible.`, 'bot');\n        }\n    }\n\n    function sendTextMessage() {\n        const messageText = userInput.value.trim();\n        if (messageText) {\n            displayMessage(messageText, 'user'); \n            sendDataToServer({ message: messageText });\n            userInput.value = ''; \n            quickReplyContainer.innerHTML = ''; \n            quickReplyContainer.style.padding = \"0px\"; \n        }\n    }\n\n    function sendPayloadToServer(payload) {\n        sendDataToServer({ payload: payload });\n    }\n\n    sendButton.addEventListener('click', sendTextMessage);\n    userInput.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault(); \n            sendTextMessage();\n        }\n    });\n    \n    // --- PERUBAHAN DI SINI ---\n    // Hapus displayMessage() yang di-hardcode\n    // displayMessage(\"Hello! I'm the Bali Surfer Bot \ud83c\udf0a. Type 'Hi' or choose an option if available!\", \"bot\"); \n    \n    // Langsung kirim \"Hi\" (atau payload inisialisasi) ke server.\n    // Respons pertama dari server akan menjadi sapaan dan menampilkan quick replies.\n    sendDataToServer({ message: \"Hi\" }); \n    // --- AKHIR PERUBAHAN ---\n\n});", "mimetype": "text/plain", "start_char_idx": 8331, "end_char_idx": 11807, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bffcf79d-2750-46b6-9cc2-b0a3375f34f9": {"__data__": {"id_": "bffcf79d-2750-46b6-9cc2-b0a3375f34f9", "embedding": null, "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/response_tokopedia_guide.json", "file_name": "response_tokopedia_guide.json", "file_type": "application/json", "file_size": 791, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "20c77b91-90fb-4040-b78f-d76c40ec8995", "node_type": "4", "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/response_tokopedia_guide.json", "file_name": "response_tokopedia_guide.json", "file_type": "application/json", "file_size": 791, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}, "hash": "4e39f7eb8aa22c1489af723c322ce62e5e01a4ef54c110f14f9ac531ee257fb3", "class_name": "RelatedNodeInfo"}}, "text": "{\n  \"quick_replies\": [\n    {\n      \"label\": \"Shopee Guide\",\n      \"payload\": \"action_faq_payment_shopee\"\n    },\n    {\n      \"label\": \"\\u2753 More FAQs\",\n      \"payload\": \"action_faq_main\"\n    },\n    {\n      \"label\": \"\\u21a9\\ufe0f Main Menu\",\n      \"payload\": \"action_main_menu\"\n    }\n  ],\n  \"reply\": \"1. On the Checkout page, review your order details, quantity, and shipping address.\\n2. Select a payment method: GoPay, Bank Transfer (BCA, BNI, Mandiri, BRI), Credit/Debit Card (Visa, MasterCard), or ShopeePay (if available).\\n3. Follow the on-screen instructions to complete payment.\\n4. Save your payment proof or take a screenshot.\\n5. Return to your order page on Tokopedia and upload proof of payment (if prompted).\\n6. Wait for confirmation and a tracking number from the seller.\"\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"7b4dd3d3-0d22-45be-a873-f4e7ee912b7c": {"node_ids": ["814b3ab5-f347-4632-ac08-2078b8bd9dcf", "94623b20-8a86-4bce-9397-0d026113300c", "a44380e3-4f7a-4715-ad8a-ee1d5a85a018", "a4cd4303-18cd-4bdc-8253-8d9d7b1cf5b5", "0495298b-2aa8-45c2-9657-5a108f867e59", "2e0d2e9e-4d19-479d-895b-cf4f611d2f86", "6480bca9-61ff-4788-a112-db65ab317b68"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/Bali Surver.txt", "file_name": "Bali Surver.txt", "file_type": "text/plain", "file_size": 20456, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "2d17a20b-2160-4cbd-9e34-6538482e5840": {"node_ids": ["e18f5d78-bc98-4123-8a51-886695414922"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 288, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}}, "e17ca871-0ee6-4523-b902-8183da6ccff2": {"node_ids": ["b27fadec-6a82-455e-92bc-50aade1c21cc", "1b35f758-ec20-4c16-967c-e4a1aa78634c"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/routes.py", "file_name": "routes.py", "file_type": "text/x-python", "file_size": 6120, "creation_date": "2025-05-15", "last_modified_date": "2025-05-15"}}, "f30d43af-128a-4fd3-98c2-ea1ceada23c5": {"node_ids": ["3c166e31-d18e-49bb-8699-6bb507e5b517"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/api/server.py", "file_name": "server.py", "file_type": "text/x-python", "file_size": 3015, "creation_date": "2025-05-10", "last_modified_date": "2025-05-10"}}, "dcf91579-ae9d-4814-9d0e-b56be5e6f1df": {"node_ids": ["5e867a5c-8bce-4ae2-b970-ce3241a29166"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "428c8d61-390f-4d1a-b656-2f87c81d641b": {"node_ids": ["5de63d04-dfde-4f75-942f-0c9ba8ce62dc", "fa563a32-8e54-40d8-8c6c-b713ef61a6b7", "ce3c4156-ca7b-4869-8dfa-dd51d6fba718", "106f052f-bac9-4c1f-9c48-96f396d8a9cd"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/action_handler.py", "file_name": "action_handler.py", "file_type": "text/x-python", "file_size": 12892, "creation_date": "2025-05-17", "last_modified_date": "2025-05-17"}}, "76659b49-0055-4e28-9020-a31ea62cbc5b": {"node_ids": ["46302779-6fb0-4fb6-b734-3371d3492190", "1f8889b7-cffa-4899-8dd3-7780274afd47", "e0f38874-c9b4-4905-b448-303476c8ca5e", "778d4ddd-9f54-442b-8d1e-fe490a0ba92f", "daa79d4d-19e4-4b09-98d7-ba99773a0996", "a1279ef8-d0da-44d2-b24d-7cb902b6ff4c", "b6b6464d-fb83-43fe-b275-1c251eb817d9", "51188862-12a2-4079-97a0-e947e30b97c2"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/chatbot.py", "file_name": "chatbot.py", "file_type": "text/x-python", "file_size": 31447, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}}, "23cb7585-b237-4849-8290-fe3c0ad08fab": {"node_ids": ["04d4d346-861c-4518-8352-39e66a710ab4", "9acb6aeb-8477-4f63-878d-fb213506b879"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/embedding.py", "file_name": "embedding.py", "file_type": "text/x-python", "file_size": 5751, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "4b6af1f5-c9fb-43d6-b105-7089ce96625e": {"node_ids": ["1659ea24-5899-44fa-918e-d5aa40f92369", "f48b3c05-2b1a-447c-9047-9e9e6db8f4f8", "10375478-9b69-4f99-9790-39277831b609", "61d57bf7-ab65-4a87-add8-3240f0b075e4"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/faq_manager.py", "file_name": "faq_manager.py", "file_type": "text/x-python", "file_size": 12768, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}}, "2a846f99-5fe7-4493-a0dd-639788eb506a": {"node_ids": ["c07df0e2-ef76-4a78-bf05-350f3c205e2a", "febfd0b0-6031-474d-9d9d-eb36658adf52", "07e9ba50-ceb9-4701-b868-265100dfb95c"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/llm_interaction.py", "file_name": "llm_interaction.py", "file_type": "text/x-python", "file_size": 7335, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "e05cd9c3-a50a-4d9b-9c7e-8d286979f5b2": {"node_ids": ["2cafbad8-f9b6-4c47-8dd4-5c0976ef4727", "ee8c0e3c-01e0-4aab-86c4-95c44b6fada2", "bd5d7b2c-8196-4a4b-88e4-0053d0101a1b"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/prompting.py", "file_name": "prompting.py", "file_type": "text/x-python", "file_size": 10617, "creation_date": "2025-05-20", "last_modified_date": "2025-05-20"}}, "920623a3-837c-4701-a871-88012d6549df": {"node_ids": ["83729607-4c9c-473e-a561-ed4a28d11023", "bcceba26-7544-4425-b400-ae8b7928cb80", "08e15406-f89e-4af2-9199-af846b12eb48", "5989c398-d366-49e1-8fa2-4fbe9e666b35", "f4ebaeac-78d2-4af3-86c3-dfcebf601f4b", "4703fd7f-a415-4ff4-9d17-c75b1eef3a44"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/quiz_manager.py", "file_name": "quiz_manager.py", "file_type": "text/x-python", "file_size": 21173, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "8190836a-fef3-42e0-bffd-cc6f7213200f": {"node_ids": ["f81178f8-36c3-4766-9d0d-ac39d1b3b0a3", "6524d622-7068-4f33-99ff-fc410f06b0b7", "a98ebc3e-8daa-4621-9f0d-90953a85787b"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/core/retrieval.py", "file_name": "retrieval.py", "file_type": "text/x-python", "file_size": 6575, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "bc5bbe72-2a35-4d27-95c5-5c463624f996": {"node_ids": ["95a615df-39a3-4140-a176-5eba9e924c53"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "99c54870-df71-4cb0-b702-070027838d28": {"node_ids": ["8db0f441-d843-406c-9438-1b9a4969a470", "7c71a61f-edda-4ff5-b258-01ceac7ee63d", "6c150e08-3886-4704-b67d-dce89e211539", "00fd73f5-5005-47e1-bd54-f20f9d917a12"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/chunking.py", "file_name": "chunking.py", "file_type": "text/x-python", "file_size": 12908, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "e911ecec-728b-4d37-ae47-9c0243536c51": {"node_ids": ["558fdebe-9bcc-4337-b186-00f9d28f596c", "1b8a309e-c71a-4f71-bc01-74d98e023f8e"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/data/loader.py", "file_name": "loader.py", "file_type": "text/x-python", "file_size": 4955, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "1e72c3ce-99b9-471f-811e-be570ec1b4cf": {"node_ids": ["15f439a6-67dc-47a8-bb44-07c90449eacd"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/requirements.txt", "file_name": "requirements.txt", "file_type": "text/plain", "file_size": 179, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "533691eb-26f8-4278-a72a-0d9a517bed9c": {"node_ids": ["4bc7a83f-e906-4fb8-a567-f2b6526b0be6", "51d249f2-7cb2-4519-ab91-857816e097db", "5fdfdd44-0b87-478d-8766-5c63409bd18d"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/scripts/build_vector_store.py", "file_name": "build_vector_store.py", "file_type": "text/x-python", "file_size": 8730, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}}, "fd104bae-6dce-4589-95ef-1c71df2bf52d": {"node_ids": ["e2b71b59-a82a-4392-a562-e4ca4df9334c"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "11dd6273-debc-4fa2-908b-a9a0c5295dd8": {"node_ids": ["c6edd4f6-b5ad-4e87-941f-926644a1a0ad", "e6b521f1-1e23-409c-bcb4-4bf935bd4685"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/config.py", "file_name": "config.py", "file_type": "text/x-python", "file_size": 4271, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}}, "06dc1791-f85c-4383-b9d8-e6ef09df60ec": {"node_ids": ["fccfaaa1-192b-44dd-bd8a-a086567326cd"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/utils/logging_config.py", "file_name": "logging_config.py", "file_type": "text/x-python", "file_size": 1265, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "6fcf6522-44d0-4f6f-aed1-027f6f73d7a5": {"node_ids": ["9435b2d6-b3c9-4972-892a-f859b5b80d4b"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/__init__.py", "file_name": "__init__.py", "file_type": "text/x-python", "file_size": 0, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "abea19ba-bc33-4e0b-9349-641ad47ff35c": {"node_ids": ["fdbc7680-0188-4332-9fbb-0a4a7baebcb1", "fd413ba6-ccb3-4cf3-bfee-dfa4edd41eb4", "f1251b79-f785-449b-8902-f3149ffb56ec"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/backend/vector_store/faiss_store.py", "file_name": "faiss_store.py", "file_type": "text/x-python", "file_size": 8931, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}}, "e722c170-ba69-41c6-9ea9-c7c706def820": {"node_ids": ["1ae014cb-5801-4d73-a5dc-830d4d48f9a5", "b42251e6-8f21-4b04-aead-84eac56a0b57"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/avatar.css", "file_name": "avatar.css", "file_type": "text/css", "file_size": 4612, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "28b28a63-2908-4b97-af1c-372d0dfc4526": {"node_ids": ["076aa109-eb13-4509-bb1f-b0ef73899505", "7d04cdd7-de92-4755-b478-3b9f0f9a4468", "8d01fec2-65c5-482b-b4e8-3c4fe24fafdb"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/css/style.css", "file_name": "style.css", "file_type": "text/css", "file_size": 6995, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "bb812494-d334-4c4c-9b68-e435354ad303": {"node_ids": ["bc30f8a1-9604-4974-9b5a-82ed02c6832b"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/images/logo-bali-surfer.png", "file_name": "logo-bali-surfer.png", "file_type": "image/png", "file_size": 24825, "creation_date": "2025-05-09", "last_modified_date": "2025-05-09"}}, "fedebcf3-43c9-40c1-a944-c8a80c409f45": {"node_ids": ["49ef1389-4192-44f9-9b23-92c6268a50d6"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/index.html", "file_name": "index.html", "file_type": "text/html", "file_size": 1030, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "550804ab-fd65-4a96-bcf8-4f52bd7f69f0": {"node_ids": ["ede124b2-bdd5-4f16-833f-edbc1d46bda5", "c7140191-cb2a-4802-ae1b-c6c5ebccea33", "5e0ab7c2-bebe-4bd3-9525-21d840ced0c6"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/frontend/js/script.js", "file_name": "script.js", "file_type": "text/javascript", "file_size": 11812, "creation_date": "2025-05-18", "last_modified_date": "2025-05-18"}}, "20c77b91-90fb-4040-b78f-d76c40ec8995": {"node_ids": ["bffcf79d-2750-46b6-9cc2-b0a3375f34f9"], "metadata": {"file_path": "/home/spiderman/Byteplus Demo/bali_surfer_chatbot/response_tokopedia_guide.json", "file_name": "response_tokopedia_guide.json", "file_type": "application/json", "file_size": 791, "creation_date": "2025-05-16", "last_modified_date": "2025-05-16"}}}}